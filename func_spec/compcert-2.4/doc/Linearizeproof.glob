DIGEST NO
Fcompcert.backend.Linearizeproof
R879:883 Coq.FSets.FSets <> <> lib
R901:906 compcert.lib.Coqlib <> <> lib
R924:927 compcert.lib.Maps <> <> lib
R945:951 compcert.lib.Ordered <> <> lib
R969:975 compcert.lib.Lattice <> <> lib
R993:995 compcert.common.AST <> <> lib
R1013:1020 compcert.lib.Integers <> <> lib
R1038:1043 compcert.common.Values <> <> lib
R1061:1066 compcert.common.Memory <> <> lib
R1084:1089 compcert.common.Events <> <> lib
R1107:1116 compcert.common.Globalenvs <> <> lib
R1134:1139 compcert.common.Errors <> <> lib
R1157:1165 compcert.common.Smallstep <> <> lib
R1183:1184 compcert.ia32.Op <> <> lib
R1202:1210 compcert.backend.Locations <> <> lib
R1228:1230 compcert.backend.LTL <> <> lib
R1248:1253 compcert.backend.Linear <> <> lib
R1271:1279 compcert.backend.Linearize <> <> lib
R1306:1320 Coq.FSets.FSetFacts Facts <> modtype
R1322:1328 compcert.backend.Linearize Nodeset <> modtype
mod 1290:1301 <> NodesetFacts
sec 1341:1353 <> LINEARIZATION
var 1366:1369 LINEARIZATION prog
R1372:1382 compcert.backend.LTL <> program def
var 1394:1398 LINEARIZATION tprog
R1401:1414 compcert.backend.Linear <> program def
var 1429:1434 LINEARIZATION TRANSF
R1456:1458 Coq.Init.Logic <> :type_scope:x_'='_x not
R1437:1450 compcert.backend.Linearize <> transf_program def
R1452:1455 compcert.backend.Linearizeproof <> LINEARIZATION.prog var
R1459:1460 compcert.common.Errors <> OK constr
R1462:1466 compcert.backend.Linearizeproof <> LINEARIZATION.tprog var
var 1474:1475 LINEARIZATION ge
R1480:1493 compcert.common.Globalenvs Genv globalenv def
R1495:1498 compcert.backend.Linearizeproof <> LINEARIZATION.prog var
var 1505:1507 LINEARIZATION tge
R1512:1525 compcert.common.Globalenvs Genv globalenv def
R1527:1531 compcert.backend.Linearizeproof <> LINEARIZATION.tprog var
prf 1541:1560 <> functions_translated
R1614:1620 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1623:1626 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1658:1661 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1648:1650 Coq.Init.Logic <> :type_scope:x_'='_x not
R1627:1641 compcert.common.Globalenvs Genv find_funct def
R1647:1647 compcert.backend.Linearizeproof <> v var
R1643:1645 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R1651:1654 Coq.Init.Datatypes <> Some constr
R1656:1657 compcert.backend.Linearizeproof <> tf var
R1677:1679 Coq.Init.Logic <> :type_scope:x_'='_x not
R1662:1674 compcert.backend.Linearize <> transf_fundef def
R1676:1676 compcert.backend.Linearizeproof <> f var
R1680:1681 compcert.common.Errors <> OK constr
R1683:1684 compcert.backend.Linearizeproof <> tf var
R1599:1601 Coq.Init.Logic <> :type_scope:x_'='_x not
R1579:1593 compcert.common.Globalenvs Genv find_funct def
R1598:1598 compcert.backend.Linearizeproof <> v var
R1595:1596 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R1602:1605 Coq.Init.Datatypes <> Some constr
R1607:1607 compcert.backend.Linearizeproof <> f var
R1694:1723 compcert.common.Globalenvs Genv find_funct_transf_partial thm
R1741:1746 compcert.backend.Linearizeproof <> LINEARIZATION.TRANSF var
R1725:1737 compcert.backend.Linearize <> transf_fundef def
prf 1757:1779 <> function_ptr_translated
R1837:1843 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1846:1849 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R1885:1888 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R1875:1877 Coq.Init.Logic <> :type_scope:x_'='_x not
R1850:1868 compcert.common.Globalenvs Genv find_funct_ptr def
R1874:1874 compcert.backend.Linearizeproof <> v var
R1870:1872 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R1878:1881 Coq.Init.Datatypes <> Some constr
R1883:1884 compcert.backend.Linearizeproof <> tf var
R1904:1906 Coq.Init.Logic <> :type_scope:x_'='_x not
R1889:1901 compcert.backend.Linearize <> transf_fundef def
R1903:1903 compcert.backend.Linearizeproof <> f var
R1907:1908 compcert.common.Errors <> OK constr
R1910:1911 compcert.backend.Linearizeproof <> tf var
R1822:1824 Coq.Init.Logic <> :type_scope:x_'='_x not
R1798:1816 compcert.common.Globalenvs Genv find_funct_ptr def
R1821:1821 compcert.backend.Linearizeproof <> v var
R1818:1819 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R1825:1828 Coq.Init.Datatypes <> Some constr
R1830:1830 compcert.backend.Linearizeproof <> f var
R1921:1954 compcert.common.Globalenvs Genv find_funct_ptr_transf_partial thm
R1972:1977 compcert.backend.Linearizeproof <> LINEARIZATION.TRANSF var
R1956:1968 compcert.backend.Linearize <> transf_fundef def
prf 1988:2004 <> symbols_preserved
R2045:2047 Coq.Init.Logic <> :type_scope:x_'='_x not
R2022:2037 compcert.common.Globalenvs Genv find_symbol def
R2043:2044 compcert.backend.Linearizeproof <> id var
R2039:2041 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R2048:2063 compcert.common.Globalenvs Genv find_symbol def
R2068:2069 compcert.backend.Linearizeproof <> id var
R2065:2066 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R2079:2109 compcert.common.Globalenvs Genv find_symbol_transf_partial thm
R2127:2132 compcert.backend.Linearizeproof <> LINEARIZATION.TRANSF var
R2111:2123 compcert.backend.Linearize <> transf_fundef def
prf 2143:2159 <> varinfo_preserved
R2198:2200 Coq.Init.Logic <> :type_scope:x_'='_x not
R2174:2191 compcert.common.Globalenvs Genv find_var_info def
R2197:2197 compcert.backend.Linearizeproof <> b var
R2193:2195 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R2201:2218 compcert.common.Globalenvs Genv find_var_info def
R2223:2223 compcert.backend.Linearizeproof <> b var
R2220:2221 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R2233:2265 compcert.common.Globalenvs Genv find_var_info_transf_partial thm
R2283:2288 compcert.backend.Linearizeproof <> LINEARIZATION.TRANSF var
R2267:2279 compcert.backend.Linearize <> transf_fundef def
prf 2299:2311 <> sig_preserved
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2360:2372 compcert.backend.Linear <> funsig def
R2374:2375 compcert.backend.Linearizeproof <> tf var
R2379:2388 compcert.backend.LTL <> funsig def
R2390:2390 compcert.backend.Linearizeproof <> f var
R2346:2348 Coq.Init.Logic <> :type_scope:x_'='_x not
R2331:2343 compcert.backend.Linearize <> transf_fundef def
R2345:2345 compcert.backend.Linearizeproof <> f var
R2349:2350 compcert.common.Errors <> OK constr
R2352:2353 compcert.backend.Linearizeproof <> tf var
R2409:2421 compcert.backend.Linearize <> transf_fundef def
R2424:2444 compcert.common.AST <> transf_partial_fundef def
prf 2541:2559 <> stacksize_preserved
R2632:2634 Coq.Init.Logic <> :type_scope:x_'='_x not
R2610:2628 compcert.backend.Linear <> fn_stacksize proj
R2630:2631 compcert.backend.Linearizeproof <> tf var
R2635:2650 compcert.backend.LTL <> fn_stacksize proj
R2652:2652 compcert.backend.Linearizeproof <> f var
R2596:2598 Coq.Init.Logic <> :type_scope:x_'='_x not
R2579:2593 compcert.backend.Linearize <> transf_function def
R2595:2595 compcert.backend.Linearizeproof <> f var
R2599:2600 compcert.common.Errors <> OK constr
R2602:2603 compcert.backend.Linearizeproof <> tf var
prf 2702:2725 <> find_function_translated
R2791:2797 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2800:2803 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2838:2841 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2828:2830 Coq.Init.Logic <> :type_scope:x_'='_x not
R2804:2816 compcert.backend.Linear <> find_function def
R2826:2827 compcert.backend.Linearizeproof <> ls var
R2822:2824 compcert.backend.Linearizeproof <> ros var
R2818:2820 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R2831:2834 Coq.Init.Datatypes <> Some constr
R2836:2837 compcert.backend.Linearizeproof <> tf var
R2857:2859 Coq.Init.Logic <> :type_scope:x_'='_x not
R2842:2854 compcert.backend.Linearize <> transf_fundef def
R2856:2856 compcert.backend.Linearizeproof <> f var
R2860:2861 compcert.common.Errors <> OK constr
R2863:2864 compcert.backend.Linearizeproof <> tf var
R2776:2778 Coq.Init.Logic <> :type_scope:x_'='_x not
R2749:2765 compcert.backend.LTL <> find_function def
R2774:2775 compcert.backend.Linearizeproof <> ls var
R2770:2772 compcert.backend.Linearizeproof <> ros var
R2767:2768 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R2779:2782 Coq.Init.Datatypes <> Some constr
R2784:2784 compcert.backend.Linearizeproof <> f var
R2883:2899 compcert.backend.LTL <> find_function def
R2939:2958 compcert.backend.Linearizeproof <> functions_translated thm
R2939:2958 compcert.backend.Linearizeproof <> functions_translated thm
R2977:2993 compcert.backend.Linearizeproof <> symbols_preserved thm
R2977:2993 compcert.backend.Linearizeproof <> symbols_preserved thm
R3006:3021 compcert.common.Globalenvs Genv find_symbol def
R3023:3024 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R3006:3021 compcert.common.Globalenvs Genv find_symbol def
R3023:3024 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R3038:3060 compcert.backend.Linearizeproof <> function_ptr_translated thm
R3038:3060 compcert.backend.Linearizeproof <> function_ptr_translated thm
prf 3196:3215 <> reachable_entrypoint
R3264:3266 Coq.Init.Logic <> :type_scope:x_'='_x not
R3230:3230 compcert.lib.Maps <> ::x_'!!'_x not
R3242:3245 compcert.lib.Maps <> ::x_'!!'_x not
R3263:3263 compcert.lib.Maps <> ::x_'!!'_x not
R3249:3261 compcert.backend.LTL <> fn_entrypoint proj
R3246:3246 compcert.backend.Linearizeproof <> f var
R3231:3239 compcert.backend.Linearize <> reachable def
R3241:3241 compcert.backend.Linearizeproof <> f var
R3267:3270 Coq.Init.Datatypes <> true constr
R3297:3305 compcert.backend.Linearize <> reachable def
R3318:3330 compcert.backend.Linearize <> reachable_aux def
R3318:3330 compcert.backend.Linearize <> reachable_aux def
R3345:3357 compcert.backend.Linearize <> reachable_aux def
R3386:3396 compcert.lib.Lattice LBoolean ge defax
R3425:3428 Coq.Init.Datatypes <> true constr
R3403:3405 compcert.lib.Maps <> ::x_'!!'_x not
R3423:3423 compcert.lib.Maps <> ::x_'!!'_x not
R3409:3421 compcert.backend.LTL <> fn_entrypoint proj
R3386:3396 compcert.lib.Lattice LBoolean ge defax
R3425:3428 Coq.Init.Datatypes <> true constr
R3403:3405 compcert.lib.Maps <> ::x_'!!'_x not
R3423:3423 compcert.lib.Maps <> ::x_'!!'_x not
R3409:3421 compcert.backend.LTL <> fn_entrypoint proj
R3441:3457 compcert.backend.Linearize DS fixpoint_entry thm
R3441:3457 compcert.backend.Linearize DS fixpoint_entry thm
R3486:3496 compcert.lib.Lattice LBoolean ge defax
R0:-1 compcert.backend.Linearizeproof <> y var
R3527:3533 compcert.lib.Maps PMap gi thm
R3527:3533 compcert.lib.Maps PMap gi thm
prf 3613:3632 <> reachable_successors
R3770:3772 Coq.Init.Logic <> :type_scope:x_'='_x not
R3752:3752 compcert.lib.Maps <> ::x_'!!'_x not
R3764:3766 compcert.lib.Maps <> ::x_'!!'_x not
R3767:3769 compcert.backend.Linearizeproof <> pc' var
R3753:3761 compcert.backend.Linearize <> reachable def
R3763:3763 compcert.backend.Linearizeproof <> f var
R3773:3776 Coq.Init.Datatypes <> true constr
R3739:3741 Coq.Init.Logic <> :type_scope:x_'='_x not
R3722:3722 compcert.lib.Maps <> ::x_'!!'_x not
R3734:3736 compcert.lib.Maps <> ::x_'!!'_x not
R3737:3738 compcert.backend.Linearizeproof <> pc var
R3723:3731 compcert.backend.Linearize <> reachable def
R3733:3733 compcert.backend.Linearizeproof <> f var
R3742:3745 Coq.Init.Datatypes <> true constr
R3689:3690 Coq.Lists.List <> In def
R3697:3712 compcert.backend.LTL <> successors_block def
R3714:3714 compcert.backend.Linearizeproof <> b var
R3692:3694 compcert.backend.Linearizeproof <> pc' var
R3676:3678 Coq.Init.Logic <> :type_scope:x_'='_x not
R3673:3673 compcert.lib.Maps <> ::x_'!'_x not
R3674:3675 compcert.backend.Linearizeproof <> pc var
R3661:3671 compcert.backend.LTL <> fn_code proj
R3658:3658 compcert.backend.Linearizeproof <> f var
R3679:3682 Coq.Init.Datatypes <> Some constr
R3684:3684 compcert.backend.Linearizeproof <> b var
R3804:3812 compcert.backend.Linearize <> reachable def
R3825:3837 compcert.backend.Linearize <> reachable_aux def
R3825:3837 compcert.backend.Linearize <> reachable_aux def
R3852:3864 compcert.backend.Linearize <> reachable_aux def
R3898:3908 compcert.lib.Lattice LBoolean ge defax
R3926:3927 compcert.lib.Maps <> ::x_'!!'_x not
R3915:3916 compcert.lib.Maps <> ::x_'!!'_x not
R3898:3908 compcert.lib.Lattice LBoolean ge defax
R3926:3927 compcert.lib.Maps <> ::x_'!!'_x not
R3915:3916 compcert.lib.Maps <> ::x_'!!'_x not
R3973:3973 compcert.backend.Linearizeproof <> r var
R3985:3986 compcert.lib.Maps <> ::x_'!!'_x not
R3948:3949 compcert.lib.Maps <> ::x_'!!'_x not
R3948:3949 compcert.lib.Maps <> ::x_'!!'_x not
R3973:3973 compcert.backend.Linearizeproof <> r var
R3985:3986 compcert.lib.Maps <> ::x_'!!'_x not
R4002:4021 compcert.backend.Linearize DS fixpoint_solution thm
R4002:4021 compcert.backend.Linearize DS fixpoint_solution thm
R4045:4056 compcert.backend.Linearize DS.L eq_refl prfax
R4045:4056 compcert.backend.Linearize DS.L eq_refl prfax
R4113:4119 compcert.lib.Maps PMap gi thm
R4113:4119 compcert.lib.Maps PMap gi thm
prf 4468:4490 <> nodeset_of_list_correct
R4559:4564 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4545:4556 compcert.lib.Coqlib <> list_norepet ind
R4558:4558 compcert.backend.Linearizeproof <> l var
R4565:4565 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4624:4631 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4670:4670 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4593:4597 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R4577:4586 compcert.backend.Linearize Nodeset In def
R4591:4592 compcert.backend.Linearizeproof <> s' var
R4588:4589 compcert.backend.Linearizeproof <> pc var
R4613:4616 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R4598:4607 compcert.backend.Linearize Nodeset In def
R4612:4612 compcert.backend.Linearizeproof <> s var
R4609:4610 compcert.backend.Linearizeproof <> pc var
R4617:4618 Coq.Lists.List <> In def
R4623:4623 compcert.backend.Linearizeproof <> l var
R4620:4621 compcert.backend.Linearizeproof <> pc var
R4654:4654 Coq.Init.Logic <> :type_scope:'~'_x not
R4655:4664 compcert.backend.Linearize Nodeset In def
R4669:4669 compcert.backend.Linearizeproof <> s var
R4666:4667 compcert.backend.Linearizeproof <> pc var
R4643:4644 Coq.Lists.List <> In def
R4649:4649 compcert.backend.Linearizeproof <> l var
R4646:4647 compcert.backend.Linearizeproof <> pc var
R4531:4533 Coq.Init.Logic <> :type_scope:x_'='_x not
R4512:4526 compcert.backend.Linearize <> nodeset_of_list def
R4530:4530 compcert.backend.Linearizeproof <> s var
R4528:4528 compcert.backend.Linearizeproof <> l var
R4534:4535 compcert.common.Errors <> OK constr
R4537:4538 compcert.backend.Linearizeproof <> s' var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R4809:4819 compcert.backend.Linearize Nodeset mem def
R4809:4819 compcert.backend.Linearize Nodeset mem def
R4946:4958 compcert.backend.Linearize Nodeset add_1 def
R4946:4958 compcert.backend.Linearize Nodeset add_1 def
R5008:5027 compcert.backend.Linearizeproof NodesetFacts add_iff thm
R5008:5027 compcert.backend.Linearizeproof NodesetFacts add_iff thm
R5040:5051 compcert.backend.Linearize Nodeset.E eq defax
R5061:5078 compcert.lib.Ordered OrderedPositive eq defax
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R5129:5152 compcert.backend.Linearizeproof NodesetFacts not_mem_iff thm
R5129:5152 compcert.backend.Linearizeproof NodesetFacts not_mem_iff thm
R5193:5212 compcert.backend.Linearizeproof NodesetFacts add_iff thm
R5193:5212 compcert.backend.Linearizeproof NodesetFacts add_iff thm
R0:-1 compcert.backend.Linearizeproof <> y var
prf 5234:5256 <> check_reachable_correct
R5379:5388 compcert.backend.Linearize Nodeset In def
R5393:5393 compcert.backend.Linearizeproof <> s var
R5390:5391 compcert.backend.Linearizeproof <> pc var
R5366:5368 Coq.Init.Logic <> :type_scope:x_'='_x not
R5362:5363 compcert.lib.Maps <> ::x_'!!'_x not
R5364:5365 compcert.backend.Linearizeproof <> pc var
R5357:5361 compcert.backend.Linearizeproof <> reach var
R5369:5372 Coq.Init.Datatypes <> true constr
R5342:5344 Coq.Init.Logic <> :type_scope:x_'='_x not
R5339:5339 compcert.lib.Maps <> ::x_'!'_x not
R5340:5341 compcert.backend.Linearizeproof <> pc var
R5327:5337 compcert.backend.LTL <> fn_code proj
R5324:5324 compcert.backend.Linearizeproof <> f var
R5345:5348 Coq.Init.Datatypes <> Some constr
R5350:5350 compcert.backend.Linearizeproof <> i var
R5311:5313 Coq.Init.Logic <> :type_scope:x_'='_x not
R5286:5300 compcert.backend.Linearize <> check_reachable def
R5310:5310 compcert.backend.Linearizeproof <> s var
R5304:5308 compcert.backend.Linearizeproof <> reach var
R5302:5302 compcert.backend.Linearizeproof <> f var
R5314:5317 Coq.Init.Datatypes <> true constr
R5553:5561 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R5641:5641 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R5546:5548 Coq.Init.Logic <> :type_scope:x_'='_x not
R5544:5545 compcert.backend.Linearizeproof <> ok var
R5549:5552 Coq.Init.Datatypes <> true constr
R5626:5635 compcert.backend.Linearize Nodeset In def
R5637:5638 compcert.backend.Linearizeproof <> pc var
R5610:5612 Coq.Init.Logic <> :type_scope:x_'='_x not
R5606:5607 compcert.lib.Maps <> ::x_'!!'_x not
R5608:5609 compcert.backend.Linearizeproof <> pc var
R5613:5616 Coq.Init.Datatypes <> true constr
R5580:5581 Coq.Lists.List <> In def
R5591:5591 compcert.backend.Linearizeproof <> l var
R5583:5583 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5586:5587 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5589:5589 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5584:5585 compcert.backend.Linearizeproof <> pc var
R5588:5588 compcert.backend.Linearizeproof <> i var
R5529:5531 Coq.Init.Logic <> :type_scope:x_'='_x not
R5451:5464 Coq.Lists.List <> fold_left def
R5527:5528 compcert.backend.Linearizeproof <> ok var
R5525:5525 compcert.backend.Linearizeproof <> l var
R5478:5496 compcert.backend.Linearize <> check_reachable_aux def
R5517:5519 Coq.Init.Datatypes <> snd def
R5521:5521 compcert.backend.Linearizeproof <> p var
R5509:5511 Coq.Init.Datatypes <> fst def
R5513:5513 compcert.backend.Linearizeproof <> p var
R5506:5506 compcert.backend.Linearizeproof <> a var
R5532:5535 Coq.Init.Datatypes <> true constr
R5553:5561 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R5641:5641 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R5546:5548 Coq.Init.Logic <> :type_scope:x_'='_x not
R5544:5545 compcert.backend.Linearizeproof <> ok var
R5549:5552 Coq.Init.Datatypes <> true constr
R5626:5635 compcert.backend.Linearize Nodeset In def
R5637:5638 compcert.backend.Linearizeproof <> pc var
R5610:5612 Coq.Init.Logic <> :type_scope:x_'='_x not
R5606:5607 compcert.lib.Maps <> ::x_'!!'_x not
R5608:5609 compcert.backend.Linearizeproof <> pc var
R5613:5616 Coq.Init.Datatypes <> true constr
R5580:5581 Coq.Lists.List <> In def
R5591:5591 compcert.backend.Linearizeproof <> l var
R5583:5583 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5586:5587 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5589:5589 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5584:5585 compcert.backend.Linearizeproof <> pc var
R5588:5588 compcert.backend.Linearizeproof <> i var
R5529:5531 Coq.Init.Logic <> :type_scope:x_'='_x not
R5451:5464 Coq.Lists.List <> fold_left def
R5527:5528 compcert.backend.Linearizeproof <> ok var
R5525:5525 compcert.backend.Linearizeproof <> l var
R5478:5496 compcert.backend.Linearize <> check_reachable_aux def
R5517:5519 Coq.Init.Datatypes <> snd def
R5521:5521 compcert.backend.Linearizeproof <> p var
R5509:5511 Coq.Init.Datatypes <> fst def
R5513:5513 compcert.backend.Linearizeproof <> p var
R5506:5506 compcert.backend.Linearizeproof <> a var
R5532:5535 Coq.Init.Datatypes <> true constr
R5795:5813 compcert.backend.Linearize <> check_reachable_aux def
R5846:5847 compcert.lib.Maps <> ::x_'!!'_x not
R5846:5847 compcert.lib.Maps <> ::x_'!!'_x not
R5860:5868 Coq.Init.Datatypes <> andb_prop thm
R5860:5868 Coq.Init.Datatypes <> andb_prop thm
R5948:5956 Coq.Init.Datatypes <> andb_prop thm
R5948:5956 Coq.Init.Datatypes <> andb_prop thm
R5975:5987 compcert.backend.Linearize Nodeset mem_2 def
R5975:5987 compcert.backend.Linearize Nodeset mem_2 def
R6028:6042 compcert.backend.Linearize <> check_reachable def
R6053:6067 compcert.lib.Maps PTree fold_spec thm
R6053:6067 compcert.lib.Maps PTree fold_spec thm
R6138:6159 compcert.lib.Maps PTree elements_correct thm
R6138:6159 compcert.lib.Maps PTree elements_correct thm
prf 6181:6198 <> enumerate_complete
R6315:6316 Coq.Lists.List <> In def
R6321:6324 compcert.backend.Linearizeproof <> enum var
R6318:6319 compcert.backend.Linearizeproof <> pc var
R6302:6304 Coq.Init.Logic <> :type_scope:x_'='_x not
R6285:6285 compcert.lib.Maps <> ::x_'!!'_x not
R6297:6299 compcert.lib.Maps <> ::x_'!!'_x not
R6300:6301 compcert.backend.Linearizeproof <> pc var
R6286:6294 compcert.backend.Linearize <> reachable def
R6296:6296 compcert.backend.Linearizeproof <> f var
R6305:6308 Coq.Init.Datatypes <> true constr
R6270:6272 Coq.Init.Logic <> :type_scope:x_'='_x not
R6267:6267 compcert.lib.Maps <> ::x_'!'_x not
R6268:6269 compcert.backend.Linearizeproof <> pc var
R6255:6265 compcert.backend.LTL <> fn_code proj
R6252:6252 compcert.backend.Linearizeproof <> f var
R6273:6276 Coq.Init.Datatypes <> Some constr
R6278:6278 compcert.backend.Linearizeproof <> i var
R6236:6238 Coq.Init.Logic <> :type_scope:x_'='_x not
R6225:6233 compcert.backend.Linearize <> enumerate def
R6235:6235 compcert.backend.Linearizeproof <> f var
R6239:6240 compcert.common.Errors <> OK constr
R6242:6245 compcert.backend.Linearizeproof <> enum var
R6359:6367 compcert.backend.Linearize <> enumerate def
R6387:6395 compcert.backend.Linearize <> reachable def
R6387:6395 compcert.backend.Linearize <> reachable def
R6461:6475 compcert.backend.Linearize <> check_reachable def
R6461:6475 compcert.backend.Linearize <> check_reachable def
R6516:6538 compcert.backend.Linearizeproof <> check_reachable_correct thm
R6565:6587 compcert.backend.Linearizeproof <> nodeset_of_list_correct thm
R6653:6667 compcert.backend.Linearize Nodeset empty_1 def
R6653:6667 compcert.backend.Linearize Nodeset empty_1 def
prf 6692:6708 <> enumerate_norepet
R6757:6768 compcert.lib.Coqlib <> list_norepet ind
R6770:6773 compcert.backend.Linearizeproof <> enum var
R6741:6743 Coq.Init.Logic <> :type_scope:x_'='_x not
R6730:6738 compcert.backend.Linearize <> enumerate def
R6740:6740 compcert.backend.Linearizeproof <> f var
R6744:6745 compcert.common.Errors <> OK constr
R6747:6750 compcert.backend.Linearizeproof <> enum var
R6811:6819 compcert.backend.Linearize <> enumerate def
R6839:6847 compcert.backend.Linearize <> reachable def
R6839:6847 compcert.backend.Linearize <> reachable def
R6913:6927 compcert.backend.Linearize <> check_reachable def
R6913:6927 compcert.backend.Linearize <> check_reachable def
R6968:6990 compcert.backend.Linearizeproof <> nodeset_of_list_correct thm
def 7223:7235 <> unique_labels
R7241:7244 compcert.backend.Linear <> code def
R7265:7265 compcert.backend.Linearizeproof <> c var
R7276:7278 Coq.Init.Datatypes <> nil constr
R7283:7286 Coq.Init.Logic <> True ind
R7302:7305 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7292:7297 compcert.backend.Linear <> Llabel constr
R7331:7334 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R7311:7312 Coq.Init.Logic <> :type_scope:'~'_x not
R7330:7330 Coq.Init.Logic <> :type_scope:'~'_x not
R7313:7314 Coq.Lists.List <> In def
R7329:7329 compcert.backend.Linearizeproof <> c var
R7317:7322 compcert.backend.Linear <> Llabel constr
R7335:7347 compcert.backend.Linearizeproof <> unique_labels def
R7349:7349 compcert.backend.Linearizeproof <> c var
R7356:7359 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7365:7377 compcert.backend.Linearizeproof <> unique_labels def
R7379:7379 compcert.backend.Linearizeproof <> c var
prf 7395:7411 <> find_label_unique
R7531:7533 Coq.Init.Logic <> :type_scope:x_'='_x not
R7529:7530 compcert.backend.Linearizeproof <> c1 var
R7534:7535 compcert.backend.Linearizeproof <> c3 var
R7513:7515 Coq.Init.Logic <> :type_scope:x_'='_x not
R7496:7505 compcert.backend.Linear <> find_label def
R7511:7512 compcert.backend.Linearizeproof <> c2 var
R7507:7509 compcert.backend.Linearizeproof <> lbl var
R7516:7519 Coq.Init.Datatypes <> Some constr
R7521:7522 compcert.backend.Linearizeproof <> c3 var
R7474:7486 compcert.backend.Linearizeproof <> unique_labels def
R7488:7489 compcert.backend.Linearizeproof <> c2 var
R7439:7445 compcert.lib.Coqlib <> is_tail ind
R7466:7467 compcert.backend.Linearizeproof <> c2 var
R7458:7461 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7448:7453 compcert.backend.Linear <> Llabel constr
R7455:7457 compcert.backend.Linearizeproof <> lbl var
R7462:7463 compcert.backend.Linearizeproof <> c1 var
R7636:7651 compcert.backend.Linear <> is_label_correct thm
R7636:7651 compcert.backend.Linear <> is_label_correct thm
R7667:7674 compcert.backend.Linear <> is_label def
R7667:7674 compcert.backend.Linear <> is_label def
R7780:7789 compcert.lib.Coqlib <> is_tail_in thm
R7780:7789 compcert.lib.Coqlib <> is_tail_in thm
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
prf 7950:7968 <> starts_with_correct
R8113:8116 compcert.common.Smallstep <> plus ind
R8167:8171 compcert.backend.Linear <> State constr
R8186:8186 compcert.backend.Linearizeproof <> m var
R8183:8184 compcert.backend.Linearizeproof <> ls var
R8180:8181 compcert.backend.Linearizeproof <> c3 var
R8177:8178 compcert.backend.Linearizeproof <> sp var
R8175:8175 compcert.backend.Linearizeproof <> f var
R8173:8173 compcert.backend.Linearizeproof <> s var
R8163:8164 compcert.common.Events <> E0 def
R8128:8132 compcert.backend.Linear <> State constr
R8147:8147 compcert.backend.Linearizeproof <> m var
R8144:8145 compcert.backend.Linearizeproof <> ls var
R8141:8142 compcert.backend.Linearizeproof <> c1 var
R8138:8139 compcert.backend.Linearizeproof <> sp var
R8136:8136 compcert.backend.Linearizeproof <> f var
R8134:8134 compcert.backend.Linearizeproof <> s var
R8123:8125 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R8118:8121 compcert.backend.Linear <> step ind
R8097:8099 Coq.Init.Logic <> :type_scope:x_'='_x not
R8080:8089 compcert.backend.Linear <> find_label def
R8095:8096 compcert.backend.Linearizeproof <> c2 var
R8091:8093 compcert.backend.Linearizeproof <> lbl var
R8100:8103 Coq.Init.Datatypes <> Some constr
R8105:8106 compcert.backend.Linearizeproof <> c3 var
R8067:8069 Coq.Init.Logic <> :type_scope:x_'='_x not
R8049:8059 compcert.backend.Linearize <> starts_with def
R8065:8066 compcert.backend.Linearizeproof <> c1 var
R8061:8063 compcert.backend.Linearizeproof <> lbl var
R8070:8073 Coq.Init.Datatypes <> true constr
R8027:8039 compcert.backend.Linearizeproof <> unique_labels def
R8041:8042 compcert.backend.Linearizeproof <> c2 var
R8008:8014 compcert.lib.Coqlib <> is_tail ind
R8019:8020 compcert.backend.Linearizeproof <> c2 var
R8016:8017 compcert.backend.Linearizeproof <> c1 var
R8252:8262 compcert.backend.Linearize <> starts_with def
R8252:8262 compcert.backend.Linearize <> starts_with def
R8339:8340 compcert.common.Events <> E0 def
R8343:8347 compcert.backend.Linear <> State constr
R8365:8366 compcert.common.Events <> E0 def
R8324:8332 compcert.common.Smallstep <> plus_left constr
R8339:8340 compcert.common.Events <> E0 def
R8343:8347 compcert.backend.Linear <> State constr
R8365:8366 compcert.common.Events <> E0 def
R8324:8332 compcert.common.Smallstep <> plus_left constr
R8404:8406 compcert.lib.Coqlib <> peq def
R8404:8406 compcert.lib.Coqlib <> peq def
R8468:8484 compcert.backend.Linearizeproof <> find_label_unique thm
R8468:8484 compcert.backend.Linearizeproof <> find_label_unique thm
R8513:8521 compcert.common.Smallstep <> plus_star thm
R8513:8521 compcert.common.Smallstep <> plus_star thm
R8560:8576 compcert.lib.Coqlib <> is_tail_cons_left thm
R8560:8576 compcert.lib.Coqlib <> is_tail_cons_left thm
prf 8668:8688 <> find_label_add_branch
R8742:8744 Coq.Init.Logic <> :type_scope:x_'='_x not
R8711:8720 compcert.backend.Linear <> find_label def
R8727:8736 compcert.backend.Linearize <> add_branch def
R8740:8740 compcert.backend.Linearizeproof <> k var
R8738:8738 compcert.backend.Linearizeproof <> s var
R8722:8724 compcert.backend.Linearizeproof <> lbl var
R8745:8754 compcert.backend.Linear <> find_label def
R8760:8760 compcert.backend.Linearizeproof <> k var
R8756:8758 compcert.backend.Linearizeproof <> lbl var
R8787:8796 compcert.backend.Linearize <> add_branch def
R8809:8819 compcert.backend.Linearize <> starts_with def
R8809:8819 compcert.backend.Linearize <> starts_with def
prf 8845:8864 <> find_label_lin_block
R8923:8925 Coq.Init.Logic <> :type_scope:x_'='_x not
R8887:8896 compcert.backend.Linear <> find_label def
R8903:8917 compcert.backend.Linearize <> linearize_block def
R8921:8921 compcert.backend.Linearizeproof <> k var
R8919:8919 compcert.backend.Linearizeproof <> b var
R8898:8900 compcert.backend.Linearizeproof <> lbl var
R8926:8935 compcert.backend.Linear <> find_label def
R8941:8941 compcert.backend.Linearizeproof <> k var
R8937:8939 compcert.backend.Linearizeproof <> lbl var
R8979:8999 compcert.backend.Linearizeproof <> find_label_add_branch thm
R8979:8999 compcert.backend.Linearizeproof <> find_label_add_branch thm
R9078:9088 compcert.backend.Linearize <> starts_with def
R9078:9088 compcert.backend.Linearize <> starts_with def
prf 9123:9141 <> linearize_body_cons
R9195:9199 Coq.Init.Logic <> :type_scope:x_'='_x not
R9166:9179 compcert.backend.Linearize <> linearize_body def
R9186:9189 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9184:9185 compcert.backend.Linearizeproof <> pc var
R9190:9193 compcert.backend.Linearizeproof <> enum var
R9181:9181 compcert.backend.Linearizeproof <> f var
R9221:9221 compcert.lib.Maps <> ::x_'!'_x not
R9222:9223 compcert.backend.Linearizeproof <> pc var
R9209:9219 compcert.backend.LTL <> fn_code proj
R9206:9206 compcert.backend.Linearizeproof <> f var
R9234:9237 Coq.Init.Datatypes <> None constr
R9242:9255 compcert.backend.Linearize <> linearize_body def
R9259:9262 compcert.backend.Linearizeproof <> enum var
R9257:9257 compcert.backend.Linearizeproof <> f var
R9268:9271 Coq.Init.Datatypes <> Some constr
R9287:9290 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9278:9283 compcert.backend.Linear <> Llabel constr
R9285:9286 compcert.backend.Linearizeproof <> pc var
R9291:9305 compcert.backend.Linearize <> linearize_block def
R9310:9323 compcert.backend.Linearize <> linearize_body def
R9327:9330 compcert.backend.Linearizeproof <> enum var
R9325:9325 compcert.backend.Linearizeproof <> f var
R9364:9377 compcert.backend.Linearize <> linearize_body def
R9388:9405 compcert.lib.Coqlib <> list_fold_right_eq thm
R9388:9405 compcert.lib.Coqlib <> list_fold_right_eq thm
R9418:9431 compcert.backend.Linearize <> linearize_node def
R9443:9443 compcert.lib.Maps <> ::x_'!'_x not
R9457:9458 compcert.lib.Maps <> ::x_'!'_x not
R9444:9454 compcert.backend.LTL <> fn_code proj
R9443:9443 compcert.lib.Maps <> ::x_'!'_x not
R9457:9458 compcert.lib.Maps <> ::x_'!'_x not
R9444:9454 compcert.backend.LTL <> fn_code proj
prf 9481:9498 <> find_label_lin_rec
R9574:9580 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R9582:9583 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R9621:9623 Coq.Init.Logic <> :type_scope:x_'='_x not
R9584:9593 compcert.backend.Linear <> find_label def
R9599:9612 compcert.backend.Linearize <> linearize_body def
R9616:9619 compcert.backend.Linearizeproof <> enum var
R9614:9614 compcert.backend.Linearizeproof <> f var
R9595:9596 compcert.backend.Linearizeproof <> pc var
R9624:9627 Coq.Init.Datatypes <> Some constr
R9630:9644 compcert.backend.Linearize <> linearize_block def
R9648:9648 compcert.backend.Linearizeproof <> k var
R9646:9646 compcert.backend.Linearizeproof <> b var
R9559:9561 Coq.Init.Logic <> :type_scope:x_'='_x not
R9556:9556 compcert.lib.Maps <> ::x_'!'_x not
R9557:9558 compcert.backend.Linearizeproof <> pc var
R9544:9554 compcert.backend.LTL <> fn_code proj
R9541:9541 compcert.backend.Linearizeproof <> f var
R9562:9565 Coq.Init.Datatypes <> Some constr
R9567:9567 compcert.backend.Linearizeproof <> b var
R9525:9526 Coq.Lists.List <> In def
R9531:9534 compcert.backend.Linearizeproof <> enum var
R9528:9529 compcert.backend.Linearizeproof <> pc var
R9705:9723 compcert.backend.Linearizeproof <> linearize_body_cons thm
R9705:9723 compcert.backend.Linearizeproof <> linearize_body_cons thm
R9739:9741 compcert.lib.Coqlib <> peq def
R9739:9741 compcert.lib.Coqlib <> peq def
R9769:9782 compcert.backend.Linearize <> linearize_body def
R9769:9782 compcert.backend.Linearize <> linearize_body def
R9822:9829 compcert.lib.Coqlib <> peq_true thm
R9822:9829 compcert.lib.Coqlib <> peq_true thm
R9848:9849 Coq.Lists.List <> In def
R9848:9849 Coq.Lists.List <> In def
R0:-1 compcert.backend.Linearizeproof <> y var
R9945:9945 compcert.lib.Maps <> ::x_'!'_x not
R9959:9960 compcert.lib.Maps <> ::x_'!'_x not
R9946:9956 compcert.backend.LTL <> fn_code proj
R9945:9945 compcert.lib.Maps <> ::x_'!'_x not
R9959:9960 compcert.lib.Maps <> ::x_'!'_x not
R9946:9956 compcert.backend.LTL <> fn_code proj
R9982:9990 compcert.lib.Coqlib <> peq_false thm
R9982:9990 compcert.lib.Coqlib <> peq_false thm
R10001:10020 compcert.backend.Linearizeproof <> find_label_lin_block thm
R10001:10020 compcert.backend.Linearizeproof <> find_label_lin_block thm
prf 10055:10068 <> find_label_lin
R10187:10193 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10195:10198 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10225:10227 Coq.Init.Logic <> :type_scope:x_'='_x not
R10199:10208 compcert.backend.Linear <> find_label def
R10214:10220 compcert.backend.Linear <> fn_code proj
R10222:10223 compcert.backend.Linearizeproof <> tf var
R10210:10211 compcert.backend.Linearizeproof <> pc var
R10228:10231 Coq.Init.Datatypes <> Some constr
R10234:10248 compcert.backend.Linearize <> linearize_block def
R10252:10252 compcert.backend.Linearizeproof <> k var
R10250:10250 compcert.backend.Linearizeproof <> b var
R10174:10176 Coq.Init.Logic <> :type_scope:x_'='_x not
R10157:10157 compcert.lib.Maps <> ::x_'!!'_x not
R10169:10171 compcert.lib.Maps <> ::x_'!!'_x not
R10172:10173 compcert.backend.Linearizeproof <> pc var
R10158:10166 compcert.backend.Linearize <> reachable def
R10168:10168 compcert.backend.Linearizeproof <> f var
R10177:10180 Coq.Init.Datatypes <> true constr
R10142:10144 Coq.Init.Logic <> :type_scope:x_'='_x not
R10139:10139 compcert.lib.Maps <> ::x_'!'_x not
R10140:10141 compcert.backend.Linearizeproof <> pc var
R10127:10137 compcert.backend.LTL <> fn_code proj
R10124:10124 compcert.backend.Linearizeproof <> f var
R10145:10148 Coq.Init.Datatypes <> Some constr
R10150:10150 compcert.backend.Linearizeproof <> b var
R10110:10112 Coq.Init.Logic <> :type_scope:x_'='_x not
R10093:10107 compcert.backend.Linearize <> transf_function def
R10109:10109 compcert.backend.Linearizeproof <> f var
R10113:10114 compcert.common.Errors <> OK constr
R10116:10117 compcert.backend.Linearizeproof <> tf var
R10303:10323 compcert.backend.Linearizeproof <> find_label_add_branch thm
R10303:10323 compcert.backend.Linearizeproof <> find_label_add_branch thm
R10332:10349 compcert.backend.Linearizeproof <> find_label_lin_rec thm
R10332:10349 compcert.backend.Linearizeproof <> find_label_lin_rec thm
R10361:10378 compcert.backend.Linearizeproof <> enumerate_complete thm
R10361:10378 compcert.backend.Linearizeproof <> enumerate_complete thm
prf 10406:10423 <> find_label_lin_inv
R10585:10591 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10594:10595 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10597:10599 Coq.Init.Logic <> :type_scope:x_'='_x not
R10596:10596 compcert.backend.Linearizeproof <> k var
R10600:10614 compcert.backend.Linearize <> linearize_block def
R10618:10619 compcert.backend.Linearizeproof <> k' var
R10616:10616 compcert.backend.Linearizeproof <> b var
R10570:10572 Coq.Init.Logic <> :type_scope:x_'='_x not
R10544:10553 compcert.backend.Linear <> find_label def
R10559:10565 compcert.backend.Linear <> fn_code proj
R10567:10568 compcert.backend.Linearizeproof <> tf var
R10555:10556 compcert.backend.Linearizeproof <> pc var
R10573:10576 Coq.Init.Datatypes <> Some constr
R10578:10578 compcert.backend.Linearizeproof <> k var
R10531:10533 Coq.Init.Logic <> :type_scope:x_'='_x not
R10514:10514 compcert.lib.Maps <> ::x_'!!'_x not
R10526:10528 compcert.lib.Maps <> ::x_'!!'_x not
R10529:10530 compcert.backend.Linearizeproof <> pc var
R10515:10523 compcert.backend.Linearize <> reachable def
R10525:10525 compcert.backend.Linearizeproof <> f var
R10534:10537 Coq.Init.Datatypes <> true constr
R10499:10501 Coq.Init.Logic <> :type_scope:x_'='_x not
R10496:10496 compcert.lib.Maps <> ::x_'!'_x not
R10497:10498 compcert.backend.Linearizeproof <> pc var
R10484:10494 compcert.backend.LTL <> fn_code proj
R10481:10481 compcert.backend.Linearizeproof <> f var
R10502:10505 Coq.Init.Datatypes <> Some constr
R10507:10507 compcert.backend.Linearizeproof <> b var
R10467:10469 Coq.Init.Logic <> :type_scope:x_'='_x not
R10450:10464 compcert.backend.Linearize <> transf_function def
R10466:10466 compcert.backend.Linearizeproof <> f var
R10470:10471 compcert.common.Errors <> OK constr
R10473:10474 compcert.backend.Linearizeproof <> tf var
R10647:10660 compcert.backend.Linearizeproof <> find_label_lin thm
prf 10776:10794 <> label_in_add_branch
R10853:10854 Coq.Lists.List <> In def
R10869:10869 compcert.backend.Linearizeproof <> k var
R10857:10862 compcert.backend.Linear <> Llabel constr
R10864:10866 compcert.backend.Linearizeproof <> lbl var
R10817:10818 Coq.Lists.List <> In def
R10834:10843 compcert.backend.Linearize <> add_branch def
R10847:10847 compcert.backend.Linearizeproof <> k var
R10845:10845 compcert.backend.Linearizeproof <> s var
R10821:10826 compcert.backend.Linear <> Llabel constr
R10828:10830 compcert.backend.Linearizeproof <> lbl var
R10904:10913 compcert.backend.Linearize <> add_branch def
R10928:10938 compcert.backend.Linearize <> starts_with def
R10928:10938 compcert.backend.Linearize <> starts_with def
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
prf 10987:11004 <> label_in_lin_block
R11068:11069 Coq.Lists.List <> In def
R11084:11084 compcert.backend.Linearizeproof <> k var
R11072:11077 compcert.backend.Linear <> Llabel constr
R11079:11081 compcert.backend.Linearizeproof <> lbl var
R11027:11028 Coq.Lists.List <> In def
R11044:11058 compcert.backend.Linearize <> linearize_block def
R11062:11062 compcert.backend.Linearizeproof <> k var
R11060:11060 compcert.backend.Linearizeproof <> b var
R11031:11036 compcert.backend.Linear <> Llabel constr
R11038:11040 compcert.backend.Linearizeproof <> lbl var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
R11192:11210 compcert.backend.Linearizeproof <> label_in_add_branch thm
R11192:11210 compcert.backend.Linearizeproof <> label_in_add_branch thm
R0:-1 compcert.backend.Linearizeproof <> y var
R11254:11264 compcert.backend.Linearize <> starts_with def
R11254:11264 compcert.backend.Linearize <> starts_with def
R11293:11311 compcert.backend.Linearizeproof <> label_in_add_branch thm
R11293:11311 compcert.backend.Linearizeproof <> label_in_add_branch thm
R0:-1 compcert.backend.Linearizeproof <> y var
R11352:11370 compcert.backend.Linearizeproof <> label_in_add_branch thm
R11352:11370 compcert.backend.Linearizeproof <> label_in_add_branch thm
R0:-1 compcert.backend.Linearizeproof <> y var
prf 11415:11430 <> label_in_lin_rec
R11499:11500 Coq.Lists.List <> In def
R11506:11509 compcert.backend.Linearizeproof <> enum var
R11502:11504 compcert.backend.Linearizeproof <> lbl var
R11456:11457 Coq.Lists.List <> In def
R11473:11486 compcert.backend.Linearize <> linearize_body def
R11490:11493 compcert.backend.Linearizeproof <> enum var
R11488:11488 compcert.backend.Linearizeproof <> f var
R11460:11465 compcert.backend.Linear <> Llabel constr
R11467:11469 compcert.backend.Linearizeproof <> lbl var
R11562:11580 compcert.backend.Linearizeproof <> linearize_body_cons thm
R11562:11580 compcert.backend.Linearizeproof <> linearize_body_cons thm
R11592:11592 compcert.lib.Maps <> ::x_'!'_x not
R11606:11607 compcert.lib.Maps <> ::x_'!'_x not
R11593:11603 compcert.backend.LTL <> fn_code proj
R11592:11592 compcert.lib.Maps <> ::x_'!'_x not
R11606:11607 compcert.lib.Maps <> ::x_'!'_x not
R11593:11603 compcert.backend.LTL <> fn_code proj
R11684:11701 compcert.backend.Linearizeproof <> label_in_lin_block thm
R11684:11701 compcert.backend.Linearizeproof <> label_in_lin_block thm
prf 11745:11768 <> unique_labels_add_branch
R11808:11820 compcert.backend.Linearizeproof <> unique_labels def
R11823:11832 compcert.backend.Linearize <> add_branch def
R11838:11838 compcert.backend.Linearizeproof <> k var
R11834:11836 compcert.backend.Linearizeproof <> lbl var
R11789:11801 compcert.backend.Linearizeproof <> unique_labels def
R11803:11803 compcert.backend.Linearizeproof <> k var
R11866:11875 compcert.backend.Linearize <> add_branch def
R11891:11901 compcert.backend.Linearize <> starts_with def
R11891:11901 compcert.backend.Linearize <> starts_with def
R0:-1 compcert.backend.Linearizeproof <> y var
R0:-1 compcert.backend.Linearizeproof <> y var
prf 11941:11963 <> unique_labels_lin_block
R12001:12013 compcert.backend.Linearizeproof <> unique_labels def
R12016:12030 compcert.backend.Linearize <> linearize_block def
R12034:12034 compcert.backend.Linearizeproof <> k var
R12032:12032 compcert.backend.Linearizeproof <> b var
R11982:11994 compcert.backend.Linearizeproof <> unique_labels def
R11996:11996 compcert.backend.Linearizeproof <> k var
R12112:12135 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
R12112:12135 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
R12112:12135 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
R12153:12163 compcert.backend.Linearize <> starts_with def
R12185:12208 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
R12153:12163 compcert.backend.Linearize <> starts_with def
R12185:12208 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
R12185:12208 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
prf 12229:12249 <> unique_labels_lin_rec
R12294:12306 compcert.backend.Linearizeproof <> unique_labels def
R12309:12322 compcert.backend.Linearize <> linearize_body def
R12326:12329 compcert.backend.Linearizeproof <> enum var
R12324:12324 compcert.backend.Linearizeproof <> f var
R12271:12282 compcert.lib.Coqlib <> list_norepet ind
R12284:12287 compcert.backend.Linearizeproof <> enum var
R12383:12401 compcert.backend.Linearizeproof <> linearize_body_cons thm
R12383:12401 compcert.backend.Linearizeproof <> linearize_body_cons thm
R12422:12422 compcert.lib.Maps <> ::x_'!'_x not
R12436:12437 compcert.lib.Maps <> ::x_'!'_x not
R12423:12433 compcert.backend.LTL <> fn_code proj
R12422:12422 compcert.lib.Maps <> ::x_'!'_x not
R12436:12437 compcert.lib.Maps <> ::x_'!'_x not
R12423:12433 compcert.backend.LTL <> fn_code proj
R12500:12515 compcert.backend.Linearizeproof <> label_in_lin_rec thm
R12500:12515 compcert.backend.Linearizeproof <> label_in_lin_rec thm
R12534:12551 compcert.backend.Linearizeproof <> label_in_lin_block thm
R12534:12551 compcert.backend.Linearizeproof <> label_in_lin_block thm
R12575:12597 compcert.backend.Linearizeproof <> unique_labels_lin_block thm
R12575:12597 compcert.backend.Linearizeproof <> unique_labels_lin_block thm
prf 12680:12708 <> unique_labels_transf_function
R12759:12771 compcert.backend.Linearizeproof <> unique_labels def
R12774:12780 compcert.backend.Linear <> fn_code proj
R12782:12783 compcert.backend.Linearizeproof <> tf var
R12745:12747 Coq.Init.Logic <> :type_scope:x_'='_x not
R12728:12742 compcert.backend.Linearize <> transf_function def
R12744:12744 compcert.backend.Linearizeproof <> f var
R12748:12749 compcert.common.Errors <> OK constr
R12751:12752 compcert.backend.Linearizeproof <> tf var
R12831:12854 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
R12831:12854 compcert.backend.Linearizeproof <> unique_labels_add_branch thm
R12866:12886 compcert.backend.Linearizeproof <> unique_labels_lin_rec thm
R12866:12886 compcert.backend.Linearizeproof <> unique_labels_lin_rec thm
R12896:12912 compcert.backend.Linearizeproof <> enumerate_norepet thm
R12896:12912 compcert.backend.Linearizeproof <> enumerate_norepet thm
prf 12971:12988 <> is_tail_find_label
R13044:13050 compcert.lib.Coqlib <> is_tail ind
R13055:13056 compcert.backend.Linearizeproof <> c1 var
R13052:13053 compcert.backend.Linearizeproof <> c2 var
R13030:13032 Coq.Init.Logic <> :type_scope:x_'='_x not
R13013:13022 compcert.backend.Linear <> find_label def
R13028:13029 compcert.backend.Linearizeproof <> c1 var
R13024:13026 compcert.backend.Linearizeproof <> lbl var
R13033:13036 Coq.Init.Datatypes <> Some constr
R13038:13039 compcert.backend.Linearizeproof <> c2 var
R13121:13128 compcert.backend.Linear <> is_label def
R13121:13128 compcert.backend.Linear <> is_label def
prf 13244:13261 <> is_tail_add_branch
R13318:13324 compcert.lib.Coqlib <> is_tail ind
R13329:13330 compcert.backend.Linearizeproof <> c2 var
R13326:13327 compcert.backend.Linearizeproof <> c1 var
R13284:13290 compcert.lib.Coqlib <> is_tail ind
R13312:13313 compcert.backend.Linearizeproof <> c2 var
R13293:13302 compcert.backend.Linearize <> add_branch def
R13308:13309 compcert.backend.Linearizeproof <> c1 var
R13304:13306 compcert.backend.Linearizeproof <> lbl var
R13366:13375 compcert.backend.Linearize <> add_branch def
R13388:13398 compcert.backend.Linearize <> starts_with def
R13388:13398 compcert.backend.Linearize <> starts_with def
prf 13448:13464 <> is_tail_lin_block
R13524:13530 compcert.lib.Coqlib <> is_tail ind
R13535:13536 compcert.backend.Linearizeproof <> c2 var
R13532:13533 compcert.backend.Linearizeproof <> c1 var
R13487:13493 compcert.lib.Coqlib <> is_tail ind
R13518:13519 compcert.backend.Linearizeproof <> c2 var
R13496:13510 compcert.backend.Linearize <> linearize_block def
R13514:13515 compcert.backend.Linearizeproof <> c1 var
R13512:13512 compcert.backend.Linearizeproof <> b var
R13627:13644 compcert.backend.Linearizeproof <> is_tail_add_branch thm
R13627:13644 compcert.backend.Linearizeproof <> is_tail_add_branch thm
R13666:13676 compcert.backend.Linearize <> starts_with def
R13693:13710 compcert.backend.Linearizeproof <> is_tail_add_branch thm
R13666:13676 compcert.backend.Linearize <> starts_with def
R13693:13710 compcert.backend.Linearizeproof <> is_tail_add_branch thm
R13693:13710 compcert.backend.Linearizeproof <> is_tail_add_branch thm
prf 13744:13761 <> add_branch_correct
R13900:13903 compcert.common.Smallstep <> plus ind
R13971:13975 compcert.backend.Linear <> State constr
R13990:13990 compcert.backend.Linearizeproof <> m var
R13987:13988 compcert.backend.Linearizeproof <> ls var
R13985:13985 compcert.backend.Linearizeproof <> c var
R13982:13983 compcert.backend.Linearizeproof <> sp var
R13979:13980 compcert.backend.Linearizeproof <> tf var
R13977:13977 compcert.backend.Linearizeproof <> s var
R13967:13968 compcert.common.Events <> E0 def
R13915:13919 compcert.backend.Linear <> State constr
R13951:13951 compcert.backend.Linearizeproof <> m var
R13948:13949 compcert.backend.Linearizeproof <> ls var
R13930:13939 compcert.backend.Linearize <> add_branch def
R13945:13945 compcert.backend.Linearizeproof <> k var
R13941:13943 compcert.backend.Linearizeproof <> lbl var
R13926:13927 compcert.backend.Linearizeproof <> sp var
R13923:13924 compcert.backend.Linearizeproof <> tf var
R13921:13921 compcert.backend.Linearizeproof <> s var
R13910:13912 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R13905:13908 compcert.backend.Linear <> step ind
R13885:13887 Coq.Init.Logic <> :type_scope:x_'='_x not
R13858:13867 compcert.backend.Linear <> find_label def
R13877:13883 compcert.backend.Linear <> fn_code proj
R13873:13874 compcert.backend.Linearizeproof <> tf var
R13869:13871 compcert.backend.Linearizeproof <> lbl var
R13888:13891 Coq.Init.Datatypes <> Some constr
R13893:13893 compcert.backend.Linearizeproof <> c var
R13830:13836 compcert.lib.Coqlib <> is_tail ind
R13844:13850 compcert.backend.Linear <> fn_code proj
R13840:13841 compcert.backend.Linearizeproof <> tf var
R13838:13838 compcert.backend.Linearizeproof <> k var
R13816:13818 Coq.Init.Logic <> :type_scope:x_'='_x not
R13799:13813 compcert.backend.Linearize <> transf_function def
R13815:13815 compcert.backend.Linearizeproof <> f var
R13819:13820 compcert.common.Errors <> OK constr
R13822:13823 compcert.backend.Linearizeproof <> tf var
R14018:14027 compcert.backend.Linearize <> add_branch def
R14040:14050 compcert.backend.Linearize <> starts_with def
R14040:14050 compcert.backend.Linearize <> starts_with def
R14079:14097 compcert.backend.Linearizeproof <> starts_with_correct thm
R14079:14097 compcert.backend.Linearizeproof <> starts_with_correct thm
R14116:14144 compcert.backend.Linearizeproof <> unique_labels_transf_function thm
R14116:14144 compcert.backend.Linearizeproof <> unique_labels_transf_function thm
R14162:14169 compcert.common.Smallstep <> plus_one thm
R14162:14169 compcert.common.Smallstep <> plus_one thm
R14178:14187 compcert.backend.Linear <> exec_Lgoto constr
R14178:14187 compcert.backend.Linear <> exec_Lgoto constr
ind 14931:14947 <> match_stackframes
constr 15001:15022 <> match_stackframe_intro
R14968:14984 compcert.backend.Linear <> stackframe ind
R14950:14963 compcert.backend.LTL <> stackframe ind
R15206:15222 compcert.backend.Linearizeproof <> match_stackframes ind
R15269:15285 compcert.backend.Linear <> Stackframe constr
R15297:15311 compcert.backend.Linearize <> linearize_block def
R15316:15316 compcert.backend.Linearizeproof <> c var
R15313:15314 compcert.backend.Linearizeproof <> bb var
R15293:15294 compcert.backend.Linearizeproof <> ls var
R15290:15291 compcert.backend.Linearizeproof <> sp var
R15287:15288 compcert.backend.Linearizeproof <> tf var
R15233:15246 compcert.backend.LTL <> Stackframe constr
R15256:15257 compcert.backend.Linearizeproof <> bb var
R15253:15254 compcert.backend.Linearizeproof <> ls var
R15250:15251 compcert.backend.Linearizeproof <> sp var
R15248:15248 compcert.backend.Linearizeproof <> f var
R15174:15180 compcert.lib.Coqlib <> is_tail ind
R15188:15194 compcert.backend.Linear <> fn_code proj
R15184:15185 compcert.backend.Linearizeproof <> tf var
R15182:15182 compcert.backend.Linearizeproof <> c var
R15156:15158 Coq.Init.Logic <> :type_scope:x_'='_x not
R15139:15139 compcert.lib.Maps <> ::x_'!!'_x not
R15151:15153 compcert.lib.Maps <> ::x_'!!'_x not
R15154:15155 compcert.backend.Linearizeproof <> pc var
R15140:15148 compcert.backend.Linearize <> reachable def
R15150:15150 compcert.backend.Linearizeproof <> f var
R15159:15162 Coq.Init.Datatypes <> true constr
R15108:15109 Coq.Lists.List <> In def
R15115:15130 compcert.backend.LTL <> successors_block def
R15132:15133 compcert.backend.Linearizeproof <> bb var
R15111:15112 compcert.backend.Linearizeproof <> pc var
R15078:15080 Coq.Init.Logic <> :type_scope:x_'='_x not
R15061:15075 compcert.backend.Linearize <> transf_function def
R15077:15077 compcert.backend.Linearizeproof <> f var
R15081:15082 compcert.common.Errors <> OK constr
R15084:15085 compcert.backend.Linearizeproof <> tf var
ind 15332:15343 <> match_states
constr 15387:15409 <> match_states_add_branch
constr 15741:15763 <> match_states_cond_taken
constr 16180:16201 <> match_states_jumptable
constr 16641:16658 <> match_states_block
constr 17037:17053 <> match_states_call
constr 17260:17278 <> match_states_return
R15359:15370 compcert.backend.Linear <> state ind
R15346:15354 compcert.backend.LTL <> state ind
R15465:15476 compcert.lib.Coqlib <> list_forall2 ind
R15498:15499 compcert.backend.Linearizeproof <> ts var
R15496:15496 compcert.backend.Linearizeproof <> s var
R15478:15494 compcert.backend.Linearizeproof <> match_stackframes ind
R15533:15535 Coq.Init.Logic <> :type_scope:x_'='_x not
R15516:15530 compcert.backend.Linearize <> transf_function def
R15532:15532 compcert.backend.Linearizeproof <> f var
R15536:15537 compcert.common.Errors <> OK constr
R15539:15540 compcert.backend.Linearizeproof <> tf var
R15576:15578 Coq.Init.Logic <> :type_scope:x_'='_x not
R15559:15559 compcert.lib.Maps <> ::x_'!!'_x not
R15571:15573 compcert.lib.Maps <> ::x_'!!'_x not
R15574:15575 compcert.backend.Linearizeproof <> pc var
R15560:15568 compcert.backend.Linearize <> reachable def
R15570:15570 compcert.backend.Linearizeproof <> f var
R15579:15582 Coq.Init.Datatypes <> true constr
R15600:15606 compcert.lib.Coqlib <> is_tail ind
R15614:15620 compcert.backend.Linear <> fn_code proj
R15610:15611 compcert.backend.Linearizeproof <> tf var
R15608:15608 compcert.backend.Linearizeproof <> c var
R15631:15642 compcert.backend.Linearizeproof <> match_states ind
R15691:15702 compcert.backend.Linear <> State constr
R15734:15734 compcert.backend.Linearizeproof <> m var
R15731:15732 compcert.backend.Linearizeproof <> ls var
R15714:15723 compcert.backend.Linearize <> add_branch def
R15728:15728 compcert.backend.Linearizeproof <> c var
R15725:15726 compcert.backend.Linearizeproof <> pc var
R15710:15711 compcert.backend.Linearizeproof <> sp var
R15707:15708 compcert.backend.Linearizeproof <> tf var
R15704:15705 compcert.backend.Linearizeproof <> ts var
R15645:15653 compcert.backend.LTL <> State constr
R15668:15668 compcert.backend.Linearizeproof <> m var
R15665:15666 compcert.backend.Linearizeproof <> ls var
R15662:15663 compcert.backend.Linearizeproof <> pc var
R15659:15660 compcert.backend.Linearizeproof <> sp var
R15657:15657 compcert.backend.Linearizeproof <> f var
R15655:15655 compcert.backend.Linearizeproof <> s var
R15829:15840 compcert.lib.Coqlib <> list_forall2 ind
R15862:15863 compcert.backend.Linearizeproof <> ts var
R15860:15860 compcert.backend.Linearizeproof <> s var
R15842:15858 compcert.backend.Linearizeproof <> match_stackframes ind
R15897:15899 Coq.Init.Logic <> :type_scope:x_'='_x not
R15880:15894 compcert.backend.Linearize <> transf_function def
R15896:15896 compcert.backend.Linearizeproof <> f var
R15900:15901 compcert.common.Errors <> OK constr
R15903:15904 compcert.backend.Linearizeproof <> tf var
R15940:15942 Coq.Init.Logic <> :type_scope:x_'='_x not
R15923:15923 compcert.lib.Maps <> ::x_'!!'_x not
R15935:15937 compcert.lib.Maps <> ::x_'!!'_x not
R15938:15939 compcert.backend.Linearizeproof <> pc var
R15924:15932 compcert.backend.Linearize <> reachable def
R15934:15934 compcert.backend.Linearizeproof <> f var
R15943:15946 Coq.Init.Datatypes <> true constr
R16003:16005 Coq.Init.Logic <> :type_scope:x_'='_x not
R15964:15977 compcert.ia32.Op <> eval_condition def
R16002:16002 compcert.backend.Linearizeproof <> m var
R15985:15991 compcert.backend.LTL <> reglist def
R15996:15999 compcert.backend.Linearizeproof <> args var
R15993:15994 compcert.backend.Linearizeproof <> ls var
R15979:15982 compcert.backend.Linearizeproof <> cond var
R16006:16009 Coq.Init.Datatypes <> Some constr
R16011:16014 Coq.Init.Datatypes <> true constr
R16024:16035 compcert.backend.Linearizeproof <> match_states ind
R16122:16133 compcert.backend.Linear <> State constr
R16173:16173 compcert.backend.Linearizeproof <> m var
R16170:16171 compcert.backend.Linearizeproof <> ls var
R16163:16166 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R16145:16149 compcert.backend.Linear <> Lcond constr
R16161:16162 compcert.backend.Linearizeproof <> pc var
R16156:16159 compcert.backend.Linearizeproof <> args var
R16151:16154 compcert.backend.Linearizeproof <> cond var
R16167:16167 compcert.backend.Linearizeproof <> c var
R16141:16142 compcert.backend.Linearizeproof <> sp var
R16138:16139 compcert.backend.Linearizeproof <> tf var
R16135:16136 compcert.backend.Linearizeproof <> ts var
R16038:16046 compcert.backend.LTL <> State constr
R16099:16099 compcert.backend.Linearizeproof <> m var
R16059:16068 compcert.backend.LTL <> undef_regs def
R16095:16096 compcert.backend.Linearizeproof <> ls var
R16071:16087 compcert.ia32.Machregs <> destroyed_by_cond def
R16089:16092 compcert.backend.Linearizeproof <> cond var
R16055:16056 compcert.backend.Linearizeproof <> pc var
R16052:16053 compcert.backend.Linearizeproof <> sp var
R16050:16050 compcert.backend.Linearizeproof <> f var
R16048:16048 compcert.backend.Linearizeproof <> s var
R16267:16278 compcert.lib.Coqlib <> list_forall2 ind
R16300:16301 compcert.backend.Linearizeproof <> ts var
R16298:16298 compcert.backend.Linearizeproof <> s var
R16280:16296 compcert.backend.Linearizeproof <> match_stackframes ind
R16335:16337 Coq.Init.Logic <> :type_scope:x_'='_x not
R16318:16332 compcert.backend.Linearize <> transf_function def
R16334:16334 compcert.backend.Linearizeproof <> f var
R16338:16339 compcert.common.Errors <> OK constr
R16341:16342 compcert.backend.Linearizeproof <> tf var
R16378:16380 Coq.Init.Logic <> :type_scope:x_'='_x not
R16361:16361 compcert.lib.Maps <> ::x_'!!'_x not
R16373:16375 compcert.lib.Maps <> ::x_'!!'_x not
R16376:16377 compcert.backend.Linearizeproof <> pc var
R16362:16370 compcert.backend.Linearize <> reachable def
R16372:16372 compcert.backend.Linearizeproof <> f var
R16381:16384 Coq.Init.Datatypes <> true constr
R16411:16413 Coq.Init.Logic <> :type_scope:x_'='_x not
R16401:16402 compcert.backend.Linearizeproof <> ls var
R16405:16405 compcert.backend.Locations <> R constr
R16407:16409 compcert.backend.Linearizeproof <> arg var
R16414:16417 compcert.common.Values <> Vint constr
R16419:16419 compcert.backend.Linearizeproof <> n var
R16468:16470 Coq.Init.Logic <> :type_scope:x_'='_x not
R16437:16446 compcert.lib.Coqlib <> list_nth_z def
R16453:16464 compcert.lib.Integers Int unsigned def
R16466:16466 compcert.backend.Linearizeproof <> n var
R16448:16450 compcert.backend.Linearizeproof <> tbl var
R16471:16474 Coq.Init.Datatypes <> Some constr
R16476:16477 compcert.backend.Linearizeproof <> pc var
R16487:16498 compcert.backend.Linearizeproof <> match_states ind
R16583:16594 compcert.backend.Linear <> State constr
R16634:16634 compcert.backend.Linearizeproof <> m var
R16631:16632 compcert.backend.Linearizeproof <> ls var
R16624:16627 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R16606:16615 compcert.backend.Linear <> Ljumptable constr
R16621:16623 compcert.backend.Linearizeproof <> tbl var
R16617:16619 compcert.backend.Linearizeproof <> arg var
R16628:16628 compcert.backend.Linearizeproof <> c var
R16602:16603 compcert.backend.Linearizeproof <> sp var
R16599:16600 compcert.backend.Linearizeproof <> tf var
R16596:16597 compcert.backend.Linearizeproof <> ts var
R16501:16509 compcert.backend.LTL <> State constr
R16560:16560 compcert.backend.Linearizeproof <> m var
R16522:16531 compcert.backend.LTL <> undef_regs def
R16556:16557 compcert.backend.Linearizeproof <> ls var
R16533:16554 compcert.ia32.Machregs <> destroyed_by_jumptable def
R16518:16519 compcert.backend.Linearizeproof <> pc var
R16515:16516 compcert.backend.Linearizeproof <> sp var
R16513:16513 compcert.backend.Linearizeproof <> f var
R16511:16511 compcert.backend.Linearizeproof <> s var
R16714:16725 compcert.lib.Coqlib <> list_forall2 ind
R16747:16748 compcert.backend.Linearizeproof <> ts var
R16745:16745 compcert.backend.Linearizeproof <> s var
R16727:16743 compcert.backend.Linearizeproof <> match_stackframes ind
R16782:16784 Coq.Init.Logic <> :type_scope:x_'='_x not
R16765:16779 compcert.backend.Linearize <> transf_function def
R16781:16781 compcert.backend.Linearizeproof <> f var
R16785:16786 compcert.common.Errors <> OK constr
R16788:16789 compcert.backend.Linearizeproof <> tf var
R16867:16869 Coq.Init.Logic <> :type_scope:x_'='_x not
R16850:16850 compcert.lib.Maps <> ::x_'!!'_x not
R16862:16864 compcert.lib.Maps <> ::x_'!!'_x not
R16865:16866 compcert.backend.Linearizeproof <> pc var
R16851:16859 compcert.backend.Linearize <> reachable def
R16861:16861 compcert.backend.Linearizeproof <> f var
R16870:16873 Coq.Init.Datatypes <> true constr
R16819:16820 Coq.Lists.List <> In def
R16826:16841 compcert.backend.LTL <> successors_block def
R16843:16844 compcert.backend.Linearizeproof <> bb var
R16822:16823 compcert.backend.Linearizeproof <> pc var
R16891:16897 compcert.lib.Coqlib <> is_tail ind
R16905:16911 compcert.backend.Linear <> fn_code proj
R16901:16902 compcert.backend.Linearizeproof <> tf var
R16899:16899 compcert.backend.Linearizeproof <> c var
R16922:16933 compcert.backend.Linearizeproof <> match_states ind
R16982:16993 compcert.backend.Linear <> State constr
R17030:17030 compcert.backend.Linearizeproof <> m var
R17027:17028 compcert.backend.Linearizeproof <> ls var
R17005:17019 compcert.backend.Linearize <> linearize_block def
R17024:17024 compcert.backend.Linearizeproof <> c var
R17021:17022 compcert.backend.Linearizeproof <> bb var
R17001:17002 compcert.backend.Linearizeproof <> sp var
R16998:16999 compcert.backend.Linearizeproof <> tf var
R16995:16996 compcert.backend.Linearizeproof <> ts var
R16936:16944 compcert.backend.LTL <> Block constr
R16959:16959 compcert.backend.Linearizeproof <> m var
R16956:16957 compcert.backend.Linearizeproof <> ls var
R16953:16954 compcert.backend.Linearizeproof <> bb var
R16950:16951 compcert.backend.Linearizeproof <> sp var
R16948:16948 compcert.backend.Linearizeproof <> f var
R16946:16946 compcert.backend.Linearizeproof <> s var
R17169:17180 compcert.backend.Linearizeproof <> match_states ind
R17227:17242 compcert.backend.Linear <> Callstate constr
R17253:17253 compcert.backend.Linearizeproof <> m var
R17250:17251 compcert.backend.Linearizeproof <> ls var
R17247:17248 compcert.backend.Linearizeproof <> tf var
R17244:17245 compcert.backend.Linearizeproof <> ts var
R17183:17195 compcert.backend.LTL <> Callstate constr
R17204:17204 compcert.backend.Linearizeproof <> m var
R17201:17202 compcert.backend.Linearizeproof <> ls var
R17199:17199 compcert.backend.Linearizeproof <> f var
R17197:17197 compcert.backend.Linearizeproof <> s var
R17151:17153 Coq.Init.Logic <> :type_scope:x_'='_x not
R17136:17148 compcert.backend.Linearize <> transf_fundef def
R17150:17150 compcert.backend.Linearizeproof <> f var
R17154:17155 compcert.common.Errors <> OK constr
R17157:17158 compcert.backend.Linearizeproof <> tf var
R17091:17102 compcert.lib.Coqlib <> list_forall2 ind
R17124:17125 compcert.backend.Linearizeproof <> ts var
R17122:17122 compcert.backend.Linearizeproof <> s var
R17104:17120 compcert.backend.Linearizeproof <> match_stackframes ind
R17356:17367 compcert.backend.Linearizeproof <> match_states ind
R17414:17431 compcert.backend.Linear <> Returnstate constr
R17439:17439 compcert.backend.Linearizeproof <> m var
R17436:17437 compcert.backend.Linearizeproof <> ls var
R17433:17434 compcert.backend.Linearizeproof <> ts var
R17370:17384 compcert.backend.LTL <> Returnstate constr
R17391:17391 compcert.backend.Linearizeproof <> m var
R17388:17389 compcert.backend.Linearizeproof <> ls var
R17386:17386 compcert.backend.Linearizeproof <> s var
R17311:17322 compcert.lib.Coqlib <> list_forall2 ind
R17344:17345 compcert.backend.Linearizeproof <> ts var
R17342:17342 compcert.backend.Linearizeproof <> s var
R17324:17340 compcert.backend.Linearizeproof <> match_stackframes ind
def 17455:17461 <> measure
R17467:17475 compcert.backend.LTL <> state ind
R17480:17482 Coq.Init.Datatypes <> nat ind
R17495:17495 compcert.backend.Linearizeproof <> S var
R17506:17514 compcert.backend.LTL <> State constr
R17544:17552 compcert.backend.LTL <> Block constr
prf 17608:17626 <> match_parent_locset
R17699:17701 Coq.Init.Logic <> :type_scope:x_'='_x not
R17683:17695 compcert.backend.Linear <> parent_locset def
R17697:17698 compcert.backend.Linearizeproof <> ts var
R17702:17718 compcert.backend.LTL <> parent_locset def
R17720:17720 compcert.backend.Linearizeproof <> s var
R17644:17655 compcert.lib.Coqlib <> list_forall2 ind
R17677:17678 compcert.backend.Linearizeproof <> ts var
R17675:17675 compcert.backend.Linearizeproof <> s var
R17657:17673 compcert.backend.Linearizeproof <> match_stackframes ind
prf 17786:17804 <> transf_step_correct
R17866:17877 compcert.backend.Linearizeproof <> match_states ind
R17882:17884 compcert.backend.Linearizeproof <> s1' var
R17879:17880 compcert.backend.Linearizeproof <> s1 var
R17890:17890 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R17956:17962 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R17891:17897 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R17901:17902 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R17933:17936 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17903:17906 compcert.common.Smallstep <> plus ind
R17930:17932 compcert.backend.Linearizeproof <> s2' var
R17928:17928 compcert.backend.Linearizeproof <> t var
R17924:17926 compcert.backend.Linearizeproof <> s1' var
R17920:17922 compcert.backend.Linearizeproof <> LINEARIZATION.tge var
R17908:17918 compcert.backend.Linear <> step ind
R17937:17948 compcert.backend.Linearizeproof <> match_states ind
R17953:17955 compcert.backend.Linearizeproof <> s2' var
R17950:17951 compcert.backend.Linearizeproof <> s2 var
R17987:17990 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17974:17976 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R17964:17970 compcert.backend.Linearizeproof <> measure def
R17972:17973 compcert.backend.Linearizeproof <> s2 var
R17977:17983 compcert.backend.Linearizeproof <> measure def
R17985:17986 compcert.backend.Linearizeproof <> s1 var
R17997:18000 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17992:17994 Coq.Init.Logic <> :type_scope:x_'='_x not
R17991:17991 compcert.backend.Linearizeproof <> t var
R17995:17996 compcert.common.Events <> E0 def
R18001:18012 compcert.backend.Linearizeproof <> match_states ind
R18017:18019 compcert.backend.Linearizeproof <> s1' var
R18014:18015 compcert.backend.Linearizeproof <> s2 var
R17825:17832 compcert.backend.LTL <> step ind
R17842:17843 compcert.backend.Linearizeproof <> s2 var
R17840:17840 compcert.backend.Linearizeproof <> t var
R17837:17838 compcert.backend.Linearizeproof <> s1 var
R17834:17835 compcert.backend.Linearizeproof <> LINEARIZATION.ge var
R18125:18138 compcert.backend.Linearizeproof <> find_label_lin thm
R18201:18218 compcert.backend.Linearizeproof <> add_branch_correct thm
R18201:18218 compcert.backend.Linearizeproof <> add_branch_correct thm
R18270:18289 compcert.backend.Linearizeproof <> reachable_successors thm
R18270:18289 compcert.backend.Linearizeproof <> reachable_successors thm
R18308:18324 compcert.backend.Linearizeproof <> is_tail_lin_block thm
R18308:18324 compcert.backend.Linearizeproof <> is_tail_lin_block thm
R18341:18358 compcert.backend.Linearizeproof <> is_tail_find_label thm
R18341:18358 compcert.backend.Linearizeproof <> is_tail_find_label thm
R18424:18437 compcert.backend.Linearizeproof <> find_label_lin thm
R18499:18506 compcert.common.Smallstep <> plus_one thm
R18499:18506 compcert.common.Smallstep <> plus_one thm
R18516:18530 compcert.backend.Linear <> exec_Lcond_true constr
R18516:18530 compcert.backend.Linear <> exec_Lcond_true constr
R18582:18601 compcert.backend.Linearizeproof <> reachable_successors thm
R18582:18601 compcert.backend.Linearizeproof <> reachable_successors thm
R18620:18636 compcert.backend.Linearizeproof <> is_tail_lin_block thm
R18620:18636 compcert.backend.Linearizeproof <> is_tail_lin_block thm
R18653:18670 compcert.backend.Linearizeproof <> is_tail_find_label thm
R18653:18670 compcert.backend.Linearizeproof <> is_tail_find_label thm
R18741:18754 compcert.backend.Linearizeproof <> find_label_lin thm
R18816:18823 compcert.common.Smallstep <> plus_one thm
R18816:18823 compcert.common.Smallstep <> plus_one thm
R18833:18847 compcert.backend.Linear <> exec_Ljumptable constr
R18833:18847 compcert.backend.Linear <> exec_Ljumptable constr
R18899:18918 compcert.backend.Linearizeproof <> reachable_successors thm
R18899:18918 compcert.backend.Linearizeproof <> reachable_successors thm
R18937:18953 compcert.backend.Linearizeproof <> is_tail_lin_block thm
R18937:18953 compcert.backend.Linearizeproof <> is_tail_lin_block thm
R18970:18987 compcert.backend.Linearizeproof <> is_tail_find_label thm
R18970:18987 compcert.backend.Linearizeproof <> is_tail_find_label thm
R19054:19061 compcert.common.Smallstep <> plus_one thm
R19054:19061 compcert.common.Smallstep <> plus_one thm
R19130:19153 compcert.ia32.Op <> eval_operation_preserved thm
R19130:19153 compcert.ia32.Op <> eval_operation_preserved thm
R19165:19181 compcert.backend.Linearizeproof <> symbols_preserved thm
R19165:19181 compcert.backend.Linearizeproof <> symbols_preserved thm
R19267:19274 compcert.common.Smallstep <> plus_one thm
R19267:19274 compcert.common.Smallstep <> plus_one thm
R19336:19360 compcert.ia32.Op <> eval_addressing_preserved thm
R19336:19360 compcert.ia32.Op <> eval_addressing_preserved thm
R19372:19388 compcert.backend.Linearizeproof <> symbols_preserved thm
R19372:19388 compcert.backend.Linearizeproof <> symbols_preserved thm
R19492:19499 compcert.common.Smallstep <> plus_one thm
R19492:19499 compcert.common.Smallstep <> plus_one thm
R19609:19616 compcert.common.Smallstep <> plus_one thm
R19609:19616 compcert.common.Smallstep <> plus_one thm
R19724:19731 compcert.common.Smallstep <> plus_one thm
R19724:19731 compcert.common.Smallstep <> plus_one thm
R19793:19817 compcert.ia32.Op <> eval_addressing_preserved thm
R19793:19817 compcert.ia32.Op <> eval_addressing_preserved thm
R19829:19845 compcert.backend.Linearizeproof <> symbols_preserved thm
R19829:19845 compcert.backend.Linearizeproof <> symbols_preserved thm
R19911:19934 compcert.backend.Linearizeproof <> find_function_translated thm
R20008:20015 compcert.common.Smallstep <> plus_one thm
R20008:20015 compcert.common.Smallstep <> plus_one thm
R20058:20070 compcert.backend.Linearizeproof <> sig_preserved thm
R20058:20070 compcert.backend.Linearizeproof <> sig_preserved thm
R20173:20196 compcert.backend.Linearizeproof <> find_function_translated thm
R20270:20277 compcert.common.Smallstep <> plus_one thm
R20270:20277 compcert.common.Smallstep <> plus_one thm
R20312:20330 compcert.backend.Linearizeproof <> match_parent_locset thm
R20312:20330 compcert.backend.Linearizeproof <> match_parent_locset thm
R20371:20383 compcert.backend.Linearizeproof <> sig_preserved thm
R20371:20383 compcert.backend.Linearizeproof <> sig_preserved thm
R20404:20422 compcert.backend.Linearizeproof <> stacksize_preserved thm
R20404:20422 compcert.backend.Linearizeproof <> stacksize_preserved thm
R20453:20471 compcert.backend.Linearizeproof <> match_parent_locset thm
R20453:20471 compcert.backend.Linearizeproof <> match_parent_locset thm
R20571:20578 compcert.common.Smallstep <> plus_one thm
R20571:20578 compcert.common.Smallstep <> plus_one thm
R20588:20600 compcert.backend.Linear <> exec_Lbuiltin constr
R20588:20600 compcert.backend.Linear <> exec_Lbuiltin constr
R20619:20650 compcert.common.Events <> external_call_symbols_preserved' thm
R20619:20650 compcert.common.Events <> external_call_symbols_preserved' thm
R20668:20684 compcert.backend.Linearizeproof <> symbols_preserved thm
R20668:20684 compcert.backend.Linearizeproof <> symbols_preserved thm
R20693:20709 compcert.backend.Linearizeproof <> varinfo_preserved thm
R20693:20709 compcert.backend.Linearizeproof <> varinfo_preserved thm
R20795:20802 compcert.common.Smallstep <> plus_one thm
R20795:20802 compcert.common.Smallstep <> plus_one thm
R20812:20822 compcert.backend.Linear <> exec_Lannot constr
R20812:20822 compcert.backend.Linear <> exec_Lannot constr
R20841:20872 compcert.common.Events <> external_call_symbols_preserved' thm
R20841:20872 compcert.common.Events <> external_call_symbols_preserved' thm
R20890:20906 compcert.backend.Linearizeproof <> symbols_preserved thm
R20890:20906 compcert.backend.Linearizeproof <> symbols_preserved thm
R20915:20931 compcert.backend.Linearizeproof <> varinfo_preserved thm
R20915:20931 compcert.backend.Linearizeproof <> varinfo_preserved thm
R21001:21003 Coq.Init.Logic <> :type_scope:x_'='_x not
R20984:20984 compcert.lib.Maps <> ::x_'!!'_x not
R20996:20998 compcert.lib.Maps <> ::x_'!!'_x not
R20985:20993 compcert.backend.Linearize <> reachable def
R21004:21007 Coq.Init.Datatypes <> true constr
R21001:21003 Coq.Init.Logic <> :type_scope:x_'='_x not
R20984:20984 compcert.lib.Maps <> ::x_'!!'_x not
R20996:20998 compcert.lib.Maps <> ::x_'!!'_x not
R20985:20993 compcert.backend.Linearize <> reachable def
R21004:21007 Coq.Init.Datatypes <> true constr
R21159:21161 Coq.Init.Logic <> :type_scope:x_'='_x not
R21141:21141 compcert.lib.Maps <> ::x_'!!'_x not
R21153:21155 compcert.lib.Maps <> ::x_'!!'_x not
R21142:21150 compcert.backend.Linearize <> reachable def
R21162:21165 Coq.Init.Datatypes <> true constr
R21159:21161 Coq.Init.Logic <> :type_scope:x_'='_x not
R21141:21141 compcert.lib.Maps <> ::x_'!!'_x not
R21153:21155 compcert.lib.Maps <> ::x_'!!'_x not
R21142:21150 compcert.backend.Linearize <> reachable def
R21162:21165 Coq.Init.Datatypes <> true constr
R21235:21237 Coq.Init.Logic <> :type_scope:x_'='_x not
R21217:21217 compcert.lib.Maps <> ::x_'!!'_x not
R21229:21231 compcert.lib.Maps <> ::x_'!!'_x not
R21218:21226 compcert.backend.Linearize <> reachable def
R21238:21241 Coq.Init.Datatypes <> true constr
R21235:21237 Coq.Init.Logic <> :type_scope:x_'='_x not
R21217:21217 compcert.lib.Maps <> ::x_'!!'_x not
R21229:21231 compcert.lib.Maps <> ::x_'!!'_x not
R21218:21226 compcert.backend.Linearize <> reachable def
R21238:21241 Coq.Init.Datatypes <> true constr
R21283:21297 compcert.backend.Linearize <> linearize_block def
R21283:21297 compcert.backend.Linearize <> linearize_block def
R21312:21322 compcert.backend.Linearize <> starts_with def
R21312:21322 compcert.backend.Linearize <> starts_with def
R21419:21421 Coq.Init.Logic <> :type_scope:x_'='_x not
R21378:21394 compcert.ia32.Machregs <> destroyed_by_cond def
R21397:21412 compcert.ia32.Op <> negate_condition def
R21422:21438 compcert.ia32.Machregs <> destroyed_by_cond def
R21419:21421 Coq.Init.Logic <> :type_scope:x_'='_x not
R21378:21394 compcert.ia32.Machregs <> destroyed_by_cond def
R21397:21412 compcert.ia32.Op <> negate_condition def
R21422:21438 compcert.ia32.Machregs <> destroyed_by_cond def
R21562:21569 compcert.common.Smallstep <> plus_one thm
R21562:21569 compcert.common.Smallstep <> plus_one thm
R21579:21594 compcert.backend.Linear <> exec_Lcond_false constr
R21579:21594 compcert.backend.Linear <> exec_Lcond_false constr
R21608:21628 compcert.ia32.Op <> eval_negate_condition thm
R21608:21628 compcert.ia32.Op <> eval_negate_condition thm
R21820:21840 compcert.ia32.Op <> eval_negate_condition thm
R21820:21840 compcert.ia32.Op <> eval_negate_condition thm
R22078:22085 compcert.common.Smallstep <> plus_one thm
R22078:22085 compcert.common.Smallstep <> plus_one thm
R22095:22110 compcert.backend.Linear <> exec_Lcond_false constr
R22095:22110 compcert.backend.Linear <> exec_Lcond_false constr
R22206:22208 Coq.Init.Logic <> :type_scope:x_'='_x not
R22189:22189 compcert.lib.Maps <> ::x_'!!'_x not
R22201:22203 compcert.lib.Maps <> ::x_'!!'_x not
R22190:22198 compcert.backend.Linearize <> reachable def
R22209:22212 Coq.Init.Datatypes <> true constr
R22206:22208 Coq.Init.Logic <> :type_scope:x_'='_x not
R22189:22189 compcert.lib.Maps <> ::x_'!!'_x not
R22201:22203 compcert.lib.Maps <> ::x_'!!'_x not
R22190:22198 compcert.backend.Linearize <> reachable def
R22209:22212 Coq.Init.Datatypes <> true constr
R22247:22259 compcert.lib.Coqlib <> list_nth_z_in thm
R22247:22259 compcert.lib.Coqlib <> list_nth_z_in thm
R22396:22403 compcert.common.Smallstep <> plus_one thm
R22396:22403 compcert.common.Smallstep <> plus_one thm
R22438:22456 compcert.backend.Linearizeproof <> stacksize_preserved thm
R22438:22456 compcert.backend.Linearizeproof <> stacksize_preserved thm
R22486:22504 compcert.backend.Linearizeproof <> match_parent_locset thm
R22486:22504 compcert.backend.Linearizeproof <> match_parent_locset thm
R22621:22623 Coq.Init.Logic <> :type_scope:x_'='_x not
R22585:22585 compcert.lib.Maps <> ::x_'!!'_x not
R22597:22600 compcert.lib.Maps <> ::x_'!!'_x not
R22620:22620 compcert.lib.Maps <> ::x_'!!'_x not
R22601:22617 compcert.backend.LTL <> fn_entrypoint proj
R22586:22594 compcert.backend.Linearize <> reachable def
R22624:22627 Coq.Init.Datatypes <> true constr
R22621:22623 Coq.Init.Logic <> :type_scope:x_'='_x not
R22585:22585 compcert.lib.Maps <> ::x_'!!'_x not
R22597:22600 compcert.lib.Maps <> ::x_'!!'_x not
R22620:22620 compcert.lib.Maps <> ::x_'!!'_x not
R22601:22617 compcert.backend.LTL <> fn_entrypoint proj
R22586:22594 compcert.backend.Linearize <> reachable def
R22624:22627 Coq.Init.Datatypes <> true constr
R22641:22660 compcert.backend.Linearizeproof <> reachable_entrypoint thm
R22641:22660 compcert.backend.Linearizeproof <> reachable_entrypoint thm
R22715:22722 compcert.common.Smallstep <> plus_one thm
R22715:22722 compcert.common.Smallstep <> plus_one thm
R22732:22753 compcert.backend.Linear <> exec_function_internal constr
R22732:22753 compcert.backend.Linear <> exec_function_internal constr
R22775:22793 compcert.backend.Linearizeproof <> stacksize_preserved thm
R22775:22793 compcert.backend.Linearizeproof <> stacksize_preserved thm
R22898:22915 compcert.backend.Linearizeproof <> is_tail_add_branch thm
R22898:22915 compcert.backend.Linearizeproof <> is_tail_add_branch thm
R23008:23015 compcert.common.Smallstep <> plus_one thm
R23008:23015 compcert.common.Smallstep <> plus_one thm
R23025:23046 compcert.backend.Linear <> exec_function_external constr
R23025:23046 compcert.backend.Linear <> exec_function_external constr
R23065:23096 compcert.common.Events <> external_call_symbols_preserved' thm
R23065:23096 compcert.common.Events <> external_call_symbols_preserved' thm
R23114:23130 compcert.backend.Linearizeproof <> symbols_preserved thm
R23114:23130 compcert.backend.Linearizeproof <> symbols_preserved thm
R23139:23155 compcert.backend.Linearizeproof <> varinfo_preserved thm
R23139:23155 compcert.backend.Linearizeproof <> varinfo_preserved thm
R23252:23259 compcert.common.Smallstep <> plus_one thm
R23252:23259 compcert.common.Smallstep <> plus_one thm
prf 23313:23333 <> transf_initial_states
R23382:23388 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R23392:23393 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R23424:23427 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R23394:23413 compcert.backend.Linear <> initial_state ind
R23421:23423 compcert.backend.Linearizeproof <> st2 var
R23415:23419 compcert.backend.Linearizeproof <> LINEARIZATION.tprog var
R23428:23439 compcert.backend.Linearizeproof <> match_states ind
R23445:23447 compcert.backend.Linearizeproof <> st2 var
R23441:23443 compcert.backend.Linearizeproof <> st1 var
R23350:23366 compcert.backend.LTL <> initial_state ind
R23373:23375 compcert.backend.Linearizeproof <> st1 var
R23368:23371 compcert.backend.Linearizeproof <> LINEARIZATION.prog var
R23490:23512 compcert.backend.Linearizeproof <> function_ptr_translated thm
R23553:23561 compcert.backend.Linear <> Callstate constr
R23571:23581 compcert.backend.Locations Locmap init def
R23583:23588 compcert.common.Values <> Vundef constr
R23563:23565 Coq.Init.Datatypes <> nil constr
R23553:23561 compcert.backend.Linear <> Callstate constr
R23571:23581 compcert.backend.Locations Locmap init def
R23583:23588 compcert.common.Values <> Vundef constr
R23563:23565 Coq.Init.Datatypes <> nil constr
R23633:23660 compcert.common.Globalenvs Genv init_mem_transf_partial thm
R23633:23660 compcert.common.Globalenvs Genv init_mem_transf_partial thm
R23682:23690 compcert.common.AST <> prog_main proj
R23692:23696 compcert.backend.Linearizeproof <> LINEARIZATION.tprog var
R23705:23713 compcert.common.AST <> prog_main proj
R23715:23718 compcert.backend.Linearizeproof <> LINEARIZATION.prog var
R23705:23713 compcert.common.AST <> prog_main proj
R23715:23718 compcert.backend.Linearizeproof <> LINEARIZATION.prog var
R23682:23690 compcert.common.AST <> prog_main proj
R23692:23696 compcert.backend.Linearizeproof <> LINEARIZATION.tprog var
R23732:23748 compcert.backend.Linearizeproof <> symbols_preserved thm
R23732:23748 compcert.backend.Linearizeproof <> symbols_preserved thm
R23777:23806 compcert.common.AST <> transform_partial_program_main thm
R23824:23829 compcert.backend.Linearizeproof <> LINEARIZATION.TRANSF var
R23808:23820 compcert.backend.Linearize <> transf_fundef def
R23777:23806 compcert.common.AST <> transform_partial_program_main thm
R23824:23829 compcert.backend.Linearizeproof <> LINEARIZATION.TRANSF var
R23808:23820 compcert.backend.Linearize <> transf_fundef def
R23857:23869 compcert.backend.Linearizeproof <> sig_preserved thm
R23857:23869 compcert.backend.Linearizeproof <> sig_preserved thm
prf 23924:23942 <> transf_final_states
R24017:24034 compcert.backend.Linear <> final_state ind
R24040:24040 compcert.backend.Linearizeproof <> r var
R24036:24038 compcert.backend.Linearizeproof <> st2 var
R23992:24006 compcert.backend.LTL <> final_state ind
R24012:24012 compcert.backend.Linearizeproof <> r var
R24008:24010 compcert.backend.Linearizeproof <> st1 var
R23968:23979 compcert.backend.Linearizeproof <> match_states ind
R23985:23987 compcert.backend.Linearizeproof <> st2 var
R23981:23983 compcert.backend.Linearizeproof <> st1 var
prf 24118:24139 <> transf_program_correct
R24144:24161 compcert.common.Smallstep <> forward_simulation rec
R24185:24200 compcert.backend.Linear <> semantics def
R24202:24206 compcert.backend.Linearizeproof <> LINEARIZATION.tprog var
R24164:24176 compcert.backend.LTL <> semantics def
R24178:24181 compcert.backend.Linearizeproof <> LINEARIZATION.prog var
R24226:24248 compcert.common.Smallstep <> forward_simulation_star thm
R24226:24248 compcert.common.Smallstep <> forward_simulation_star thm
R24260:24276 compcert.backend.Linearizeproof <> symbols_preserved thm
R24260:24276 compcert.backend.Linearizeproof <> symbols_preserved thm
R24288:24308 compcert.backend.Linearizeproof <> transf_initial_states thm
R24288:24308 compcert.backend.Linearizeproof <> transf_initial_states thm
R24320:24338 compcert.backend.Linearizeproof <> transf_final_states thm
R24320:24338 compcert.backend.Linearizeproof <> transf_final_states thm
R24350:24368 compcert.backend.Linearizeproof <> transf_step_correct thm
R24350:24368 compcert.backend.Linearizeproof <> transf_step_correct thm
R24381:24393 compcert.backend.Linearizeproof LINEARIZATION <> sec
