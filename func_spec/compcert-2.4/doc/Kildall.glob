DIGEST NO
Fcompcert.backend.Kildall
R872:877 compcert.lib.Coqlib <> <> lib
R895:903 compcert.lib.Iteration <> <> lib
R921:924 compcert.lib.Maps <> <> lib
R942:948 compcert.lib.Lattice <> <> lib
modtype 3211:3225 <> DATAFLOW_SOLVER
R3249:3259 compcert.lib.Lattice SEMILATTICE <> mod
mod 3246:3246 <> DATAFLOW_SOLVER.L
var 3659:3666 DATAFLOW_SOLVER fixpoint
R3697:3703 compcert.lib.Maps PTree t def
R3705:3705 compcert.backend.Kildall <> A var
R3726:3729 Coq.Init.Datatypes <> list ind
R3731:3738 Coq.Numbers.BinNums <> positive ind
R3721:3721 compcert.backend.Kildall <> A var
R3780:3782 compcert.backend.Kildall DATAFLOW_SOLVER.L t defax
R3773:3775 compcert.backend.Kildall DATAFLOW_SOLVER.L t defax
R3761:3768 Coq.Numbers.BinNums <> positive ind
R3801:3808 Coq.Numbers.BinNums <> positive ind
R3816:3818 compcert.backend.Kildall DATAFLOW_SOLVER.L t defax
R3826:3831 Coq.Init.Datatypes <> option ind
R3834:3839 compcert.lib.Maps PMap t def
R3841:3843 compcert.backend.Kildall DATAFLOW_SOLVER.L t defax
var 3985:4001 DATAFLOW_SOLVER fixpoint_solution
R4024:4030 compcert.lib.Maps PTree t def
R4032:4032 compcert.backend.Kildall <> A var
R4235:4238 compcert.backend.Kildall DATAFLOW_SOLVER.L ge defax
R4248:4253 compcert.backend.Kildall <> transf var
R4260:4261 compcert.lib.Maps <> ::x_'!!'_x not
R4262:4262 compcert.backend.Kildall <> n var
R4257:4259 compcert.backend.Kildall <> res var
R4255:4255 compcert.backend.Kildall <> n var
R4243:4244 compcert.lib.Maps <> ::x_'!!'_x not
R4245:4245 compcert.backend.Kildall <> s var
R4240:4242 compcert.backend.Kildall <> res var
R4199:4202 compcert.backend.Kildall DATAFLOW_SOLVER.L eq defax
R4221:4225 compcert.backend.Kildall DATAFLOW_SOLVER.L bot defax
R4205:4210 compcert.backend.Kildall <> transf var
R4214:4218 compcert.backend.Kildall DATAFLOW_SOLVER.L bot defax
R4212:4212 compcert.backend.Kildall <> n var
R4157:4158 Coq.Lists.List <> In def
R4163:4172 compcert.backend.Kildall <> successors var
R4174:4178 compcert.backend.Kildall <> instr var
R4160:4160 compcert.backend.Kildall <> s var
R4140:4142 Coq.Init.Logic <> :type_scope:x_'='_x not
R4138:4138 compcert.lib.Maps <> ::x_'!'_x not
R4139:4139 compcert.backend.Kildall <> n var
R4134:4137 compcert.backend.Kildall <> code var
R4143:4146 Coq.Init.Datatypes <> Some constr
R4148:4152 compcert.backend.Kildall <> instr var
R4115:4117 Coq.Init.Logic <> :type_scope:x_'='_x not
R4078:4085 compcert.backend.Kildall DATAFLOW_SOLVER fixpoint defax
R4113:4114 compcert.backend.Kildall <> ev var
R4110:4111 compcert.backend.Kildall <> ep var
R4103:4108 compcert.backend.Kildall <> transf var
R4092:4101 compcert.backend.Kildall <> successors var
R4087:4090 compcert.backend.Kildall <> code var
R4118:4121 Coq.Init.Datatypes <> Some constr
R4123:4125 compcert.backend.Kildall <> res var
var 4423:4436 DATAFLOW_SOLVER fixpoint_entry
R4459:4465 compcert.lib.Maps PTree t def
R4467:4467 compcert.backend.Kildall <> A var
R4559:4562 compcert.backend.Kildall DATAFLOW_SOLVER.L ge defax
R4572:4573 compcert.backend.Kildall <> ev var
R4567:4568 compcert.lib.Maps <> ::x_'!!'_x not
R4569:4570 compcert.backend.Kildall <> ep var
R4564:4566 compcert.backend.Kildall <> res var
R4540:4542 Coq.Init.Logic <> :type_scope:x_'='_x not
R4503:4510 compcert.backend.Kildall DATAFLOW_SOLVER fixpoint defax
R4538:4539 compcert.backend.Kildall <> ev var
R4535:4536 compcert.backend.Kildall <> ep var
R4528:4533 compcert.backend.Kildall <> transf var
R4517:4526 compcert.backend.Kildall <> successors var
R4512:4515 compcert.backend.Kildall <> code var
R4543:4546 Coq.Init.Datatypes <> Some constr
R4548:4550 compcert.backend.Kildall <> res var
var 4747:4764 DATAFLOW_SOLVER fixpoint_invariant
R4787:4793 compcert.lib.Maps PTree t def
R4795:4795 compcert.backend.Kildall <> A var
R4837:4839 compcert.backend.Kildall DATAFLOW_SOLVER.L t defax
R5081:5081 compcert.backend.Kildall <> P var
R5086:5087 compcert.lib.Maps <> ::x_'!!'_x not
R5088:5089 compcert.backend.Kildall <> pc var
R5083:5085 compcert.backend.Kildall <> res var
R5062:5064 Coq.Init.Logic <> :type_scope:x_'='_x not
R5025:5032 compcert.backend.Kildall DATAFLOW_SOLVER fixpoint defax
R5060:5061 compcert.backend.Kildall <> ev var
R5057:5058 compcert.backend.Kildall <> ep var
R5050:5055 compcert.backend.Kildall <> transf var
R5039:5048 compcert.backend.Kildall <> successors var
R5034:5037 compcert.backend.Kildall <> code var
R5065:5068 Coq.Init.Datatypes <> Some constr
R5070:5072 compcert.backend.Kildall <> res var
R4994:4994 compcert.backend.Kildall <> P var
R4996:4997 compcert.backend.Kildall <> ev var
R4970:4970 compcert.backend.Kildall <> P var
R4973:4978 compcert.backend.Kildall <> transf var
R4983:4983 compcert.backend.Kildall <> x var
R4980:4981 compcert.backend.Kildall <> pc var
R4963:4963 compcert.backend.Kildall <> P var
R4965:4965 compcert.backend.Kildall <> x var
R4946:4948 Coq.Init.Logic <> :type_scope:x_'='_x not
R4943:4943 compcert.lib.Maps <> ::x_'!'_x not
R4944:4945 compcert.backend.Kildall <> pc var
R4939:4942 compcert.backend.Kildall <> code var
R4949:4952 Coq.Init.Datatypes <> Some constr
R4954:4958 compcert.backend.Kildall <> instr var
R4897:4897 compcert.backend.Kildall <> P var
R4900:4904 compcert.backend.Kildall DATAFLOW_SOLVER.L lub defax
R4908:4908 compcert.backend.Kildall <> y var
R4906:4906 compcert.backend.Kildall <> x var
R4890:4890 compcert.backend.Kildall <> P var
R4892:4892 compcert.backend.Kildall <> y var
R4883:4883 compcert.backend.Kildall <> P var
R4885:4885 compcert.backend.Kildall <> x var
R4855:4855 compcert.backend.Kildall <> P var
R4857:4861 compcert.backend.Kildall DATAFLOW_SOLVER.L bot defax
R5097:5111 compcert.backend.Kildall DATAFLOW_SOLVER <> modtype
modtype 5492:5499 <> NODE_SET
var 5514:5514 NODE_SET t
var 5534:5538 NODE_SET empty
R5541:5541 compcert.backend.Kildall NODE_SET t defax
var 5555:5557 NODE_SET add
R5577:5577 compcert.backend.Kildall NODE_SET t defax
R5572:5572 compcert.backend.Kildall NODE_SET t defax
R5560:5567 Coq.Numbers.BinNums <> positive ind
var 5591:5594 NODE_SET pick
R5602:5607 Coq.Init.Datatypes <> option ind
R5618:5620 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R5610:5617 Coq.Numbers.BinNums <> positive ind
R5621:5621 compcert.backend.Kildall NODE_SET t defax
R5597:5597 compcert.backend.Kildall NODE_SET t defax
var 5636:5644 NODE_SET all_nodes
R5678:5678 compcert.backend.Kildall NODE_SET t defax
R5665:5671 compcert.lib.Maps PTree t def
R5673:5673 compcert.backend.Kildall <> A var
var 5693:5694 NODE_SET In
R5709:5709 compcert.backend.Kildall NODE_SET t defax
R5697:5704 Coq.Numbers.BinNums <> positive ind
var 5733:5742 NODE_SET empty_spec
R5759:5759 Coq.Init.Logic <> :type_scope:'~'_x not
R5760:5761 compcert.backend.Kildall NODE_SET In defax
R5765:5769 compcert.backend.Kildall NODE_SET empty defax
R5763:5763 compcert.backend.Kildall <> n var
var 5785:5792 NODE_SET add_spec
R5829:5833 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R5814:5815 compcert.backend.Kildall NODE_SET In defax
R5821:5823 compcert.backend.Kildall NODE_SET add defax
R5827:5827 compcert.backend.Kildall <> s var
R5825:5825 compcert.backend.Kildall <> n var
R5817:5818 compcert.backend.Kildall <> n' var
R5840:5843 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R5835:5837 Coq.Init.Logic <> :type_scope:x_'='_x not
R5834:5834 compcert.backend.Kildall <> n var
R5838:5839 compcert.backend.Kildall <> n' var
R5844:5845 compcert.backend.Kildall NODE_SET In defax
R5850:5850 compcert.backend.Kildall <> s var
R5847:5848 compcert.backend.Kildall <> n' var
var 5866:5874 NODE_SET pick_none
R5910:5910 Coq.Init.Logic <> :type_scope:'~'_x not
R5911:5912 compcert.backend.Kildall NODE_SET In defax
R5916:5916 compcert.backend.Kildall <> s var
R5914:5914 compcert.backend.Kildall <> n var
R5899:5901 Coq.Init.Logic <> :type_scope:x_'='_x not
R5893:5896 compcert.backend.Kildall NODE_SET pick defax
R5898:5898 compcert.backend.Kildall <> s var
R5902:5905 Coq.Init.Datatypes <> None constr
var 5932:5940 NODE_SET pick_some
R6008:6012 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R6001:6002 compcert.backend.Kildall NODE_SET In defax
R6007:6007 compcert.backend.Kildall <> s var
R6004:6005 compcert.backend.Kildall <> n' var
R6019:6022 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6014:6016 Coq.Init.Logic <> :type_scope:x_'='_x not
R6013:6013 compcert.backend.Kildall <> n var
R6017:6018 compcert.backend.Kildall <> n' var
R6023:6024 compcert.backend.Kildall NODE_SET In defax
R6029:6030 compcert.backend.Kildall <> s' var
R6026:6027 compcert.backend.Kildall <> n' var
R5968:5970 Coq.Init.Logic <> :type_scope:x_'='_x not
R5962:5965 compcert.backend.Kildall NODE_SET pick defax
R5967:5967 compcert.backend.Kildall <> s var
R5971:5974 Coq.Init.Datatypes <> Some constr
R5975:5975 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5977:5978 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5981:5981 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5976:5976 compcert.backend.Kildall <> n var
R5979:5980 compcert.backend.Kildall <> s' var
var 6046:6059 NODE_SET all_nodes_spec
R6082:6088 compcert.lib.Maps PTree t def
R6090:6090 compcert.backend.Kildall <> A var
R6129:6130 compcert.backend.Kildall NODE_SET In defax
R6135:6143 compcert.backend.Kildall NODE_SET all_nodes defax
R6145:6148 compcert.backend.Kildall <> code var
R6132:6132 compcert.backend.Kildall <> n var
R6112:6114 Coq.Init.Logic <> :type_scope:x_'='_x not
R6110:6110 compcert.lib.Maps <> ::x_'!'_x not
R6111:6111 compcert.backend.Kildall <> n var
R6106:6109 compcert.backend.Kildall <> code var
R6115:6118 Coq.Init.Datatypes <> Some constr
R6120:6124 compcert.backend.Kildall <> instr var
R6157:6164 compcert.backend.Kildall NODE_SET <> modtype
sec 6222:6230 <> REACHABLE
R6259:6265 compcert.lib.Maps PTree t def
R6267:6267 compcert.backend.Kildall <> A var
R6288:6291 Coq.Init.Datatypes <> list ind
R6293:6300 Coq.Numbers.BinNums <> positive ind
R6283:6283 compcert.backend.Kildall <> A var
ind 6315:6323 <> reachable
constr 6362:6375 <> reachable_refl
constr 6406:6419 <> reachable_left
R6338:6345 Coq.Numbers.BinNums <> positive ind
R6326:6333 Coq.Numbers.BinNums <> positive ind
R6388:6396 compcert.backend.Kildall <> reachable ind
R6400:6400 compcert.backend.Kildall <> n var
R6398:6398 compcert.backend.Kildall <> n var
R6517:6525 compcert.backend.Kildall <> reachable ind
R6530:6531 compcert.backend.Kildall <> n3 var
R6527:6528 compcert.backend.Kildall <> n1 var
R6491:6499 compcert.backend.Kildall <> reachable ind
R6504:6505 compcert.backend.Kildall <> n3 var
R6501:6502 compcert.backend.Kildall <> n2 var
R6467:6468 Coq.Lists.List <> In def
R6474:6483 compcert.backend.Kildall <> REACHABLE.successors var
R6485:6485 compcert.backend.Kildall <> i var
R6470:6471 compcert.backend.Kildall <> n2 var
R6454:6456 Coq.Init.Logic <> :type_scope:x_'='_x not
R6451:6451 compcert.lib.Maps <> ::x_'!'_x not
R6452:6453 compcert.backend.Kildall <> n1 var
R6447:6450 compcert.backend.Kildall <> REACHABLE.code var
R6457:6460 Coq.Init.Datatypes <> Some constr
R6462:6462 compcert.backend.Kildall <> i var
def 6542:6554 <> reachable_ind
R6573:6581 compcert.backend.Kildall <> reachable ind
prf 6601:6615 <> reachable_trans
R6683:6691 compcert.backend.Kildall <> reachable ind
R6696:6697 compcert.backend.Kildall <> n3 var
R6693:6694 compcert.backend.Kildall <> n1 var
R6664:6672 compcert.backend.Kildall <> reachable ind
R6677:6678 compcert.backend.Kildall <> n3 var
R6674:6675 compcert.backend.Kildall <> n2 var
R6634:6642 compcert.backend.Kildall <> reachable ind
R6647:6648 compcert.backend.Kildall <> n2 var
R6644:6645 compcert.backend.Kildall <> n1 var
prf 6775:6789 <> reachable_right
R6880:6888 compcert.backend.Kildall <> reachable ind
R6893:6894 compcert.backend.Kildall <> n3 var
R6890:6891 compcert.backend.Kildall <> n1 var
R6854:6855 Coq.Lists.List <> In def
R6861:6870 compcert.backend.Kildall <> REACHABLE.successors var
R6872:6872 compcert.backend.Kildall <> i var
R6857:6858 compcert.backend.Kildall <> n3 var
R6841:6843 Coq.Init.Logic <> :type_scope:x_'='_x not
R6838:6838 compcert.lib.Maps <> ::x_'!'_x not
R6839:6840 compcert.backend.Kildall <> n2 var
R6834:6837 compcert.backend.Kildall <> REACHABLE.code var
R6844:6847 Coq.Init.Datatypes <> Some constr
R6849:6849 compcert.backend.Kildall <> i var
R6815:6823 compcert.backend.Kildall <> reachable ind
R6828:6829 compcert.backend.Kildall <> n2 var
R6825:6826 compcert.backend.Kildall <> n1 var
R6920:6934 compcert.backend.Kildall <> reachable_trans thm
R6920:6934 compcert.backend.Kildall <> reachable_trans thm
R6995:7003 compcert.backend.Kildall REACHABLE <> sec
R7154:7164 compcert.lib.Lattice SEMILATTICE <> mod
R7172:7179 compcert.backend.Kildall NODE_SET <> mod
R7211:7225 compcert.backend.Kildall DATAFLOW_SOLVER <> mod
R7244:7246 compcert.backend.Kildall LAT <> modtype
mod 7132:7146 <> Dataflow_Solver
R7262:7264 compcert.backend.Kildall LAT <> modtype
mod 7257:7257 <> Dataflow_Solver.L
sec 7276:7282 Dataflow_Solver Kildall
var 7314:7317 Dataflow_Solver.Kildall code
R7320:7326 compcert.lib.Maps PTree t def
R7328:7328 compcert.backend.Kildall <> Dataflow_Solver.Kildall.A var
var 7340:7349 Dataflow_Solver.Kildall successors
R7357:7360 Coq.Init.Datatypes <> list ind
R7362:7369 Coq.Numbers.BinNums <> positive ind
R7352:7352 compcert.backend.Kildall <> Dataflow_Solver.Kildall.A var
var 7381:7386 Dataflow_Solver.Kildall transf
R7408:7410 compcert.backend.Kildall Dataflow_Solver.L t defax
R7401:7403 compcert.backend.Kildall Dataflow_Solver.L t defax
R7389:7396 Coq.Numbers.BinNums <> positive ind
constr 8045:8051 Dataflow_Solver mkstate
rec 8027:8031 Dataflow_Solver state
proj 8055:8058 Dataflow_Solver aval
proj 8074:8081 Dataflow_Solver worklist
proj 8090:8096 Dataflow_Solver visited
R8061:8067 compcert.lib.Maps PTree t def
R8069:8071 compcert.backend.Kildall Dataflow_Solver.L t defax
R8084:8087 compcert.backend.Kildall NS t defax
R8099:8106 Coq.Numbers.BinNums <> positive ind
def 8131:8141 Dataflow_Solver abstr_value
R8147:8154 Coq.Numbers.BinNums <> positive ind
R8161:8165 compcert.backend.Kildall Dataflow_Solver state rec
R8170:8172 compcert.backend.Kildall Dataflow_Solver.L t defax
R8193:8193 compcert.lib.Maps <> ::x_'!'_x not
R8194:8194 compcert.backend.Kildall <> n var
R8188:8191 compcert.backend.Kildall Dataflow_Solver aval proj
R8185:8185 compcert.backend.Kildall <> s var
R8205:8208 Coq.Init.Datatypes <> None constr
R8213:8217 compcert.backend.Kildall Dataflow_Solver.L bot defax
R8223:8226 Coq.Init.Datatypes <> Some constr
def 8847:8860 Dataflow_Solver propagate_succ
R8866:8870 compcert.backend.Kildall Dataflow_Solver state rec
R8879:8881 compcert.backend.Kildall Dataflow_Solver.L t defax
R8888:8895 Coq.Numbers.BinNums <> positive ind
R8917:8917 compcert.lib.Maps <> ::x_'!'_x not
R8918:8918 compcert.backend.Kildall <> n var
R8912:8915 compcert.backend.Kildall Dataflow_Solver aval proj
R8909:8909 compcert.backend.Kildall <> s var
R8929:8932 Coq.Init.Datatypes <> None constr
R8946:9074 compcert.backend.Kildall Dataflow_Solver mkstate constr
R9058:9061 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R9054:9056 Coq.Init.Logic <> :type_scope:x_'='_x not
R9053:9053 compcert.backend.Kildall <> p var
R9057:9057 compcert.backend.Kildall <> n var
R9065:9071 compcert.backend.Kildall Dataflow_Solver visited proj
R9074:9074 compcert.backend.Kildall <> p var
R9062:9062 compcert.backend.Kildall <> s var
R9001:9006 compcert.backend.Kildall NS add defax
R9013:9020 compcert.backend.Kildall Dataflow_Solver worklist proj
R9010:9010 compcert.backend.Kildall <> s var
R9008:9008 compcert.backend.Kildall <> n var
R8954:8962 compcert.lib.Maps PTree set def
R8973:8976 compcert.backend.Kildall Dataflow_Solver aval proj
R8970:8970 compcert.backend.Kildall <> s var
R8966:8968 compcert.backend.Kildall <> out var
R8964:8964 compcert.backend.Kildall <> n var
R9083:9086 Coq.Init.Datatypes <> Some constr
R9114:9118 compcert.backend.Kildall Dataflow_Solver.L lub defax
R9125:9127 compcert.backend.Kildall <> out var
R9141:9145 compcert.backend.Kildall Dataflow_Solver.L beq defax
R9152:9155 compcert.backend.Kildall <> newl var
R9184:9323 compcert.backend.Kildall Dataflow_Solver mkstate constr
R9307:9310 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R9303:9305 Coq.Init.Logic <> :type_scope:x_'='_x not
R9302:9302 compcert.backend.Kildall <> p var
R9306:9306 compcert.backend.Kildall <> n var
R9314:9320 compcert.backend.Kildall Dataflow_Solver visited proj
R9323:9323 compcert.backend.Kildall <> p var
R9311:9311 compcert.backend.Kildall <> s var
R9245:9250 compcert.backend.Kildall NS add defax
R9257:9264 compcert.backend.Kildall Dataflow_Solver worklist proj
R9254:9254 compcert.backend.Kildall <> s var
R9252:9252 compcert.backend.Kildall <> n var
R9192:9200 compcert.lib.Maps PTree set def
R9212:9215 compcert.backend.Kildall Dataflow_Solver aval proj
R9209:9209 compcert.backend.Kildall <> s var
R9204:9207 compcert.backend.Kildall <> newl var
R9202:9202 compcert.backend.Kildall <> n var
R9168:9168 compcert.backend.Kildall <> s var
def 9458:9476 Dataflow_Solver propagate_succ_list
R9482:9486 compcert.backend.Kildall Dataflow_Solver state rec
R9495:9497 compcert.backend.Kildall Dataflow_Solver.L t defax
R9508:9511 Coq.Init.Datatypes <> list ind
R9513:9520 Coq.Numbers.BinNums <> positive ind
R9569:9573 compcert.backend.Kildall Dataflow_Solver state rec
R9586:9590 compcert.backend.Kildall <> succs var
R9601:9603 Coq.Init.Datatypes <> nil constr
R9608:9608 compcert.backend.Kildall <> s var
R9615:9618 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9626:9644 compcert.backend.Kildall <> propagate_succ_list def
R9671:9673 compcert.backend.Kildall <> out var
R9647:9660 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R9664:9666 compcert.backend.Kildall <> out var
R9662:9662 compcert.backend.Kildall <> s var
def 9784:9787 Dataflow_Solver step
R9793:9797 compcert.backend.Kildall Dataflow_Solver state rec
R9812:9814 Coq.Init.Datatypes <> :type_scope:x_'+'_x not
R9802:9807 compcert.lib.Maps PMap t def
R9809:9811 compcert.backend.Kildall Dataflow_Solver.L t defax
R9815:9819 compcert.backend.Kildall Dataflow_Solver state rec
R9832:9838 compcert.backend.Kildall NS pick defax
R9843:9850 compcert.backend.Kildall Dataflow_Solver worklist proj
R9840:9840 compcert.backend.Kildall <> s var
R9862:9865 Coq.Init.Datatypes <> None constr
R9877:9879 Coq.Init.Datatypes <> inl constr
R9883:9883 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9889:9890 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9899:9899 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9884:9888 compcert.backend.Kildall Dataflow_Solver.L bot defax
R9894:9897 compcert.backend.Kildall Dataflow_Solver aval proj
R9891:9891 compcert.backend.Kildall <> s var
R9905:9908 Coq.Init.Datatypes <> Some constr
R9909:9909 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9911:9912 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9916:9916 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9937:9937 compcert.lib.Maps <> ::x_'!'_x not
R9933:9936 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R9953:9956 Coq.Init.Datatypes <> None constr
R9971:9973 Coq.Init.Datatypes <> inr constr
R9980:10036 compcert.backend.Kildall Dataflow_Solver mkstate constr
R10029:10035 compcert.backend.Kildall Dataflow_Solver visited proj
R10026:10026 compcert.backend.Kildall <> s var
R9991:9994 compcert.backend.Kildall Dataflow_Solver aval proj
R9988:9988 compcert.backend.Kildall <> s var
R10049:10052 Coq.Init.Datatypes <> Some constr
R10073:10075 Coq.Init.Datatypes <> inr constr
R10080:10098 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R10248:10257 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R10201:10206 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R10211:10221 compcert.backend.Kildall Dataflow_Solver abstr_value def
R10225:10225 compcert.backend.Kildall <> s var
R10121:10177 compcert.backend.Kildall Dataflow_Solver mkstate constr
R10170:10176 compcert.backend.Kildall Dataflow_Solver visited proj
R10167:10167 compcert.backend.Kildall <> s var
R10132:10135 compcert.backend.Kildall Dataflow_Solver aval proj
R10129:10129 compcert.backend.Kildall <> s var
def 10387:10399 Dataflow_Solver fixpoint_from
R10409:10413 compcert.backend.Kildall Dataflow_Solver state rec
R10418:10423 Coq.Init.Datatypes <> option ind
R10426:10431 compcert.lib.Maps PMap t def
R10433:10435 compcert.backend.Kildall Dataflow_Solver.L t defax
R10443:10458 compcert.lib.Iteration PrimIter iterate def
R10469:10473 compcert.backend.Kildall <> start var
R10464:10467 compcert.backend.Kildall Dataflow_Solver step def
def 10817:10827 Dataflow_Solver start_state
R10837:10844 Coq.Numbers.BinNums <> positive ind
R10854:10856 compcert.backend.Kildall Dataflow_Solver.L t defax
R10867:10988 compcert.backend.Kildall Dataflow_Solver mkstate constr
R10981:10983 Coq.Init.Logic <> :type_scope:x_'='_x not
R10980:10980 compcert.backend.Kildall <> n var
R10984:10988 compcert.backend.Kildall <> enode var
R10932:10937 compcert.backend.Kildall NS add defax
R10945:10952 compcert.backend.Kildall NS empty defax
R10939:10943 compcert.backend.Kildall <> enode var
R10875:10883 compcert.lib.Maps PTree set def
R10897:10907 compcert.lib.Maps PTree empty def
R10909:10911 compcert.backend.Kildall Dataflow_Solver.L t defax
R10891:10894 compcert.backend.Kildall <> eval var
R10885:10889 compcert.backend.Kildall <> enode var
def 11006:11013 Dataflow_Solver fixpoint
R11023:11030 Coq.Numbers.BinNums <> positive ind
R11040:11042 compcert.backend.Kildall Dataflow_Solver.L t defax
R11050:11062 compcert.backend.Kildall Dataflow_Solver fixpoint_from def
R11065:11075 compcert.backend.Kildall Dataflow_Solver start_state def
R11083:11086 compcert.backend.Kildall <> eval var
R11077:11081 compcert.backend.Kildall <> enode var
def 11590:11608 Dataflow_Solver start_state_nodeset
R11619:11622 compcert.backend.Kildall NS t defax
R11633:11721 compcert.backend.Kildall Dataflow_Solver mkstate constr
R11708:11712 compcert.backend.Kildall NS In defax
R11716:11721 compcert.backend.Kildall <> enodes var
R11714:11714 compcert.backend.Kildall <> n var
R11675:11680 compcert.backend.Kildall <> enodes var
R11641:11651 compcert.lib.Maps PTree empty def
R11653:11655 compcert.backend.Kildall Dataflow_Solver.L t defax
def 11739:11754 Dataflow_Solver fixpoint_nodeset
R11765:11768 compcert.backend.Kildall NS t defax
R11776:11788 compcert.backend.Kildall Dataflow_Solver fixpoint_from def
R11791:11809 compcert.backend.Kildall Dataflow_Solver start_state_nodeset def
R11811:11816 compcert.backend.Kildall <> enodes var
def 11832:11851 Dataflow_Solver start_state_allnodes
R11861:11979 compcert.backend.Kildall Dataflow_Solver mkstate constr
R11947:11953 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R11959:11960 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R11967:11969 Coq.Init.Logic <> :type_scope:x_'='_x not
R11965:11965 compcert.lib.Maps <> ::x_'!'_x not
R11966:11966 compcert.backend.Kildall <> n var
R11961:11964 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R11970:11973 Coq.Init.Datatypes <> Some constr
R11975:11979 compcert.backend.Kildall <> instr var
R11903:11914 compcert.backend.Kildall NS all_nodes defax
R11916:11919 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R11869:11879 compcert.lib.Maps PTree empty def
R11881:11883 compcert.backend.Kildall Dataflow_Solver.L t defax
def 11997:12013 Dataflow_Solver fixpoint_allnodes
R12020:12032 compcert.backend.Kildall Dataflow_Solver fixpoint_from def
R12034:12053 compcert.backend.Kildall Dataflow_Solver start_state_allnodes def
ind 12124:12128 Dataflow_Solver optge
constr 12171:12180 Dataflow_Solver optge_some
constr 12244:12253 Dataflow_Solver optge_none
R12145:12150 Coq.Init.Datatypes <> option ind
R12152:12154 compcert.backend.Kildall Dataflow_Solver.L t defax
R12131:12136 Coq.Init.Datatypes <> option ind
R12138:12140 compcert.backend.Kildall Dataflow_Solver.L t defax
R12215:12219 compcert.backend.Kildall <> optge ind
R12231:12234 Coq.Init.Datatypes <> Some constr
R12236:12237 compcert.backend.Kildall <> l' var
R12222:12225 Coq.Init.Datatypes <> Some constr
R12227:12227 compcert.backend.Kildall <> l var
R12202:12205 compcert.backend.Kildall Dataflow_Solver.L ge defax
R12209:12210 compcert.backend.Kildall <> l' var
R12207:12207 compcert.backend.Kildall <> l var
R12273:12277 compcert.backend.Kildall <> optge ind
R12282:12285 Coq.Init.Datatypes <> None constr
R12279:12280 compcert.backend.Kildall <> ol var
prf 12296:12305 Dataflow_Solver optge_refl
R12319:12323 compcert.backend.Kildall Dataflow_Solver optge ind
R12328:12329 compcert.backend.Kildall <> ol var
R12325:12326 compcert.backend.Kildall <> ol var
R12371:12379 compcert.backend.Kildall Dataflow_Solver.L ge_refl prfax
R12388:12396 compcert.backend.Kildall Dataflow_Solver.L eq_refl prfax
R12371:12379 compcert.backend.Kildall Dataflow_Solver.L ge_refl prfax
R12388:12396 compcert.backend.Kildall Dataflow_Solver.L eq_refl prfax
prf 12412:12422 Dataflow_Solver optge_trans
R12479:12483 compcert.backend.Kildall Dataflow_Solver optge ind
R12489:12491 compcert.backend.Kildall <> ol3 var
R12485:12487 compcert.backend.Kildall <> ol1 var
R12462:12466 compcert.backend.Kildall Dataflow_Solver optge ind
R12472:12474 compcert.backend.Kildall <> ol3 var
R12468:12470 compcert.backend.Kildall <> ol2 var
R12445:12449 compcert.backend.Kildall Dataflow_Solver optge ind
R12455:12457 compcert.backend.Kildall <> ol2 var
R12451:12453 compcert.backend.Kildall <> ol1 var
R12548:12557 compcert.backend.Kildall Dataflow_Solver.L ge_trans prfax
R12548:12557 compcert.backend.Kildall Dataflow_Solver.L ge_trans prfax
prf 12595:12611 Dataflow_Solver optge_abstr_value
R12671:12674 compcert.backend.Kildall Dataflow_Solver.L ge defax
R12696:12706 compcert.backend.Kildall Dataflow_Solver abstr_value def
R12710:12712 compcert.backend.Kildall <> st' var
R12708:12708 compcert.backend.Kildall <> n var
R12677:12687 compcert.backend.Kildall Dataflow_Solver abstr_value def
R12691:12692 compcert.backend.Kildall <> st var
R12689:12689 compcert.backend.Kildall <> n var
R12635:12639 compcert.backend.Kildall Dataflow_Solver optge ind
R12663:12663 compcert.lib.Maps <> ::x_'!'_x not
R12664:12664 compcert.backend.Kildall <> n var
R12658:12661 compcert.backend.Kildall Dataflow_Solver aval proj
R12653:12655 compcert.backend.Kildall <> st' var
R12650:12650 compcert.lib.Maps <> ::x_'!'_x not
R12651:12651 compcert.backend.Kildall <> n var
R12645:12648 compcert.backend.Kildall Dataflow_Solver aval proj
R12641:12642 compcert.backend.Kildall <> st var
R12740:12750 compcert.backend.Kildall Dataflow_Solver abstr_value def
R12772:12779 compcert.backend.Kildall Dataflow_Solver.L ge_bot prfax
R12772:12779 compcert.backend.Kildall Dataflow_Solver.L ge_bot prfax
prf 12795:12816 Dataflow_Solver propagate_succ_charact
R12851:12864 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R12873:12873 compcert.backend.Kildall <> n var
R12869:12871 compcert.backend.Kildall <> out var
R12866:12867 compcert.backend.Kildall <> st var
R12912:12917 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12883:12887 compcert.backend.Kildall Dataflow_Solver optge ind
R12903:12906 Coq.Init.Datatypes <> Some constr
R12908:12910 compcert.backend.Kildall <> out var
R12899:12899 compcert.lib.Maps <> ::x_'!'_x not
R12900:12900 compcert.backend.Kildall <> n var
R12894:12897 compcert.backend.Kildall Dataflow_Solver aval proj
R12889:12891 compcert.backend.Kildall <> st' var
R12918:12918 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12965:12971 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12951:12953 Coq.Init.Logic <> :type_scope:x_'='_x not
R12949:12949 compcert.lib.Maps <> ::x_'!'_x not
R12950:12950 compcert.backend.Kildall <> s var
R12944:12947 compcert.backend.Kildall Dataflow_Solver aval proj
R12939:12941 compcert.backend.Kildall <> st' var
R12963:12963 compcert.lib.Maps <> ::x_'!'_x not
R12964:12964 compcert.backend.Kildall <> s var
R12958:12961 compcert.backend.Kildall Dataflow_Solver aval proj
R12954:12955 compcert.backend.Kildall <> st var
R12930:12933 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R12929:12929 compcert.backend.Kildall <> n var
R12934:12934 compcert.backend.Kildall <> s var
R12972:12972 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13013:13019 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12983:12987 compcert.backend.Kildall Dataflow_Solver optge ind
R13011:13011 compcert.lib.Maps <> ::x_'!'_x not
R13012:13012 compcert.backend.Kildall <> s var
R13006:13009 compcert.backend.Kildall Dataflow_Solver aval proj
R13002:13003 compcert.backend.Kildall <> st var
R12999:12999 compcert.lib.Maps <> ::x_'!'_x not
R13000:13000 compcert.backend.Kildall <> s var
R12994:12997 compcert.backend.Kildall Dataflow_Solver aval proj
R12989:12991 compcert.backend.Kildall <> st' var
R13020:13020 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13073:13079 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13043:13046 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R13021:13025 compcert.backend.Kildall NS In defax
R13034:13041 compcert.backend.Kildall Dataflow_Solver worklist proj
R13029:13031 compcert.backend.Kildall <> st' var
R13027:13027 compcert.backend.Kildall <> n var
R13059:13061 Coq.Init.Logic <> :type_scope:x_'='_x not
R13057:13057 compcert.lib.Maps <> ::x_'!'_x not
R13058:13058 compcert.backend.Kildall <> n var
R13052:13055 compcert.backend.Kildall Dataflow_Solver aval proj
R13047:13049 compcert.backend.Kildall <> st' var
R13071:13071 compcert.lib.Maps <> ::x_'!'_x not
R13072:13072 compcert.backend.Kildall <> n var
R13066:13069 compcert.backend.Kildall Dataflow_Solver aval proj
R13062:13063 compcert.backend.Kildall <> st var
R13080:13080 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13141:13147 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13118:13122 compcert.backend.Kildall NS In defax
R13132:13139 compcert.backend.Kildall Dataflow_Solver worklist proj
R13127:13129 compcert.backend.Kildall <> st' var
R13124:13125 compcert.backend.Kildall <> n' var
R13092:13096 compcert.backend.Kildall NS In defax
R13105:13112 compcert.backend.Kildall Dataflow_Solver worklist proj
R13101:13102 compcert.backend.Kildall <> st var
R13098:13099 compcert.backend.Kildall <> n' var
R13148:13148 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13219:13225 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13193:13196 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R13189:13191 Coq.Init.Logic <> :type_scope:x_'='_x not
R13187:13188 compcert.backend.Kildall <> n' var
R13192:13192 compcert.backend.Kildall <> n var
R13197:13201 compcert.backend.Kildall NS In defax
R13210:13217 compcert.backend.Kildall Dataflow_Solver worklist proj
R13206:13207 compcert.backend.Kildall <> st var
R13203:13204 compcert.backend.Kildall <> n' var
R13160:13164 compcert.backend.Kildall NS In defax
R13174:13181 compcert.backend.Kildall Dataflow_Solver worklist proj
R13169:13171 compcert.backend.Kildall <> st' var
R13166:13167 compcert.backend.Kildall <> n' var
R13226:13226 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13273:13279 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13262:13268 compcert.backend.Kildall Dataflow_Solver visited proj
R13271:13272 compcert.backend.Kildall <> n' var
R13257:13259 compcert.backend.Kildall <> st' var
R13242:13248 compcert.backend.Kildall Dataflow_Solver visited proj
R13251:13252 compcert.backend.Kildall <> n' var
R13238:13239 compcert.backend.Kildall <> st var
R13280:13280 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13354:13361 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13437:13437 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13335:13338 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R13312:13316 compcert.backend.Kildall NS In defax
R13326:13333 compcert.backend.Kildall Dataflow_Solver worklist proj
R13321:13323 compcert.backend.Kildall <> st' var
R13318:13319 compcert.backend.Kildall <> n' var
R13343:13349 compcert.backend.Kildall Dataflow_Solver visited proj
R13352:13353 compcert.backend.Kildall <> n' var
R13339:13340 compcert.backend.Kildall <> st var
R13297:13303 compcert.backend.Kildall Dataflow_Solver visited proj
R13306:13307 compcert.backend.Kildall <> n' var
R13292:13294 compcert.backend.Kildall <> st' var
R13426:13432 compcert.backend.Kildall Dataflow_Solver visited proj
R13435:13436 compcert.backend.Kildall <> n' var
R13421:13423 compcert.backend.Kildall <> st' var
R13409:13412 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R13406:13406 compcert.lib.Maps <> ::x_'!'_x not
R13407:13408 compcert.backend.Kildall <> n' var
R13401:13404 compcert.backend.Kildall Dataflow_Solver aval proj
R13396:13398 compcert.backend.Kildall <> st' var
R13413:13416 Coq.Init.Datatypes <> None constr
R13385:13387 Coq.Init.Logic <> :type_scope:x_'='_x not
R13382:13382 compcert.lib.Maps <> ::x_'!'_x not
R13383:13384 compcert.backend.Kildall <> n' var
R13377:13380 compcert.backend.Kildall Dataflow_Solver aval proj
R13373:13374 compcert.backend.Kildall <> st var
R13388:13391 Coq.Init.Datatypes <> None constr
R13456:13469 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R13507:13507 compcert.lib.Maps <> ::x_'!'_x not
R13502:13505 compcert.backend.Kildall Dataflow_Solver aval proj
R13560:13564 compcert.backend.Kildall Dataflow_Solver.L lub defax
R13507:13507 compcert.lib.Maps <> ::x_'!'_x not
R13502:13505 compcert.backend.Kildall Dataflow_Solver aval proj
R13560:13564 compcert.backend.Kildall Dataflow_Solver.L lub defax
R13543:13555 compcert.backend.Kildall Dataflow_Solver.L beq_correct prfax
R13537:13541 compcert.backend.Kildall Dataflow_Solver.L beq defax
R13675:13684 compcert.backend.Kildall Dataflow_Solver.L ge_trans prfax
R13675:13684 compcert.backend.Kildall Dataflow_Solver.L ge_trans prfax
R13693:13701 compcert.backend.Kildall Dataflow_Solver.L ge_refl prfax
R13693:13701 compcert.backend.Kildall Dataflow_Solver.L ge_refl prfax
R13725:13738 compcert.backend.Kildall Dataflow_Solver.L ge_lub_right prfax
R13725:13738 compcert.backend.Kildall Dataflow_Solver.L ge_lub_right prfax
R13751:13760 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R13751:13760 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R13911:13919 compcert.lib.Maps PTree gss thm
R13911:13919 compcert.lib.Maps PTree gss thm
R13941:13954 compcert.backend.Kildall Dataflow_Solver.L ge_lub_right prfax
R13941:13954 compcert.backend.Kildall Dataflow_Solver.L ge_lub_right prfax
R13970:13978 compcert.lib.Maps PTree gso thm
R13970:13978 compcert.lib.Maps PTree gso thm
R14007:14018 compcert.lib.Maps PTree gsspec thm
R14007:14018 compcert.lib.Maps PTree gsspec thm
R14031:14033 compcert.lib.Coqlib <> peq def
R14031:14033 compcert.lib.Coqlib <> peq def
R14085:14097 compcert.backend.Kildall Dataflow_Solver.L ge_lub_left prfax
R14085:14097 compcert.backend.Kildall Dataflow_Solver.L ge_lub_left prfax
R14110:14119 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R14110:14119 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R14134:14144 compcert.backend.Kildall NS add_spec prfax
R14134:14144 compcert.backend.Kildall NS add_spec prfax
R14166:14176 compcert.backend.Kildall NS add_spec prfax
R14166:14176 compcert.backend.Kildall NS add_spec prfax
R14197:14207 compcert.backend.Kildall NS add_spec prfax
R14197:14207 compcert.backend.Kildall NS add_spec prfax
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R14278:14288 compcert.backend.Kildall NS add_spec prfax
R14278:14288 compcert.backend.Kildall NS add_spec prfax
R14310:14321 compcert.lib.Maps PTree gsspec thm
R14310:14321 compcert.lib.Maps PTree gsspec thm
R14340:14342 compcert.lib.Coqlib <> peq def
R14340:14342 compcert.lib.Coqlib <> peq def
R14451:14459 compcert.lib.Maps PTree gss thm
R14451:14459 compcert.lib.Maps PTree gss thm
R14468:14477 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R14468:14477 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R14493:14501 compcert.lib.Maps PTree gso thm
R14493:14501 compcert.lib.Maps PTree gso thm
R14530:14541 compcert.lib.Maps PTree gsspec thm
R14530:14541 compcert.lib.Maps PTree gsspec thm
R14554:14556 compcert.lib.Coqlib <> peq def
R14554:14556 compcert.lib.Coqlib <> peq def
R14612:14621 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R14612:14621 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R14636:14646 compcert.backend.Kildall NS add_spec prfax
R14636:14646 compcert.backend.Kildall NS add_spec prfax
R14668:14678 compcert.backend.Kildall NS add_spec prfax
R14668:14678 compcert.backend.Kildall NS add_spec prfax
R14699:14709 compcert.backend.Kildall NS add_spec prfax
R14699:14709 compcert.backend.Kildall NS add_spec prfax
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R14778:14788 compcert.backend.Kildall NS add_spec prfax
R14778:14788 compcert.backend.Kildall NS add_spec prfax
R14810:14821 compcert.lib.Maps PTree gsspec thm
R14810:14821 compcert.lib.Maps PTree gsspec thm
R14840:14842 compcert.lib.Coqlib <> peq def
R14840:14842 compcert.lib.Coqlib <> peq def
prf 14881:14907 Dataflow_Solver propagate_succ_list_charact
R14942:14960 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R14969:14969 compcert.backend.Kildall <> l var
R14965:14967 compcert.backend.Kildall <> out var
R14962:14963 compcert.backend.Kildall <> st var
R14979:14979 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15029:15035 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15000:15004 compcert.backend.Kildall Dataflow_Solver optge ind
R15020:15023 Coq.Init.Datatypes <> Some constr
R15025:15027 compcert.backend.Kildall <> out var
R15016:15016 compcert.lib.Maps <> ::x_'!'_x not
R15017:15017 compcert.backend.Kildall <> n var
R15011:15014 compcert.backend.Kildall Dataflow_Solver aval proj
R15006:15008 compcert.backend.Kildall <> st' var
R14990:14991 Coq.Lists.List <> In def
R14995:14995 compcert.backend.Kildall <> l var
R14993:14993 compcert.backend.Kildall <> n var
R15036:15036 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15084:15090 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15070:15072 Coq.Init.Logic <> :type_scope:x_'='_x not
R15068:15068 compcert.lib.Maps <> ::x_'!'_x not
R15069:15069 compcert.backend.Kildall <> n var
R15063:15066 compcert.backend.Kildall Dataflow_Solver aval proj
R15058:15060 compcert.backend.Kildall <> st' var
R15082:15082 compcert.lib.Maps <> ::x_'!'_x not
R15083:15083 compcert.backend.Kildall <> n var
R15077:15080 compcert.backend.Kildall Dataflow_Solver aval proj
R15073:15074 compcert.backend.Kildall <> st var
R15047:15047 Coq.Init.Logic <> :type_scope:'~'_x not
R15048:15049 Coq.Lists.List <> In def
R15053:15053 compcert.backend.Kildall <> l var
R15051:15051 compcert.backend.Kildall <> n var
R15091:15091 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15132:15138 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15102:15106 compcert.backend.Kildall Dataflow_Solver optge ind
R15130:15130 compcert.lib.Maps <> ::x_'!'_x not
R15131:15131 compcert.backend.Kildall <> n var
R15125:15128 compcert.backend.Kildall Dataflow_Solver aval proj
R15121:15122 compcert.backend.Kildall <> st var
R15118:15118 compcert.lib.Maps <> ::x_'!'_x not
R15119:15119 compcert.backend.Kildall <> n var
R15113:15116 compcert.backend.Kildall Dataflow_Solver aval proj
R15108:15110 compcert.backend.Kildall <> st' var
R15139:15139 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15202:15208 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15172:15175 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R15150:15154 compcert.backend.Kildall NS In defax
R15163:15170 compcert.backend.Kildall Dataflow_Solver worklist proj
R15158:15160 compcert.backend.Kildall <> st' var
R15156:15156 compcert.backend.Kildall <> n var
R15188:15190 Coq.Init.Logic <> :type_scope:x_'='_x not
R15186:15186 compcert.lib.Maps <> ::x_'!'_x not
R15187:15187 compcert.backend.Kildall <> n var
R15181:15184 compcert.backend.Kildall Dataflow_Solver aval proj
R15176:15178 compcert.backend.Kildall <> st' var
R15200:15200 compcert.lib.Maps <> ::x_'!'_x not
R15201:15201 compcert.backend.Kildall <> n var
R15195:15198 compcert.backend.Kildall Dataflow_Solver aval proj
R15191:15192 compcert.backend.Kildall <> st var
R15209:15209 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15270:15276 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15247:15251 compcert.backend.Kildall NS In defax
R15261:15268 compcert.backend.Kildall Dataflow_Solver worklist proj
R15256:15258 compcert.backend.Kildall <> st' var
R15253:15254 compcert.backend.Kildall <> n' var
R15221:15225 compcert.backend.Kildall NS In defax
R15234:15241 compcert.backend.Kildall Dataflow_Solver worklist proj
R15230:15231 compcert.backend.Kildall <> st var
R15227:15228 compcert.backend.Kildall <> n' var
R15277:15277 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15349:15355 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15323:15326 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R15316:15317 Coq.Lists.List <> In def
R15322:15322 compcert.backend.Kildall <> l var
R15319:15320 compcert.backend.Kildall <> n' var
R15327:15331 compcert.backend.Kildall NS In defax
R15340:15347 compcert.backend.Kildall Dataflow_Solver worklist proj
R15336:15337 compcert.backend.Kildall <> st var
R15333:15334 compcert.backend.Kildall <> n' var
R15289:15293 compcert.backend.Kildall NS In defax
R15303:15310 compcert.backend.Kildall Dataflow_Solver worklist proj
R15298:15300 compcert.backend.Kildall <> st' var
R15295:15296 compcert.backend.Kildall <> n' var
R15356:15356 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15403:15409 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15392:15398 compcert.backend.Kildall Dataflow_Solver visited proj
R15401:15402 compcert.backend.Kildall <> n' var
R15387:15389 compcert.backend.Kildall <> st' var
R15372:15378 compcert.backend.Kildall Dataflow_Solver visited proj
R15381:15382 compcert.backend.Kildall <> n' var
R15368:15369 compcert.backend.Kildall <> st var
R15410:15410 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15484:15491 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15567:15567 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15465:15468 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R15442:15446 compcert.backend.Kildall NS In defax
R15456:15463 compcert.backend.Kildall Dataflow_Solver worklist proj
R15451:15453 compcert.backend.Kildall <> st' var
R15448:15449 compcert.backend.Kildall <> n' var
R15473:15479 compcert.backend.Kildall Dataflow_Solver visited proj
R15482:15483 compcert.backend.Kildall <> n' var
R15469:15470 compcert.backend.Kildall <> st var
R15427:15433 compcert.backend.Kildall Dataflow_Solver visited proj
R15436:15437 compcert.backend.Kildall <> n' var
R15422:15424 compcert.backend.Kildall <> st' var
R15556:15562 compcert.backend.Kildall Dataflow_Solver visited proj
R15565:15566 compcert.backend.Kildall <> n' var
R15551:15553 compcert.backend.Kildall <> st' var
R15539:15542 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R15536:15536 compcert.lib.Maps <> ::x_'!'_x not
R15537:15538 compcert.backend.Kildall <> n' var
R15531:15534 compcert.backend.Kildall Dataflow_Solver aval proj
R15526:15528 compcert.backend.Kildall <> st' var
R15543:15546 Coq.Init.Datatypes <> None constr
R15515:15517 Coq.Init.Logic <> :type_scope:x_'='_x not
R15512:15512 compcert.lib.Maps <> ::x_'!'_x not
R15513:15514 compcert.backend.Kildall <> n' var
R15507:15510 compcert.backend.Kildall Dataflow_Solver aval proj
R15503:15504 compcert.backend.Kildall <> st var
R15518:15521 Coq.Init.Datatypes <> None constr
R15662:15671 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R15662:15671 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R15755:15776 compcert.backend.Kildall Dataflow_Solver propagate_succ_charact thm
R15755:15776 compcert.backend.Kildall Dataflow_Solver propagate_succ_charact thm
R15804:15817 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R15804:15817 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R15924:15942 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R15924:15942 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R16085:16095 compcert.backend.Kildall Dataflow_Solver optge_trans thm
R16085:16095 compcert.backend.Kildall Dataflow_Solver optge_trans thm
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R16171:16181 compcert.backend.Kildall Dataflow_Solver optge_trans thm
R16171:16181 compcert.backend.Kildall Dataflow_Solver optge_trans thm
R16232:16234 compcert.lib.Coqlib <> peq def
R16232:16234 compcert.lib.Coqlib <> peq def
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R16511:16511 compcert.lib.Maps <> ::x_'!'_x not
R16506:16509 compcert.backend.Kildall Dataflow_Solver aval proj
R16511:16511 compcert.lib.Maps <> ::x_'!'_x not
R16506:16509 compcert.backend.Kildall Dataflow_Solver aval proj
ind 16647:16651 Dataflow_Solver steps
constr 16684:16693 Dataflow_Solver steps_base
constr 16720:16730 Dataflow_Solver steps_right
R16663:16667 compcert.backend.Kildall Dataflow_Solver state rec
R16654:16658 compcert.backend.Kildall Dataflow_Solver state rec
R16706:16710 compcert.backend.Kildall <> steps ind
R16714:16714 compcert.backend.Kildall <> s var
R16712:16712 compcert.backend.Kildall <> s var
R16785:16789 compcert.backend.Kildall <> steps ind
R16794:16795 compcert.backend.Kildall <> s3 var
R16791:16792 compcert.backend.Kildall <> s1 var
R16772:16774 Coq.Init.Logic <> :type_scope:x_'='_x not
R16765:16768 compcert.backend.Kildall Dataflow_Solver step def
R16770:16771 compcert.backend.Kildall <> s2 var
R16775:16777 Coq.Init.Datatypes <> inr constr
R16779:16780 compcert.backend.Kildall <> s3 var
R16750:16754 compcert.backend.Kildall <> steps ind
R16759:16760 compcert.backend.Kildall <> s2 var
R16756:16757 compcert.backend.Kildall <> s1 var
def 16806:16814 Dataflow_Solver steps_ind
R16833:16837 compcert.backend.Kildall Dataflow_Solver steps ind
prf 16857:16877 Dataflow_Solver fixpoint_from_charact
R16938:16944 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16947:16948 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16963:16966 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16949:16953 compcert.backend.Kildall Dataflow_Solver steps ind
R16961:16962 compcert.backend.Kildall <> st var
R16955:16959 compcert.backend.Kildall <> start var
R16995:16998 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16988:16990 Coq.Init.Logic <> :type_scope:x_'='_x not
R16967:16973 compcert.backend.Kildall NS pick defax
R16979:16986 compcert.backend.Kildall Dataflow_Solver worklist proj
R16975:16976 compcert.backend.Kildall <> st var
R16991:16994 Coq.Init.Datatypes <> None constr
R17002:17004 Coq.Init.Logic <> :type_scope:x_'='_x not
R16999:17001 compcert.backend.Kildall <> res var
R17005:17005 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17011:17012 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17022:17022 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17006:17010 compcert.backend.Kildall Dataflow_Solver.L bot defax
R17017:17020 compcert.backend.Kildall Dataflow_Solver aval proj
R17013:17014 compcert.backend.Kildall <> st var
R16921:16923 Coq.Init.Logic <> :type_scope:x_'='_x not
R16902:16914 compcert.backend.Kildall Dataflow_Solver fixpoint_from def
R16916:16920 compcert.backend.Kildall <> start var
R16924:16927 Coq.Init.Datatypes <> Some constr
R16929:16931 compcert.backend.Kildall <> res var
R17041:17048 compcert.backend.Kildall Dataflow_Solver fixpoint def
R17069:17089 compcert.lib.Iteration PrimIter iterate_prop thm
R17167:17173 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R17176:17177 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R17192:17195 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17178:17182 compcert.backend.Kildall Dataflow_Solver steps ind
R17190:17191 compcert.backend.Kildall <> st var
R17224:17227 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17217:17219 Coq.Init.Logic <> :type_scope:x_'='_x not
R17196:17202 compcert.backend.Kildall NS pick defax
R17205:17212 compcert.backend.Kildall Dataflow_Solver worklist proj
R17214:17215 compcert.backend.Kildall <> st var
R17220:17223 Coq.Init.Datatypes <> None constr
R17231:17233 Coq.Init.Logic <> :type_scope:x_'='_x not
R17228:17230 compcert.backend.Kildall <> res var
R17234:17234 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17240:17241 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17249:17249 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17235:17239 compcert.backend.Kildall Dataflow_Solver.L bot defax
R17242:17245 compcert.backend.Kildall Dataflow_Solver aval proj
R17247:17248 compcert.backend.Kildall <> st var
R17125:17129 compcert.backend.Kildall Dataflow_Solver steps ind
R17137:17138 compcert.backend.Kildall <> st var
R17095:17098 compcert.backend.Kildall Dataflow_Solver step def
R17069:17089 compcert.lib.Iteration PrimIter iterate_prop thm
R17167:17173 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R17176:17177 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R17192:17195 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17178:17182 compcert.backend.Kildall Dataflow_Solver steps ind
R17190:17191 compcert.backend.Kildall <> st var
R17224:17227 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17217:17219 Coq.Init.Logic <> :type_scope:x_'='_x not
R17196:17202 compcert.backend.Kildall NS pick defax
R17205:17212 compcert.backend.Kildall Dataflow_Solver worklist proj
R17214:17215 compcert.backend.Kildall <> st var
R17220:17223 Coq.Init.Datatypes <> None constr
R17231:17233 Coq.Init.Logic <> :type_scope:x_'='_x not
R17228:17230 compcert.backend.Kildall <> res var
R17234:17234 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17240:17241 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17249:17249 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R17235:17239 compcert.backend.Kildall Dataflow_Solver.L bot defax
R17242:17245 compcert.backend.Kildall Dataflow_Solver aval proj
R17247:17248 compcert.backend.Kildall <> st var
R17125:17129 compcert.backend.Kildall Dataflow_Solver steps ind
R17137:17138 compcert.backend.Kildall <> st var
R17095:17098 compcert.backend.Kildall Dataflow_Solver step def
R17281:17284 compcert.backend.Kildall Dataflow_Solver step def
R17281:17284 compcert.backend.Kildall Dataflow_Solver step def
R17332:17335 compcert.backend.Kildall Dataflow_Solver step def
R17353:17359 compcert.backend.Kildall NS pick defax
R17362:17369 compcert.backend.Kildall Dataflow_Solver worklist proj
R17353:17359 compcert.backend.Kildall NS pick defax
R17362:17369 compcert.backend.Kildall Dataflow_Solver worklist proj
R17406:17406 compcert.lib.Maps <> ::x_'!'_x not
R17402:17405 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R17406:17406 compcert.lib.Maps <> ::x_'!'_x not
R17402:17405 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R17450:17460 compcert.backend.Kildall Dataflow_Solver steps_right constr
R17450:17460 compcert.backend.Kildall Dataflow_Solver steps_right constr
prf 17809:17817 Dataflow_Solver step_incr
R17889:17893 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17926:17926 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R17860:17864 compcert.backend.Kildall Dataflow_Solver optge ind
R17887:17887 compcert.lib.Maps <> ::x_'!'_x not
R17888:17888 compcert.backend.Kildall <> n var
R17882:17885 compcert.backend.Kildall Dataflow_Solver aval proj
R17878:17879 compcert.backend.Kildall <> s1 var
R17875:17875 compcert.lib.Maps <> ::x_'!'_x not
R17876:17876 compcert.backend.Kildall <> n var
R17870:17873 compcert.backend.Kildall Dataflow_Solver aval proj
R17866:17867 compcert.backend.Kildall <> s2 var
R17916:17922 compcert.backend.Kildall Dataflow_Solver visited proj
R17925:17925 compcert.backend.Kildall <> n var
R17912:17913 compcert.backend.Kildall <> s2 var
R17898:17904 compcert.backend.Kildall Dataflow_Solver visited proj
R17907:17907 compcert.backend.Kildall <> n var
R17894:17895 compcert.backend.Kildall <> s1 var
R17845:17847 Coq.Init.Logic <> :type_scope:x_'='_x not
R17838:17841 compcert.backend.Kildall Dataflow_Solver step def
R17843:17844 compcert.backend.Kildall <> s1 var
R17848:17850 Coq.Init.Datatypes <> inr constr
R17852:17853 compcert.backend.Kildall <> s2 var
R17945:17948 compcert.backend.Kildall Dataflow_Solver step def
R17972:17978 compcert.backend.Kildall NS pick defax
R17981:17988 compcert.backend.Kildall Dataflow_Solver worklist proj
R17972:17978 compcert.backend.Kildall NS pick defax
R17981:17988 compcert.backend.Kildall Dataflow_Solver worklist proj
R18046:18046 compcert.lib.Maps <> ::x_'!'_x not
R18042:18045 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R18046:18046 compcert.lib.Maps <> ::x_'!'_x not
R18042:18045 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R18086:18112 compcert.backend.Kildall Dataflow_Solver propagate_succ_list_charact thm
R18230:18284 compcert.backend.Kildall Dataflow_Solver mkstate constr
R18275:18281 compcert.backend.Kildall Dataflow_Solver visited proj
R18238:18241 compcert.backend.Kildall Dataflow_Solver aval proj
R18188:18197 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R18137:18142 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R18147:18157 compcert.backend.Kildall Dataflow_Solver abstr_value def
R18086:18112 compcert.backend.Kildall Dataflow_Solver propagate_succ_list_charact thm
R18230:18284 compcert.backend.Kildall Dataflow_Solver mkstate constr
R18275:18281 compcert.backend.Kildall Dataflow_Solver visited proj
R18238:18241 compcert.backend.Kildall Dataflow_Solver aval proj
R18188:18197 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R18137:18142 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R18147:18157 compcert.backend.Kildall Dataflow_Solver abstr_value def
R18321:18339 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R18454:18463 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R18424:18429 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R18434:18444 compcert.backend.Kildall Dataflow_Solver abstr_value def
R18344:18398 compcert.backend.Kildall Dataflow_Solver mkstate constr
R18389:18395 compcert.backend.Kildall Dataflow_Solver visited proj
R18352:18355 compcert.backend.Kildall Dataflow_Solver aval proj
R18321:18339 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R18454:18463 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R18424:18429 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R18434:18444 compcert.backend.Kildall Dataflow_Solver abstr_value def
R18344:18398 compcert.backend.Kildall Dataflow_Solver mkstate constr
R18389:18395 compcert.backend.Kildall Dataflow_Solver visited proj
R18352:18355 compcert.backend.Kildall Dataflow_Solver aval proj
R18562:18571 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R18562:18571 compcert.backend.Kildall Dataflow_Solver optge_refl thm
prf 18593:18602 Dataflow_Solver steps_incr
R18669:18673 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18706:18706 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18640:18644 compcert.backend.Kildall Dataflow_Solver optge ind
R18667:18667 compcert.lib.Maps <> ::x_'!'_x not
R18668:18668 compcert.backend.Kildall <> n var
R18662:18665 compcert.backend.Kildall Dataflow_Solver aval proj
R18658:18659 compcert.backend.Kildall <> s1 var
R18655:18655 compcert.lib.Maps <> ::x_'!'_x not
R18656:18656 compcert.backend.Kildall <> n var
R18650:18653 compcert.backend.Kildall Dataflow_Solver aval proj
R18646:18647 compcert.backend.Kildall <> s2 var
R18696:18702 compcert.backend.Kildall Dataflow_Solver visited proj
R18705:18705 compcert.backend.Kildall <> n var
R18692:18693 compcert.backend.Kildall <> s2 var
R18678:18684 compcert.backend.Kildall Dataflow_Solver visited proj
R18687:18687 compcert.backend.Kildall <> n var
R18674:18675 compcert.backend.Kildall <> s1 var
R18623:18627 compcert.backend.Kildall Dataflow_Solver steps ind
R18632:18633 compcert.backend.Kildall <> s2 var
R18629:18630 compcert.backend.Kildall <> s1 var
R18746:18755 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R18746:18755 compcert.backend.Kildall Dataflow_Solver optge_refl thm
R18793:18801 compcert.backend.Kildall Dataflow_Solver step_incr thm
R18793:18801 compcert.backend.Kildall Dataflow_Solver step_incr thm
R18844:18854 compcert.backend.Kildall Dataflow_Solver optge_trans thm
R18844:18854 compcert.backend.Kildall Dataflow_Solver optge_trans thm
rec 19428:19437 Dataflow_Solver good_state
proj 19465:19473 Dataflow_Solver gs_stable
proj 19665:19674 Dataflow_Solver gs_defined
R19444:19448 compcert.backend.Kildall Dataflow_Solver state rec
R19533:19541 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R19660:19660 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R19512:19516 compcert.backend.Kildall NS In defax
R19524:19531 compcert.backend.Kildall Dataflow_Solver worklist proj
R19520:19521 compcert.backend.Kildall <> st var
R19518:19518 compcert.backend.Kildall <> n var
R19606:19610 compcert.backend.Kildall Dataflow_Solver optge ind
R19625:19628 Coq.Init.Datatypes <> Some constr
R19631:19636 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R19641:19651 compcert.backend.Kildall Dataflow_Solver abstr_value def
R19655:19656 compcert.backend.Kildall <> st var
R19653:19653 compcert.backend.Kildall <> n var
R19638:19638 compcert.backend.Kildall <> n var
R19621:19621 compcert.lib.Maps <> ::x_'!'_x not
R19622:19622 compcert.backend.Kildall <> s var
R19616:19619 compcert.backend.Kildall Dataflow_Solver aval proj
R19612:19613 compcert.backend.Kildall <> st var
R19578:19579 Coq.Lists.List <> In def
R19584:19593 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R19595:19595 compcert.backend.Kildall <> i var
R19581:19581 compcert.backend.Kildall <> s var
R19565:19567 Coq.Init.Logic <> :type_scope:x_'='_x not
R19563:19563 compcert.lib.Maps <> ::x_'!'_x not
R19564:19564 compcert.backend.Kildall <> n var
R19559:19562 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R19568:19571 Coq.Init.Datatypes <> Some constr
R19573:19573 compcert.backend.Kildall <> i var
R19494:19500 compcert.backend.Kildall Dataflow_Solver visited proj
R19503:19503 compcert.backend.Kildall <> n var
R19490:19491 compcert.backend.Kildall <> st var
R19721:19727 compcert.backend.Kildall Dataflow_Solver visited proj
R19730:19730 compcert.backend.Kildall <> n var
R19717:19718 compcert.backend.Kildall <> st var
R19704:19706 Coq.Init.Logic <> :type_scope:x_'='_x not
R19702:19702 compcert.lib.Maps <> ::x_'!'_x not
R19703:19703 compcert.backend.Kildall <> n var
R19697:19700 compcert.backend.Kildall Dataflow_Solver aval proj
R19693:19694 compcert.backend.Kildall <> st var
R19707:19710 Coq.Init.Datatypes <> Some constr
R19712:19712 compcert.backend.Kildall <> v var
prf 19809:19823 Dataflow_Solver step_state_good
R19943:19952 compcert.backend.Kildall Dataflow_Solver good_state rec
R19955:19973 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R20113:20122 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R20124:20128 compcert.backend.Kildall <> instr var
R20047:20052 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R20058:20068 compcert.backend.Kildall Dataflow_Solver abstr_value def
R20073:20074 compcert.backend.Kildall <> st var
R20070:20071 compcert.backend.Kildall <> pc var
R20054:20055 compcert.backend.Kildall <> pc var
R19976:19982 compcert.backend.Kildall Dataflow_Solver mkstate constr
R20002:20008 compcert.backend.Kildall Dataflow_Solver visited proj
R19998:19999 compcert.backend.Kildall <> st var
R19994:19996 compcert.backend.Kildall <> rem var
R19988:19991 compcert.backend.Kildall Dataflow_Solver aval proj
R19984:19985 compcert.backend.Kildall <> st var
R19924:19933 compcert.backend.Kildall Dataflow_Solver good_state rec
R19935:19936 compcert.backend.Kildall <> st var
R19905:19907 Coq.Init.Logic <> :type_scope:x_'='_x not
R19902:19902 compcert.lib.Maps <> ::x_'!'_x not
R19903:19904 compcert.backend.Kildall <> pc var
R19898:19901 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R19908:19911 Coq.Init.Datatypes <> Some constr
R19913:19917 compcert.backend.Kildall <> instr var
R19875:19877 Coq.Init.Logic <> :type_scope:x_'='_x not
R19854:19860 compcert.backend.Kildall NS pick defax
R19866:19873 compcert.backend.Kildall Dataflow_Solver worklist proj
R19862:19863 compcert.backend.Kildall <> st var
R19878:19881 Coq.Init.Datatypes <> Some constr
R19883:19883 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19886:19887 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19891:19891 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R19884:19885 compcert.backend.Kildall <> pc var
R19888:19890 compcert.backend.Kildall <> rem var
R20210:20221 compcert.backend.Kildall NS pick_some prfax
R20210:20221 compcert.backend.Kildall NS pick_some prfax
R20263:20268 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R20274:20284 compcert.backend.Kildall Dataflow_Solver abstr_value def
R20263:20268 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R20274:20284 compcert.backend.Kildall Dataflow_Solver abstr_value def
R20309:20335 compcert.backend.Kildall Dataflow_Solver propagate_succ_list_charact thm
R20363:20417 compcert.backend.Kildall Dataflow_Solver mkstate constr
R20408:20414 compcert.backend.Kildall Dataflow_Solver visited proj
R20371:20374 compcert.backend.Kildall Dataflow_Solver aval proj
R20342:20351 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R20309:20335 compcert.backend.Kildall Dataflow_Solver propagate_succ_list_charact thm
R20363:20417 compcert.backend.Kildall Dataflow_Solver mkstate constr
R20408:20414 compcert.backend.Kildall Dataflow_Solver visited proj
R20371:20374 compcert.backend.Kildall Dataflow_Solver aval proj
R20342:20351 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R20438:20456 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R20559:20568 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R20461:20515 compcert.backend.Kildall Dataflow_Solver mkstate constr
R20506:20512 compcert.backend.Kildall Dataflow_Solver visited proj
R20469:20472 compcert.backend.Kildall Dataflow_Solver aval proj
R20438:20456 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R20559:20568 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R20461:20515 compcert.backend.Kildall Dataflow_Solver mkstate constr
R20506:20512 compcert.backend.Kildall Dataflow_Solver visited proj
R20469:20472 compcert.backend.Kildall Dataflow_Solver aval proj
R20740:20750 compcert.backend.Kildall Dataflow_Solver abstr_value def
R20765:20775 compcert.backend.Kildall Dataflow_Solver abstr_value def
R20796:20806 compcert.backend.Kildall Dataflow_Solver abstr_value def
R20765:20775 compcert.backend.Kildall Dataflow_Solver abstr_value def
R20740:20750 compcert.backend.Kildall Dataflow_Solver abstr_value def
R21014:21016 Coq.Init.Logic <> :type_scope:x_'='_x not
R21014:21016 Coq.Init.Logic <> :type_scope:x_'='_x not
R21223:21223 compcert.lib.Maps <> ::x_'!'_x not
R21218:21221 compcert.backend.Kildall Dataflow_Solver aval proj
R21197:21207 compcert.backend.Kildall Dataflow_Solver optge_trans thm
R21223:21223 compcert.lib.Maps <> ::x_'!'_x not
R21218:21221 compcert.backend.Kildall Dataflow_Solver aval proj
R21197:21207 compcert.backend.Kildall Dataflow_Solver optge_trans thm
R21271:21271 compcert.lib.Maps <> ::x_'!'_x not
R21266:21269 compcert.backend.Kildall Dataflow_Solver aval proj
R21271:21271 compcert.lib.Maps <> ::x_'!'_x not
R21266:21269 compcert.backend.Kildall Dataflow_Solver aval proj
prf 21372:21388 Dataflow_Solver step_state_good_2
R21496:21505 compcert.backend.Kildall Dataflow_Solver good_state rec
R21508:21514 compcert.backend.Kildall Dataflow_Solver mkstate constr
R21534:21540 compcert.backend.Kildall Dataflow_Solver visited proj
R21530:21531 compcert.backend.Kildall <> st var
R21526:21528 compcert.backend.Kildall <> rem var
R21520:21523 compcert.backend.Kildall Dataflow_Solver aval proj
R21516:21517 compcert.backend.Kildall <> st var
R21483:21485 Coq.Init.Logic <> :type_scope:x_'='_x not
R21480:21480 compcert.lib.Maps <> ::x_'!'_x not
R21481:21482 compcert.backend.Kildall <> pc var
R21476:21479 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R21486:21489 Coq.Init.Datatypes <> None constr
R21453:21455 Coq.Init.Logic <> :type_scope:x_'='_x not
R21432:21438 compcert.backend.Kildall NS pick defax
R21441:21448 compcert.backend.Kildall Dataflow_Solver worklist proj
R21450:21451 compcert.backend.Kildall <> st var
R21456:21459 Coq.Init.Datatypes <> Some constr
R21461:21461 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21464:21465 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21469:21469 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R21462:21463 compcert.backend.Kildall <> pc var
R21466:21468 compcert.backend.Kildall <> rem var
R21413:21422 compcert.backend.Kildall Dataflow_Solver good_state rec
R21424:21425 compcert.backend.Kildall <> st var
R21618:21629 compcert.backend.Kildall NS pick_some prfax
R21618:21629 compcert.backend.Kildall NS pick_some prfax
prf 21898:21913 Dataflow_Solver steps_state_good
R21969:21978 compcert.backend.Kildall Dataflow_Solver good_state rec
R21980:21982 compcert.backend.Kildall <> st2 var
R21951:21960 compcert.backend.Kildall Dataflow_Solver good_state rec
R21962:21964 compcert.backend.Kildall <> st1 var
R21934:21938 compcert.backend.Kildall Dataflow_Solver steps ind
R21944:21946 compcert.backend.Kildall <> st2 var
R21940:21942 compcert.backend.Kildall <> st1 var
R22033:22036 compcert.backend.Kildall Dataflow_Solver step def
R22056:22062 compcert.backend.Kildall NS pick defax
R22065:22072 compcert.backend.Kildall Dataflow_Solver worklist proj
R22056:22062 compcert.backend.Kildall NS pick defax
R22065:22072 compcert.backend.Kildall Dataflow_Solver worklist proj
R22139:22139 compcert.lib.Maps <> ::x_'!'_x not
R22135:22138 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R22139:22139 compcert.lib.Maps <> ::x_'!'_x not
R22135:22138 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R22181:22195 compcert.backend.Kildall Dataflow_Solver step_state_good thm
R22181:22195 compcert.backend.Kildall Dataflow_Solver step_state_good thm
R22215:22231 compcert.backend.Kildall Dataflow_Solver step_state_good_2 thm
R22215:22231 compcert.backend.Kildall Dataflow_Solver step_state_good_2 thm
prf 22312:22327 Dataflow_Solver start_state_good
R22351:22360 compcert.backend.Kildall Dataflow_Solver good_state rec
R22363:22373 compcert.backend.Kildall Dataflow_Solver start_state def
R22381:22384 compcert.backend.Kildall <> eval var
R22375:22379 compcert.backend.Kildall <> enode var
R22412:22422 compcert.backend.Kildall Dataflow_Solver start_state def
R22473:22483 compcert.backend.Kildall NS add_spec prfax
R22473:22483 compcert.backend.Kildall NS add_spec prfax
R22503:22514 compcert.lib.Maps PTree gsspec thm
R22503:22514 compcert.lib.Maps PTree gsspec thm
R22530:22541 compcert.lib.Maps PTree gempty thm
R22530:22541 compcert.lib.Maps PTree gempty thm
R22561:22563 compcert.lib.Coqlib <> peq def
R22561:22563 compcert.lib.Coqlib <> peq def
prf 22607:22630 Dataflow_Solver start_state_nodeset_good
R22650:22659 compcert.backend.Kildall Dataflow_Solver good_state rec
R22662:22680 compcert.backend.Kildall Dataflow_Solver start_state_nodeset def
R22682:22687 compcert.backend.Kildall <> enodes var
R22715:22733 compcert.backend.Kildall Dataflow_Solver start_state_nodeset def
R22788:22799 compcert.lib.Maps PTree gempty thm
R22788:22799 compcert.lib.Maps PTree gempty thm
prf 22831:22855 Dataflow_Solver start_state_allnodes_good
R22860:22869 compcert.backend.Kildall Dataflow_Solver good_state rec
R22871:22890 compcert.backend.Kildall Dataflow_Solver start_state_allnodes def
R22909:22928 compcert.backend.Kildall Dataflow_Solver start_state_allnodes def
R23002:23018 compcert.backend.Kildall NS all_nodes_spec prfax
R23002:23018 compcert.backend.Kildall NS all_nodes_spec prfax
R23039:23050 compcert.lib.Maps PTree gempty thm
R23039:23050 compcert.lib.Maps PTree gempty thm
prf 23120:23136 Dataflow_Solver reachable_visited
R23270:23276 compcert.backend.Kildall Dataflow_Solver visited proj
R23279:23279 compcert.backend.Kildall <> q var
R23266:23267 compcert.backend.Kildall <> st var
R23252:23258 compcert.backend.Kildall Dataflow_Solver visited proj
R23261:23261 compcert.backend.Kildall <> p var
R23248:23249 compcert.backend.Kildall <> st var
R23215:23223 compcert.backend.Kildall Dataflow_Solver reachable ind
R23243:23243 compcert.backend.Kildall <> q var
R23241:23241 compcert.backend.Kildall <> p var
R23230:23239 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R23225:23228 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R23190:23192 Coq.Init.Logic <> :type_scope:x_'='_x not
R23169:23175 compcert.backend.Kildall NS pick defax
R23181:23188 compcert.backend.Kildall Dataflow_Solver worklist proj
R23177:23178 compcert.backend.Kildall <> st var
R23193:23196 Coq.Init.Datatypes <> None constr
R23152:23161 compcert.backend.Kildall Dataflow_Solver good_state rec
R23163:23164 compcert.backend.Kildall <> st var
R23429:23440 compcert.backend.Kildall NS pick_none prfax
R23429:23440 compcert.backend.Kildall NS pick_none prfax
prf 23795:23811 Dataflow_Solver fixpoint_solution
R23976:23979 compcert.backend.Kildall Dataflow_Solver.L ge defax
R23989:23994 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R24001:24002 compcert.lib.Maps <> ::x_'!!'_x not
R24003:24003 compcert.backend.Kildall <> n var
R23998:24000 compcert.backend.Kildall <> res var
R23996:23996 compcert.backend.Kildall <> n var
R23984:23985 compcert.lib.Maps <> ::x_'!!'_x not
R23986:23986 compcert.backend.Kildall <> s var
R23981:23983 compcert.backend.Kildall <> res var
R23942:23945 compcert.backend.Kildall Dataflow_Solver.L eq defax
R23964:23968 compcert.backend.Kildall Dataflow_Solver.L bot defax
R23948:23953 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R23957:23961 compcert.backend.Kildall Dataflow_Solver.L bot defax
R23955:23955 compcert.backend.Kildall <> n var
R23902:23903 Coq.Lists.List <> In def
R23908:23917 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R23919:23923 compcert.backend.Kildall <> instr var
R23905:23905 compcert.backend.Kildall <> s var
R23883:23885 Coq.Init.Logic <> :type_scope:x_'='_x not
R23881:23881 compcert.lib.Maps <> ::x_'!'_x not
R23882:23882 compcert.backend.Kildall <> n var
R23877:23880 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R23886:23889 Coq.Init.Datatypes <> Some constr
R23891:23895 compcert.backend.Kildall <> instr var
R23860:23862 Coq.Init.Logic <> :type_scope:x_'='_x not
R23846:23853 compcert.backend.Kildall Dataflow_Solver fixpoint def
R23858:23859 compcert.backend.Kildall <> ev var
R23855:23856 compcert.backend.Kildall <> ep var
R23863:23866 Coq.Init.Datatypes <> Some constr
R23868:23870 compcert.backend.Kildall <> res var
R24023:24030 compcert.backend.Kildall Dataflow_Solver fixpoint def
R24052:24072 compcert.backend.Kildall Dataflow_Solver fixpoint_from_charact thm
R24126:24141 compcert.backend.Kildall Dataflow_Solver steps_state_good thm
R24157:24172 compcert.backend.Kildall Dataflow_Solver start_state_good thm
R24157:24172 compcert.backend.Kildall Dataflow_Solver start_state_good thm
R24219:24226 compcert.lib.Maps PMap get def
R24256:24256 compcert.lib.Maps <> ::x_'!'_x not
R24251:24254 compcert.backend.Kildall Dataflow_Solver aval proj
R24256:24256 compcert.lib.Maps <> ::x_'!'_x not
R24251:24254 compcert.backend.Kildall Dataflow_Solver aval proj
R24323:24334 compcert.backend.Kildall NS pick_none prfax
R24323:24334 compcert.backend.Kildall NS pick_none prfax
R24372:24382 compcert.backend.Kildall Dataflow_Solver abstr_value def
R24449:24453 compcert.backend.Kildall Dataflow_Solver.L bot defax
R24433:24442 compcert.backend.Kildall Dataflow_Solver.L ge_trans prfax
R24449:24453 compcert.backend.Kildall Dataflow_Solver.L bot defax
R24433:24442 compcert.backend.Kildall Dataflow_Solver.L ge_trans prfax
R24462:24469 compcert.backend.Kildall Dataflow_Solver.L ge_bot prfax
R24462:24469 compcert.backend.Kildall Dataflow_Solver.L ge_bot prfax
R24478:24486 compcert.backend.Kildall Dataflow_Solver.L ge_refl prfax
R24478:24486 compcert.backend.Kildall Dataflow_Solver.L ge_refl prfax
R24495:24502 compcert.backend.Kildall Dataflow_Solver.L eq_sym prfax
R24495:24502 compcert.backend.Kildall Dataflow_Solver.L eq_sym prfax
prf 24646:24659 Dataflow_Solver fixpoint_entry
R24715:24718 compcert.backend.Kildall Dataflow_Solver.L ge defax
R24728:24729 compcert.backend.Kildall <> ev var
R24723:24724 compcert.lib.Maps <> ::x_'!!'_x not
R24725:24726 compcert.backend.Kildall <> ep var
R24720:24722 compcert.backend.Kildall <> res var
R24698:24700 Coq.Init.Logic <> :type_scope:x_'='_x not
R24684:24691 compcert.backend.Kildall Dataflow_Solver fixpoint def
R24696:24697 compcert.backend.Kildall <> ev var
R24693:24694 compcert.backend.Kildall <> ep var
R24701:24704 Coq.Init.Datatypes <> Some constr
R24706:24708 compcert.backend.Kildall <> res var
R24748:24755 compcert.backend.Kildall Dataflow_Solver fixpoint def
R24777:24797 compcert.backend.Kildall Dataflow_Solver fixpoint_from_charact thm
R24852:24861 compcert.backend.Kildall Dataflow_Solver steps_incr thm
R24852:24861 compcert.backend.Kildall Dataflow_Solver steps_incr thm
R24890:24898 compcert.lib.Maps PTree gss thm
R24890:24898 compcert.lib.Maps PTree gss thm
R24938:24945 compcert.lib.Maps PMap get def
prf 25099:25124 Dataflow_Solver fixpoint_allnodes_solution
R25241:25244 compcert.backend.Kildall Dataflow_Solver.L ge defax
R25254:25259 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R25266:25267 compcert.lib.Maps <> ::x_'!!'_x not
R25268:25268 compcert.backend.Kildall <> n var
R25263:25265 compcert.backend.Kildall <> res var
R25261:25261 compcert.backend.Kildall <> n var
R25249:25250 compcert.lib.Maps <> ::x_'!!'_x not
R25251:25251 compcert.backend.Kildall <> s var
R25246:25248 compcert.backend.Kildall <> res var
R25212:25213 Coq.Lists.List <> In def
R25218:25227 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R25229:25233 compcert.backend.Kildall <> instr var
R25215:25215 compcert.backend.Kildall <> s var
R25193:25195 Coq.Init.Logic <> :type_scope:x_'='_x not
R25191:25191 compcert.lib.Maps <> ::x_'!'_x not
R25192:25192 compcert.backend.Kildall <> n var
R25187:25190 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R25196:25199 Coq.Init.Datatypes <> Some constr
R25201:25205 compcert.backend.Kildall <> instr var
R25170:25172 Coq.Init.Logic <> :type_scope:x_'='_x not
R25153:25169 compcert.backend.Kildall Dataflow_Solver fixpoint_allnodes def
R25173:25176 Coq.Init.Datatypes <> Some constr
R25178:25180 compcert.backend.Kildall <> res var
R25288:25304 compcert.backend.Kildall Dataflow_Solver fixpoint_allnodes def
R25326:25346 compcert.backend.Kildall Dataflow_Solver fixpoint_from_charact thm
R25400:25415 compcert.backend.Kildall Dataflow_Solver steps_state_good thm
R25431:25455 compcert.backend.Kildall Dataflow_Solver start_state_allnodes_good thm
R25431:25455 compcert.backend.Kildall Dataflow_Solver start_state_allnodes_good thm
R25491:25500 compcert.backend.Kildall Dataflow_Solver steps_incr thm
R25491:25500 compcert.backend.Kildall Dataflow_Solver steps_incr thm
R25606:25617 compcert.backend.Kildall NS pick_none prfax
R25606:25617 compcert.backend.Kildall NS pick_none prfax
R25680:25687 compcert.lib.Maps PMap get def
prf 25876:25900 Dataflow_Solver fixpoint_nodeset_solution
R26087:26090 compcert.backend.Kildall Dataflow_Solver.L ge defax
R26100:26105 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R26112:26113 compcert.lib.Maps <> ::x_'!!'_x not
R26114:26114 compcert.backend.Kildall <> n var
R26109:26111 compcert.backend.Kildall <> res var
R26107:26107 compcert.backend.Kildall <> n var
R26095:26096 compcert.lib.Maps <> ::x_'!!'_x not
R26097:26097 compcert.backend.Kildall <> s var
R26092:26094 compcert.backend.Kildall <> res var
R26058:26059 Coq.Lists.List <> In def
R26064:26073 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R26075:26079 compcert.backend.Kildall <> instr var
R26061:26061 compcert.backend.Kildall <> s var
R26039:26041 Coq.Init.Logic <> :type_scope:x_'='_x not
R26037:26037 compcert.lib.Maps <> ::x_'!'_x not
R26038:26038 compcert.backend.Kildall <> n var
R26033:26036 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R26042:26045 Coq.Init.Datatypes <> Some constr
R26047:26051 compcert.backend.Kildall <> instr var
R25998:26006 compcert.backend.Kildall Dataflow_Solver reachable ind
R26026:26026 compcert.backend.Kildall <> n var
R26024:26024 compcert.backend.Kildall <> e var
R26013:26022 compcert.backend.Kildall <> Dataflow_Solver.Kildall.successors var
R26008:26011 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R25978:25982 compcert.backend.Kildall NS In defax
R25986:25991 compcert.backend.Kildall <> enodes var
R25984:25984 compcert.backend.Kildall <> e var
R25961:25963 Coq.Init.Logic <> :type_scope:x_'='_x not
R25938:25953 compcert.backend.Kildall Dataflow_Solver fixpoint_nodeset def
R25955:25960 compcert.backend.Kildall <> enodes var
R25964:25967 Coq.Init.Datatypes <> Some constr
R25969:25971 compcert.backend.Kildall <> res var
R26134:26149 compcert.backend.Kildall Dataflow_Solver fixpoint_nodeset def
R26171:26191 compcert.backend.Kildall Dataflow_Solver fixpoint_from_charact thm
R26245:26260 compcert.backend.Kildall Dataflow_Solver steps_state_good thm
R26276:26299 compcert.backend.Kildall Dataflow_Solver start_state_nodeset_good thm
R26276:26299 compcert.backend.Kildall Dataflow_Solver start_state_nodeset_good thm
R26326:26335 compcert.backend.Kildall Dataflow_Solver steps_incr thm
R26326:26335 compcert.backend.Kildall Dataflow_Solver steps_incr thm
R26384:26390 compcert.backend.Kildall Dataflow_Solver visited proj
R26384:26390 compcert.backend.Kildall Dataflow_Solver visited proj
R26409:26425 compcert.backend.Kildall Dataflow_Solver reachable_visited thm
R26409:26425 compcert.backend.Kildall Dataflow_Solver reachable_visited thm
R26521:26532 compcert.backend.Kildall NS pick_none prfax
R26521:26532 compcert.backend.Kildall NS pick_none prfax
R26595:26602 compcert.lib.Maps PMap get def
prf 26702:26719 Dataflow_Solver fixpoint_invariant
R26745:26747 compcert.backend.Kildall Dataflow_Solver.L t defax
R26770:26770 compcert.backend.Kildall <> P var
R26772:26776 compcert.backend.Kildall Dataflow_Solver.L bot defax
R26817:26817 compcert.backend.Kildall <> P var
R26820:26824 compcert.backend.Kildall Dataflow_Solver.L lub defax
R26828:26828 compcert.backend.Kildall <> y var
R26826:26826 compcert.backend.Kildall <> x var
R26810:26810 compcert.backend.Kildall <> P var
R26812:26812 compcert.backend.Kildall <> y var
R26803:26803 compcert.backend.Kildall <> P var
R26805:26805 compcert.backend.Kildall <> x var
R26897:26897 compcert.backend.Kildall <> P var
R26900:26905 compcert.backend.Kildall <> Dataflow_Solver.Kildall.transf var
R26910:26910 compcert.backend.Kildall <> x var
R26907:26908 compcert.backend.Kildall <> pc var
R26890:26890 compcert.backend.Kildall <> P var
R26892:26892 compcert.backend.Kildall <> x var
R26873:26875 Coq.Init.Logic <> :type_scope:x_'='_x not
R26870:26870 compcert.lib.Maps <> ::x_'!'_x not
R26871:26872 compcert.backend.Kildall <> pc var
R26866:26869 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R26876:26879 Coq.Init.Datatypes <> Some constr
R26881:26885 compcert.backend.Kildall <> instr var
R26933:26933 compcert.backend.Kildall <> P var
R26935:26936 compcert.backend.Kildall <> ev var
R26984:26984 compcert.backend.Kildall <> P var
R26989:26990 compcert.lib.Maps <> ::x_'!!'_x not
R26991:26992 compcert.backend.Kildall <> pc var
R26986:26988 compcert.backend.Kildall <> res var
R26967:26969 Coq.Init.Logic <> :type_scope:x_'='_x not
R26953:26960 compcert.backend.Kildall Dataflow_Solver fixpoint def
R26965:26966 compcert.backend.Kildall <> ev var
R26962:26963 compcert.backend.Kildall <> ep var
R26970:26973 Coq.Init.Datatypes <> Some constr
R26975:26977 compcert.backend.Kildall <> res var
R27049:27059 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27063:27064 compcert.backend.Kildall <> st var
R27061:27061 compcert.backend.Kildall <> x var
R27049:27059 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27063:27064 compcert.backend.Kildall <> st var
R27061:27061 compcert.backend.Kildall <> x var
R27084:27094 compcert.backend.Kildall Dataflow_Solver start_state def
R27084:27094 compcert.backend.Kildall Dataflow_Solver start_state def
R27140:27150 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27153:27163 compcert.backend.Kildall Dataflow_Solver start_state def
R27185:27196 compcert.lib.Maps PTree gsspec thm
R27185:27196 compcert.lib.Maps PTree gsspec thm
R27207:27218 compcert.lib.Maps PTree gempty thm
R27207:27218 compcert.lib.Maps PTree gempty thm
R27236:27238 compcert.lib.Coqlib <> peq def
R27236:27238 compcert.lib.Coqlib <> peq def
R27311:27324 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R27331:27331 compcert.backend.Kildall <> n var
R27329:27329 compcert.backend.Kildall <> v var
R27326:27327 compcert.backend.Kildall <> st var
R27301:27301 compcert.backend.Kildall <> v var
R27293:27294 compcert.backend.Kildall <> st var
R27311:27324 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R27331:27331 compcert.backend.Kildall <> n var
R27329:27329 compcert.backend.Kildall <> v var
R27326:27327 compcert.backend.Kildall <> st var
R27301:27301 compcert.backend.Kildall <> v var
R27293:27294 compcert.backend.Kildall <> st var
R27356:27369 compcert.backend.Kildall Dataflow_Solver propagate_succ def
R27393:27393 compcert.lib.Maps <> ::x_'!'_x not
R27401:27402 compcert.lib.Maps <> ::x_'!'_x not
R27394:27397 compcert.backend.Kildall Dataflow_Solver aval proj
R27393:27393 compcert.lib.Maps <> ::x_'!'_x not
R27401:27402 compcert.lib.Maps <> ::x_'!'_x not
R27394:27397 compcert.backend.Kildall Dataflow_Solver aval proj
R27437:27441 compcert.backend.Kildall Dataflow_Solver.L beq defax
R27449:27453 compcert.backend.Kildall Dataflow_Solver.L lub defax
R27437:27441 compcert.backend.Kildall Dataflow_Solver.L beq defax
R27449:27453 compcert.backend.Kildall Dataflow_Solver.L lub defax
R27486:27496 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27514:27525 compcert.lib.Maps PTree gsspec thm
R27514:27525 compcert.lib.Maps PTree gsspec thm
R27538:27540 compcert.lib.Coqlib <> peq def
R27538:27540 compcert.lib.Coqlib <> peq def
R27591:27601 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27591:27601 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27628:27638 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27685:27695 compcert.backend.Kildall Dataflow_Solver abstr_value def
R27713:27724 compcert.lib.Maps PTree gsspec thm
R27713:27724 compcert.lib.Maps PTree gsspec thm
R27737:27739 compcert.lib.Coqlib <> peq def
R27737:27739 compcert.lib.Coqlib <> peq def
R27823:27841 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R27848:27848 compcert.backend.Kildall <> l var
R27846:27846 compcert.backend.Kildall <> v var
R27843:27844 compcert.backend.Kildall <> st var
R27813:27813 compcert.backend.Kildall <> v var
R27805:27806 compcert.backend.Kildall <> st var
R27823:27841 compcert.backend.Kildall Dataflow_Solver propagate_succ_list def
R27848:27848 compcert.backend.Kildall <> l var
R27846:27846 compcert.backend.Kildall <> v var
R27843:27844 compcert.backend.Kildall <> st var
R27813:27813 compcert.backend.Kildall <> v var
R27805:27806 compcert.backend.Kildall <> st var
R27978:27980 compcert.backend.Kildall <> st2 var
R27967:27969 compcert.backend.Kildall <> st1 var
R27946:27950 compcert.backend.Kildall Dataflow_Solver steps ind
R27956:27958 compcert.backend.Kildall <> st2 var
R27952:27954 compcert.backend.Kildall <> st1 var
R27978:27980 compcert.backend.Kildall <> st2 var
R27967:27969 compcert.backend.Kildall <> st1 var
R27946:27950 compcert.backend.Kildall Dataflow_Solver steps ind
R27956:27958 compcert.backend.Kildall <> st2 var
R27952:27954 compcert.backend.Kildall <> st1 var
R28034:28037 compcert.backend.Kildall Dataflow_Solver step def
R28055:28061 compcert.backend.Kildall NS pick defax
R28064:28071 compcert.backend.Kildall Dataflow_Solver worklist proj
R28055:28061 compcert.backend.Kildall NS pick defax
R28064:28071 compcert.backend.Kildall Dataflow_Solver worklist proj
R28129:28129 compcert.lib.Maps <> ::x_'!'_x not
R28125:28128 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R28129:28129 compcert.lib.Maps <> ::x_'!'_x not
R28125:28128 compcert.backend.Kildall <> Dataflow_Solver.Kildall.code var
R28282:28289 compcert.backend.Kildall Dataflow_Solver fixpoint def
R28305:28325 compcert.backend.Kildall Dataflow_Solver fixpoint_from_charact thm
R28387:28388 compcert.lib.Maps <> ::x_'!!'_x not
R28399:28409 compcert.backend.Kildall Dataflow_Solver abstr_value def
R28399:28409 compcert.backend.Kildall Dataflow_Solver abstr_value def
R28387:28388 compcert.lib.Maps <> ::x_'!!'_x not
R28470:28476 compcert.backend.Kildall Dataflow_Solver.Kildall <> sec
R28484:28498 compcert.backend.Kildall Dataflow_Solver <> mod
def 28913:28927 <> successors_list
R28942:28948 compcert.lib.Maps PTree t def
R28951:28954 Coq.Init.Datatypes <> list ind
R28956:28963 Coq.Numbers.BinNums <> positive ind
R28972:28979 Coq.Numbers.BinNums <> positive ind
R28984:28987 Coq.Init.Datatypes <> list ind
R28989:28996 Coq.Numbers.BinNums <> positive ind
R29019:29019 compcert.lib.Maps <> ::x_'!'_x not
R29020:29021 compcert.backend.Kildall <> pc var
R29009:29018 compcert.backend.Kildall <> successors var
R29028:29031 Coq.Init.Datatypes <> None constr
R29036:29038 Coq.Init.Datatypes <> nil constr
R29042:29045 Coq.Init.Datatypes <> Some constr
R29083:29097 compcert.backend.Kildall <> successors_list def
not 29069 <> ::x_'!!!'_x
sec 29127:29137 <> Predecessor
var 29169:29172 Predecessor code
R29175:29181 compcert.lib.Maps PTree t def
R29183:29183 compcert.backend.Kildall <> Predecessor.A var
var 29195:29204 Predecessor successors
R29212:29215 Coq.Init.Datatypes <> list ind
R29217:29224 Coq.Numbers.BinNums <> positive ind
R29207:29207 compcert.backend.Kildall <> Predecessor.A var
def 29237:29250 <> add_successors
R29259:29265 compcert.lib.Maps PTree t def
R29268:29271 Coq.Init.Datatypes <> list ind
R29273:29280 Coq.Numbers.BinNums <> positive ind
R29315:29322 Coq.Numbers.BinNums <> positive ind
R29334:29337 Coq.Init.Datatypes <> list ind
R29339:29346 Coq.Numbers.BinNums <> positive ind
R29391:29397 compcert.lib.Maps PTree t def
R29400:29403 Coq.Init.Datatypes <> list ind
R29405:29412 Coq.Numbers.BinNums <> positive ind
R29426:29431 compcert.backend.Kildall <> tolist var
R29442:29444 Coq.Init.Datatypes <> nil constr
R29449:29452 compcert.backend.Kildall <> pred var
R29460:29463 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R29471:29484 compcert.backend.Kildall <> add_successors def
R29526:29529 compcert.backend.Kildall <> from var
R29487:29495 compcert.lib.Maps PTree set def
R29520:29523 compcert.backend.Kildall <> pred var
R29505:29508 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R29501:29504 compcert.backend.Kildall <> from var
R29513:29515 compcert.backend.Kildall <> ::x_'!!!'_x not
R29509:29512 compcert.backend.Kildall <> pred var
prf 29549:29570 <> add_successors_correct
R29655:29656 Coq.Lists.List <> In def
R29660:29660 compcert.backend.Kildall <> ::x_'!!!'_x not
R29692:29695 compcert.backend.Kildall <> ::x_'!!!'_x not
R29661:29674 compcert.backend.Kildall <> add_successors def
R29686:29691 compcert.backend.Kildall <> tolist var
R29681:29684 compcert.backend.Kildall <> from var
R29676:29679 compcert.backend.Kildall <> pred var
R29696:29696 compcert.backend.Kildall <> s var
R29658:29658 compcert.backend.Kildall <> n var
R29619:29623 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R29647:29647 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R29606:29607 Coq.Lists.List <> In def
R29615:29617 compcert.backend.Kildall <> ::x_'!!!'_x not
R29611:29614 compcert.backend.Kildall <> pred var
R29618:29618 compcert.backend.Kildall <> s var
R29609:29609 compcert.backend.Kildall <> n var
R29632:29635 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R29625:29627 Coq.Init.Logic <> :type_scope:x_'='_x not
R29624:29624 compcert.backend.Kildall <> n var
R29628:29631 compcert.backend.Kildall <> from var
R29636:29637 Coq.Lists.List <> In def
R29641:29646 compcert.backend.Kildall <> tolist var
R29639:29639 compcert.backend.Kildall <> s var
R0:-1 compcert.backend.Kildall <> y var
R29777:29791 compcert.backend.Kildall <> successors_list def
R29807:29818 compcert.lib.Maps PTree gsspec thm
R29807:29818 compcert.lib.Maps PTree gsspec thm
R29831:29833 compcert.lib.Coqlib <> peq def
R29831:29833 compcert.lib.Coqlib <> peq def
R29933:29947 compcert.backend.Kildall <> successors_list def
R29933:29947 compcert.backend.Kildall <> successors_list def
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
def 29997:30013 <> make_predecessors
R30017:30023 compcert.lib.Maps PTree t def
R30026:30029 Coq.Init.Datatypes <> list ind
R30031:30038 Coq.Numbers.BinNums <> positive ind
R30046:30055 compcert.lib.Maps PTree fold def
R30141:30151 compcert.lib.Maps PTree empty def
R30154:30157 Coq.Init.Datatypes <> list ind
R30159:30166 Coq.Numbers.BinNums <> positive ind
R30135:30138 compcert.backend.Kildall <> Predecessor.code var
R30079:30092 compcert.backend.Kildall <> add_successors def
R30103:30112 compcert.backend.Kildall <> Predecessor.successors var
R30114:30118 compcert.backend.Kildall <> instr var
R30099:30100 compcert.backend.Kildall <> pc var
R30094:30097 compcert.backend.Kildall <> pred var
prf 30178:30204 <> make_predecessors_correct_1
R30281:30282 Coq.Lists.List <> In def
R30303:30305 compcert.backend.Kildall <> ::x_'!!!'_x not
R30286:30302 compcert.backend.Kildall <> make_predecessors def
R30306:30306 compcert.backend.Kildall <> s var
R30284:30284 compcert.backend.Kildall <> n var
R30252:30253 Coq.Lists.List <> In def
R30258:30267 compcert.backend.Kildall <> Predecessor.successors var
R30269:30273 compcert.backend.Kildall <> instr var
R30255:30255 compcert.backend.Kildall <> s var
R30235:30237 Coq.Init.Logic <> :type_scope:x_'='_x not
R30233:30233 compcert.lib.Maps <> ::x_'!'_x not
R30234:30234 compcert.backend.Kildall <> n var
R30229:30232 compcert.backend.Kildall <> Predecessor.code var
R30238:30241 Coq.Init.Datatypes <> Some constr
R30243:30247 compcert.backend.Kildall <> instr var
R30428:30429 Coq.Lists.List <> In def
R30434:30436 compcert.backend.Kildall <> ::x_'!!!'_x not
R30433:30433 compcert.backend.Kildall <> p var
R30378:30379 Coq.Lists.List <> In def
R30384:30393 compcert.backend.Kildall <> Predecessor.successors var
R30361:30363 Coq.Init.Logic <> :type_scope:x_'='_x not
R30359:30359 compcert.lib.Maps <> ::x_'!'_x not
R30358:30358 compcert.backend.Kildall <> m var
R30364:30367 Coq.Init.Datatypes <> Some constr
R30428:30429 Coq.Lists.List <> In def
R30434:30436 compcert.backend.Kildall <> ::x_'!!!'_x not
R30433:30433 compcert.backend.Kildall <> p var
R30378:30379 Coq.Lists.List <> In def
R30384:30393 compcert.backend.Kildall <> Predecessor.successors var
R30361:30363 Coq.Init.Logic <> :type_scope:x_'='_x not
R30359:30359 compcert.lib.Maps <> ::x_'!'_x not
R30358:30358 compcert.backend.Kildall <> m var
R30364:30367 Coq.Init.Datatypes <> Some constr
R30450:30466 compcert.backend.Kildall <> make_predecessors def
R30477:30501 compcert.lib.Maps PTree_Properties fold_rec thm
R30477:30501 compcert.lib.Maps PTree_Properties fold_rec thm
R30618:30629 compcert.lib.Maps PTree gempty thm
R30618:30629 compcert.lib.Maps PTree gempty thm
R30678:30699 compcert.backend.Kildall <> add_successors_correct thm
R30678:30699 compcert.backend.Kildall <> add_successors_correct thm
R30712:30723 compcert.lib.Maps PTree gsspec thm
R30712:30723 compcert.lib.Maps PTree gsspec thm
R30742:30744 compcert.lib.Coqlib <> peq def
R30742:30744 compcert.lib.Coqlib <> peq def
prf 30789:30815 <> make_predecessors_correct_2
R30892:30898 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R30900:30901 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R30930:30933 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R30921:30923 Coq.Init.Logic <> :type_scope:x_'='_x not
R30919:30919 compcert.lib.Maps <> ::x_'!'_x not
R30920:30920 compcert.backend.Kildall <> s var
R30902:30918 compcert.backend.Kildall <> make_predecessors def
R30924:30927 Coq.Init.Datatypes <> Some constr
R30929:30929 compcert.backend.Kildall <> l var
R30934:30935 Coq.Lists.List <> In def
R30939:30939 compcert.backend.Kildall <> l var
R30937:30937 compcert.backend.Kildall <> n var
R30863:30864 Coq.Lists.List <> In def
R30869:30878 compcert.backend.Kildall <> Predecessor.successors var
R30880:30884 compcert.backend.Kildall <> instr var
R30866:30866 compcert.backend.Kildall <> s var
R30846:30848 Coq.Init.Logic <> :type_scope:x_'='_x not
R30844:30844 compcert.lib.Maps <> ::x_'!'_x not
R30845:30845 compcert.backend.Kildall <> n var
R30840:30843 compcert.backend.Kildall <> Predecessor.code var
R30849:30852 Coq.Init.Datatypes <> Some constr
R30854:30858 compcert.backend.Kildall <> instr var
R30967:30993 compcert.backend.Kildall <> make_predecessors_correct_1 thm
R31013:31027 compcert.backend.Kildall <> successors_list def
R31057:31057 compcert.lib.Maps <> ::x_'!'_x not
R31040:31056 compcert.backend.Kildall <> make_predecessors def
R31057:31057 compcert.lib.Maps <> ::x_'!'_x not
R31040:31056 compcert.backend.Kildall <> make_predecessors def
prf 31124:31145 <> reachable_predecessors
R31199:31207 compcert.backend.Kildall <> reachable ind
R31242:31242 compcert.backend.Kildall <> p var
R31240:31240 compcert.backend.Kildall <> q var
R31237:31237 compcert.backend.Kildall <> l var
R31209:31225 compcert.backend.Kildall <> make_predecessors def
R31164:31172 compcert.backend.Kildall <> reachable ind
R31192:31192 compcert.backend.Kildall <> q var
R31190:31190 compcert.backend.Kildall <> p var
R31179:31188 compcert.backend.Kildall <> Predecessor.successors var
R31174:31177 compcert.backend.Kildall <> Predecessor.code var
R31293:31319 compcert.backend.Kildall <> make_predecessors_correct_2 thm
R31357:31371 compcert.backend.Kildall <> reachable_right thm
R31357:31371 compcert.backend.Kildall <> reachable_right thm
R31392:31402 compcert.backend.Kildall Predecessor <> sec
modtype 31531:31554 <> BACKWARD_DATAFLOW_SOLVER
R31578:31588 compcert.lib.Lattice SEMILATTICE <> mod
mod 31575:31575 <> BACKWARD_DATAFLOW_SOLVER.L
var 31910:31917 BACKWARD_DATAFLOW_SOLVER fixpoint
R31948:31954 compcert.lib.Maps PTree t def
R31956:31956 compcert.backend.Kildall <> A var
R31977:31980 Coq.Init.Datatypes <> list ind
R31982:31989 Coq.Numbers.BinNums <> positive ind
R31972:31972 compcert.backend.Kildall <> A var
R32031:32033 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L t defax
R32024:32026 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L t defax
R32012:32019 Coq.Numbers.BinNums <> positive ind
R32041:32046 Coq.Init.Datatypes <> option ind
R32049:32054 compcert.lib.Maps PMap t def
R32056:32058 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L t defax
var 32209:32225 BACKWARD_DATAFLOW_SOLVER fixpoint_solution
R32248:32254 compcert.lib.Maps PTree t def
R32256:32256 compcert.backend.Kildall <> A var
R32462:32465 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L ge defax
R32475:32480 compcert.backend.Kildall <> transf var
R32487:32488 compcert.lib.Maps <> ::x_'!!'_x not
R32489:32489 compcert.backend.Kildall <> s var
R32484:32486 compcert.backend.Kildall <> res var
R32482:32482 compcert.backend.Kildall <> s var
R32470:32471 compcert.lib.Maps <> ::x_'!!'_x not
R32472:32472 compcert.backend.Kildall <> n var
R32467:32469 compcert.backend.Kildall <> res var
R32430:32433 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L eq defax
R32448:32452 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L bot defax
R32436:32441 compcert.backend.Kildall <> transf var
R32445:32445 compcert.backend.Kildall <> a var
R32443:32443 compcert.backend.Kildall <> n var
R32419:32421 Coq.Init.Logic <> :type_scope:x_'='_x not
R32417:32417 compcert.lib.Maps <> ::x_'!'_x not
R32418:32418 compcert.backend.Kildall <> n var
R32413:32416 compcert.backend.Kildall <> code var
R32422:32425 Coq.Init.Datatypes <> None constr
R32369:32370 Coq.Lists.List <> In def
R32375:32384 compcert.backend.Kildall <> successors var
R32386:32390 compcert.backend.Kildall <> instr var
R32372:32372 compcert.backend.Kildall <> s var
R32352:32354 Coq.Init.Logic <> :type_scope:x_'='_x not
R32350:32350 compcert.lib.Maps <> ::x_'!'_x not
R32351:32351 compcert.backend.Kildall <> n var
R32346:32349 compcert.backend.Kildall <> code var
R32355:32358 Coq.Init.Datatypes <> Some constr
R32360:32364 compcert.backend.Kildall <> instr var
R32327:32329 Coq.Init.Logic <> :type_scope:x_'='_x not
R32296:32303 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER fixpoint defax
R32321:32326 compcert.backend.Kildall <> transf var
R32310:32319 compcert.backend.Kildall <> successors var
R32305:32308 compcert.backend.Kildall <> code var
R32330:32333 Coq.Init.Datatypes <> Some constr
R32335:32337 compcert.backend.Kildall <> res var
var 32660:32676 BACKWARD_DATAFLOW_SOLVER fixpoint_allnodes
R32707:32713 compcert.lib.Maps PTree t def
R32715:32715 compcert.backend.Kildall <> A var
R32736:32739 Coq.Init.Datatypes <> list ind
R32741:32748 Coq.Numbers.BinNums <> positive ind
R32731:32731 compcert.backend.Kildall <> A var
R32790:32792 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L t defax
R32783:32785 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L t defax
R32771:32778 Coq.Numbers.BinNums <> positive ind
R32800:32805 Coq.Init.Datatypes <> option ind
R32808:32813 compcert.lib.Maps PMap t def
R32815:32817 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L t defax
var 32835:32860 BACKWARD_DATAFLOW_SOLVER fixpoint_allnodes_solution
R32883:32889 compcert.lib.Maps PTree t def
R32891:32891 compcert.backend.Kildall <> A var
R33044:33047 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER.L ge defax
R33057:33062 compcert.backend.Kildall <> transf var
R33069:33070 compcert.lib.Maps <> ::x_'!!'_x not
R33071:33071 compcert.backend.Kildall <> s var
R33066:33068 compcert.backend.Kildall <> res var
R33064:33064 compcert.backend.Kildall <> s var
R33052:33053 compcert.lib.Maps <> ::x_'!!'_x not
R33054:33054 compcert.backend.Kildall <> n var
R33049:33051 compcert.backend.Kildall <> res var
R33013:33014 Coq.Lists.List <> In def
R33019:33028 compcert.backend.Kildall <> successors var
R33030:33034 compcert.backend.Kildall <> instr var
R33016:33016 compcert.backend.Kildall <> s var
R32996:32998 Coq.Init.Logic <> :type_scope:x_'='_x not
R32994:32994 compcert.lib.Maps <> ::x_'!'_x not
R32995:32995 compcert.backend.Kildall <> n var
R32990:32993 compcert.backend.Kildall <> code var
R32999:33002 Coq.Init.Datatypes <> Some constr
R33004:33008 compcert.backend.Kildall <> instr var
R32971:32973 Coq.Init.Logic <> :type_scope:x_'='_x not
R32931:32947 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER fixpoint_allnodes defax
R32965:32970 compcert.backend.Kildall <> transf var
R32954:32963 compcert.backend.Kildall <> successors var
R32949:32952 compcert.backend.Kildall <> code var
R32974:32977 Coq.Init.Datatypes <> Some constr
R32979:32981 compcert.backend.Kildall <> res var
R33080:33103 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER <> modtype
R33352:33362 compcert.lib.Lattice SEMILATTICE <> mod
R33370:33377 compcert.backend.Kildall NODE_SET <> mod
R33400:33423 compcert.backend.Kildall BACKWARD_DATAFLOW_SOLVER <> mod
R33442:33444 compcert.backend.Kildall LAT <> modtype
mod 33321:33344 <> Backward_Dataflow_Solver
R33460:33462 compcert.backend.Kildall LAT <> modtype
mod 33455:33455 <> Backward_Dataflow_Solver.L
R33479:33493 compcert.backend.Kildall Dataflow_Solver <> modtype
R33495:33495 compcert.backend.Kildall Backward_Dataflow_Solver.L <> modtype
R33497:33498 compcert.backend.Kildall NS <> modtype
mod 33473:33474 <> Backward_Dataflow_Solver.DS
sec 33510:33516 Backward_Dataflow_Solver Kildall
var 33548:33551 Backward_Dataflow_Solver.Kildall code
R33554:33560 compcert.lib.Maps PTree t def
R33562:33562 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.A var
var 33574:33583 Backward_Dataflow_Solver.Kildall successors
R33591:33594 Coq.Init.Datatypes <> list ind
R33596:33603 Coq.Numbers.BinNums <> positive ind
R33586:33586 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.A var
var 33615:33620 Backward_Dataflow_Solver.Kildall transf
R33642:33644 compcert.backend.Kildall Backward_Dataflow_Solver.L t defax
R33635:33637 compcert.backend.Kildall Backward_Dataflow_Solver.L t defax
R33623:33630 Coq.Numbers.BinNums <> positive ind
sec 33721:33731 Backward_Dataflow_Solver.Kildall Exit_points
def 34309:34323 Backward_Dataflow_Solver sequential_node
R34330:34337 Coq.Numbers.BinNums <> positive ind
R34348:34348 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.A var
R34352:34355 Coq.Init.Datatypes <> bool ind
R34362:34368 Coq.Lists.List <> existsb def
R34449:34458 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.successors var
R34460:34464 compcert.backend.Kildall <> instr var
R34390:34390 compcert.lib.Maps <> ::x_'!'_x not
R34391:34391 compcert.backend.Kildall <> s var
R34386:34389 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R34398:34401 Coq.Init.Datatypes <> None constr
R34406:34410 Coq.Init.Datatypes <> false constr
R34414:34417 Coq.Init.Datatypes <> Some constr
R34424:34426 compcert.lib.Coqlib <> plt def
R34430:34431 compcert.backend.Kildall <> pc var
R34428:34428 compcert.backend.Kildall <> s var
def 34480:34490 Backward_Dataflow_Solver exit_points
R34494:34497 compcert.backend.Kildall NS t defax
R34504:34513 compcert.lib.Maps PTree fold def
R34625:34632 compcert.backend.Kildall NS empty defax
R34620:34623 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R34550:34564 compcert.backend.Kildall Backward_Dataflow_Solver sequential_node def
R34569:34573 compcert.backend.Kildall <> instr var
R34566:34567 compcert.backend.Kildall <> pc var
R34602:34607 compcert.backend.Kildall NS add defax
R34612:34613 compcert.backend.Kildall <> ep var
R34609:34610 compcert.backend.Kildall <> pc var
R34587:34588 compcert.backend.Kildall <> ep var
prf 34642:34660 Backward_Dataflow_Solver exit_points_charact
R34697:34701 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R34678:34682 compcert.backend.Kildall NS In defax
R34686:34696 compcert.backend.Kildall Backward_Dataflow_Solver exit_points def
R34684:34684 compcert.backend.Kildall <> n var
R34702:34708 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R34710:34711 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R34727:34730 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R34718:34720 Coq.Init.Logic <> :type_scope:x_'='_x not
R34716:34716 compcert.lib.Maps <> ::x_'!'_x not
R34717:34717 compcert.backend.Kildall <> n var
R34712:34715 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R34721:34724 Coq.Init.Datatypes <> Some constr
R34726:34726 compcert.backend.Kildall <> i var
R34750:34752 Coq.Init.Logic <> :type_scope:x_'='_x not
R34731:34745 compcert.backend.Kildall Backward_Dataflow_Solver sequential_node def
R34749:34749 compcert.backend.Kildall <> i var
R34747:34747 compcert.backend.Kildall <> n var
R34753:34757 Coq.Init.Datatypes <> false constr
R34786:34796 compcert.backend.Kildall Backward_Dataflow_Solver exit_points def
R34806:34830 compcert.lib.Maps PTree_Properties fold_rec thm
R34806:34830 compcert.lib.Maps PTree_Properties fold_rec thm
R34939:34951 compcert.backend.Kildall NS empty_spec prfax
R34939:34951 compcert.backend.Kildall NS empty_spec prfax
R34997:35008 compcert.lib.Maps PTree gempty thm
R34997:35008 compcert.lib.Maps PTree gempty thm
R35072:35086 compcert.backend.Kildall Backward_Dataflow_Solver sequential_node def
R35072:35086 compcert.backend.Kildall Backward_Dataflow_Solver sequential_node def
R35126:35137 compcert.lib.Maps PTree gsspec thm
R35126:35137 compcert.lib.Maps PTree gsspec thm
R35150:35152 compcert.lib.Coqlib <> peq def
R35150:35152 compcert.lib.Coqlib <> peq def
R0:-1 compcert.backend.Kildall <> y var
R35252:35262 compcert.backend.Kildall NS add_spec prfax
R35252:35262 compcert.backend.Kildall NS add_spec prfax
R35285:35296 compcert.lib.Maps PTree gsspec thm
R35285:35296 compcert.lib.Maps PTree gsspec thm
R35309:35311 compcert.lib.Coqlib <> peq def
R35309:35311 compcert.lib.Coqlib <> peq def
prf 35491:35511 Backward_Dataflow_Solver reachable_exit_points
R35551:35557 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R35559:35560 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R35580:35583 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R35561:35565 compcert.backend.Kildall NS In defax
R35569:35579 compcert.backend.Kildall Backward_Dataflow_Solver exit_points def
R35567:35567 compcert.backend.Kildall <> x var
R35584:35592 compcert.backend.Kildall Backward_Dataflow_Solver reachable ind
R35613:35613 compcert.backend.Kildall <> x var
R35610:35611 compcert.backend.Kildall <> pc var
R35599:35608 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.successors var
R35594:35597 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R35538:35540 Coq.Init.Logic <> :type_scope:x_'='_x not
R35535:35535 compcert.lib.Maps <> ::x_'!'_x not
R35536:35537 compcert.backend.Kildall <> pc var
R35531:35534 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R35541:35544 Coq.Init.Datatypes <> Some constr
R35546:35546 compcert.backend.Kildall <> i var
R35657:35672 Coq.Init.Wf <> well_founded_ind thm
R35674:35679 compcert.lib.Coqlib <> Plt_wf thm
R35657:35672 Coq.Init.Wf <> well_founded_ind thm
R35674:35679 compcert.lib.Coqlib <> Plt_wf thm
R35719:35733 compcert.backend.Kildall Backward_Dataflow_Solver sequential_node def
R35719:35733 compcert.backend.Kildall Backward_Dataflow_Solver sequential_node def
R35812:35826 compcert.backend.Kildall Backward_Dataflow_Solver sequential_node def
R35843:35856 Coq.Lists.List <> existsb_exists thm
R35843:35856 Coq.Lists.List <> existsb_exists thm
R35908:35908 compcert.lib.Maps <> ::x_'!'_x not
R35904:35907 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R35908:35908 compcert.lib.Maps <> ::x_'!'_x not
R35904:35907 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R36036:36049 compcert.backend.Kildall Backward_Dataflow_Solver reachable_left constr
R36036:36049 compcert.backend.Kildall Backward_Dataflow_Solver reachable_left constr
R36130:36148 compcert.backend.Kildall Backward_Dataflow_Solver exit_points_charact thm
R36130:36148 compcert.backend.Kildall Backward_Dataflow_Solver exit_points_charact thm
prf 36316:36348 Backward_Dataflow_Solver reachable_exit_points_predecessor
R36390:36396 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R36398:36399 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R36419:36422 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R36400:36404 compcert.backend.Kildall NS In defax
R36408:36418 compcert.backend.Kildall Backward_Dataflow_Solver exit_points def
R36406:36406 compcert.backend.Kildall <> x var
R36423:36431 compcert.backend.Kildall Backward_Dataflow_Solver reachable ind
R36484:36485 compcert.backend.Kildall <> pc var
R36482:36482 compcert.backend.Kildall <> x var
R36479:36479 compcert.backend.Kildall <> l var
R36434:36450 compcert.backend.Kildall Backward_Dataflow_Solver make_predecessors def
R36457:36466 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.successors var
R36452:36455 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R36375:36377 Coq.Init.Logic <> :type_scope:x_'='_x not
R36372:36372 compcert.lib.Maps <> ::x_'!'_x not
R36373:36374 compcert.backend.Kildall <> pc var
R36368:36371 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R36378:36381 Coq.Init.Datatypes <> Some constr
R36383:36383 compcert.backend.Kildall <> i var
R36513:36533 compcert.backend.Kildall Backward_Dataflow_Solver reachable_exit_points thm
R36592:36613 compcert.backend.Kildall Backward_Dataflow_Solver reachable_predecessors thm
R36592:36613 compcert.backend.Kildall Backward_Dataflow_Solver reachable_predecessors thm
R36633:36643 compcert.backend.Kildall Backward_Dataflow_Solver.Kildall.Exit_points <> sec
def 36698:36705 Backward_Dataflow_Solver fixpoint
R36712:36730 compcert.backend.Kildall Backward_Dataflow_Solver.DS fixpoint_nodeset def
R36796:36806 compcert.backend.Kildall Backward_Dataflow_Solver exit_points def
R36789:36794 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.transf var
R36782:36782 compcert.backend.Kildall <> l var
R36737:36753 compcert.backend.Kildall Backward_Dataflow_Solver make_predecessors def
R36760:36769 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.successors var
R36755:36758 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
prf 36818:36834 Backward_Dataflow_Solver fixpoint_solution
R37000:37003 compcert.backend.Kildall Backward_Dataflow_Solver.L ge defax
R37013:37018 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.transf var
R37025:37026 compcert.lib.Maps <> ::x_'!!'_x not
R37027:37027 compcert.backend.Kildall <> s var
R37022:37024 compcert.backend.Kildall <> res var
R37020:37020 compcert.backend.Kildall <> s var
R37008:37009 compcert.lib.Maps <> ::x_'!!'_x not
R37010:37010 compcert.backend.Kildall <> n var
R37005:37007 compcert.backend.Kildall <> res var
R36970:36973 compcert.backend.Kildall Backward_Dataflow_Solver.L eq defax
R36988:36992 compcert.backend.Kildall Backward_Dataflow_Solver.L bot defax
R36976:36981 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.transf var
R36985:36985 compcert.backend.Kildall <> a var
R36983:36983 compcert.backend.Kildall <> n var
R36959:36961 Coq.Init.Logic <> :type_scope:x_'='_x not
R36957:36957 compcert.lib.Maps <> ::x_'!'_x not
R36958:36958 compcert.backend.Kildall <> n var
R36953:36956 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R36962:36965 Coq.Init.Datatypes <> None constr
R36911:36912 Coq.Lists.List <> In def
R36917:36926 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.successors var
R36928:36932 compcert.backend.Kildall <> instr var
R36914:36914 compcert.backend.Kildall <> s var
R36894:36896 Coq.Init.Logic <> :type_scope:x_'='_x not
R36892:36892 compcert.lib.Maps <> ::x_'!'_x not
R36893:36893 compcert.backend.Kildall <> n var
R36888:36891 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R36897:36900 Coq.Init.Datatypes <> Some constr
R36902:36906 compcert.backend.Kildall <> instr var
R36871:36873 Coq.Init.Logic <> :type_scope:x_'='_x not
R36863:36870 compcert.backend.Kildall Backward_Dataflow_Solver fixpoint def
R36874:36877 Coq.Init.Datatypes <> Some constr
R36879:36881 compcert.backend.Kildall <> res var
R37059:37085 compcert.backend.Kildall Backward_Dataflow_Solver make_predecessors_correct_2 thm
R37087:37090 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R37059:37085 compcert.backend.Kildall Backward_Dataflow_Solver make_predecessors_correct_2 thm
R37087:37090 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R37134:37134 compcert.lib.Maps <> ::x_'!'_x not
R37130:37133 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R37134:37134 compcert.lib.Maps <> ::x_'!'_x not
R37130:37133 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R37168:37200 compcert.backend.Kildall Backward_Dataflow_Solver reachable_exit_points_predecessor thm
R37244:37251 compcert.backend.Kildall Backward_Dataflow_Solver fixpoint def
R37266:37293 compcert.backend.Kildall Backward_Dataflow_Solver.DS fixpoint_nodeset_solution thm
R37266:37293 compcert.backend.Kildall Backward_Dataflow_Solver.DS fixpoint_nodeset_solution thm
R37327:37331 compcert.backend.Kildall Backward_Dataflow_Solver.L bot defax
R37311:37320 compcert.backend.Kildall Backward_Dataflow_Solver.L ge_trans prfax
R37327:37331 compcert.backend.Kildall Backward_Dataflow_Solver.L bot defax
R37311:37320 compcert.backend.Kildall Backward_Dataflow_Solver.L ge_trans prfax
R37340:37347 compcert.backend.Kildall Backward_Dataflow_Solver.L ge_bot prfax
R37340:37347 compcert.backend.Kildall Backward_Dataflow_Solver.L ge_bot prfax
R37358:37366 compcert.backend.Kildall Backward_Dataflow_Solver.L ge_refl prfax
R37358:37366 compcert.backend.Kildall Backward_Dataflow_Solver.L ge_refl prfax
R37375:37382 compcert.backend.Kildall Backward_Dataflow_Solver.L eq_sym prfax
R37375:37382 compcert.backend.Kildall Backward_Dataflow_Solver.L eq_sym prfax
def 37510:37526 Backward_Dataflow_Solver fixpoint_allnodes
R37533:37552 compcert.backend.Kildall Backward_Dataflow_Solver.DS fixpoint_allnodes def
R37611:37616 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.transf var
R37604:37604 compcert.backend.Kildall <> l var
R37559:37575 compcert.backend.Kildall Backward_Dataflow_Solver make_predecessors def
R37582:37591 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.successors var
R37577:37580 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
prf 37628:37653 Backward_Dataflow_Solver fixpoint_allnodes_solution
R37768:37771 compcert.backend.Kildall Backward_Dataflow_Solver.L ge defax
R37781:37786 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.transf var
R37793:37794 compcert.lib.Maps <> ::x_'!!'_x not
R37795:37795 compcert.backend.Kildall <> s var
R37790:37792 compcert.backend.Kildall <> res var
R37788:37788 compcert.backend.Kildall <> s var
R37776:37777 compcert.lib.Maps <> ::x_'!!'_x not
R37778:37778 compcert.backend.Kildall <> n var
R37773:37775 compcert.backend.Kildall <> res var
R37739:37740 Coq.Lists.List <> In def
R37745:37754 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.successors var
R37756:37760 compcert.backend.Kildall <> instr var
R37742:37742 compcert.backend.Kildall <> s var
R37722:37724 Coq.Init.Logic <> :type_scope:x_'='_x not
R37720:37720 compcert.lib.Maps <> ::x_'!'_x not
R37721:37721 compcert.backend.Kildall <> n var
R37716:37719 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R37725:37728 Coq.Init.Datatypes <> Some constr
R37730:37734 compcert.backend.Kildall <> instr var
R37699:37701 Coq.Init.Logic <> :type_scope:x_'='_x not
R37682:37698 compcert.backend.Kildall Backward_Dataflow_Solver fixpoint_allnodes def
R37702:37705 Coq.Init.Datatypes <> Some constr
R37707:37709 compcert.backend.Kildall <> res var
R37827:37853 compcert.backend.Kildall Backward_Dataflow_Solver make_predecessors_correct_2 thm
R37855:37858 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R37827:37853 compcert.backend.Kildall Backward_Dataflow_Solver make_predecessors_correct_2 thm
R37855:37858 compcert.backend.Kildall <> Backward_Dataflow_Solver.Kildall.code var
R37896:37912 compcert.backend.Kildall Backward_Dataflow_Solver fixpoint_allnodes def
R37930:37958 compcert.backend.Kildall Backward_Dataflow_Solver.DS fixpoint_allnodes_solution thm
R37930:37958 compcert.backend.Kildall Backward_Dataflow_Solver.DS fixpoint_allnodes_solution thm
R37978:37984 compcert.backend.Kildall Backward_Dataflow_Solver.Kildall <> sec
R37992:38015 compcert.backend.Kildall Backward_Dataflow_Solver <> mod
modtype 38553:38573 <> ORDERED_TYPE_WITH_TOP
var 38588:38588 ORDERED_TYPE_WITH_TOP t
var 38608:38609 ORDERED_TYPE_WITH_TOP ge
R38617:38617 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP t defax
R38612:38612 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP t defax
var 38639:38641 ORDERED_TYPE_WITH_TOP top
R38644:38644 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP t defax
var 38660:38665 ORDERED_TYPE_WITH_TOP top_ge
R38678:38679 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP ge defax
R38685:38685 compcert.backend.Kildall <> x var
R38681:38683 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP top defax
var 38701:38707 ORDERED_TYPE_WITH_TOP refl_ge
R38720:38721 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP ge defax
R38725:38725 compcert.backend.Kildall <> x var
R38723:38723 compcert.backend.Kildall <> x var
R38733:38753 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP <> modtype
modtype 38954:38966 <> BBLOCK_SOLVER
R38990:39010 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP <> mod
mod 38987:38987 <> BBLOCK_SOLVER.L
var 39025:39032 BBLOCK_SOLVER fixpoint
R39063:39069 compcert.lib.Maps PTree t def
R39071:39071 compcert.backend.Kildall <> A var
R39092:39095 Coq.Init.Datatypes <> list ind
R39097:39104 Coq.Numbers.BinNums <> positive ind
R39087:39087 compcert.backend.Kildall <> A var
R39146:39148 compcert.backend.Kildall BBLOCK_SOLVER.L t defax
R39139:39141 compcert.backend.Kildall BBLOCK_SOLVER.L t defax
R39127:39134 Coq.Numbers.BinNums <> positive ind
R39175:39182 Coq.Numbers.BinNums <> positive ind
R39190:39195 Coq.Init.Datatypes <> option ind
R39198:39203 compcert.lib.Maps PMap t def
R39205:39207 compcert.backend.Kildall BBLOCK_SOLVER.L t defax
var 39225:39241 BBLOCK_SOLVER fixpoint_solution
R39264:39270 compcert.lib.Maps PTree t def
R39272:39272 compcert.backend.Kildall <> A var
R39438:39441 compcert.backend.Kildall BBLOCK_SOLVER.L ge defax
R39451:39456 compcert.backend.Kildall <> transf var
R39463:39464 compcert.lib.Maps <> ::x_'!!'_x not
R39465:39465 compcert.backend.Kildall <> n var
R39460:39462 compcert.backend.Kildall <> res var
R39458:39458 compcert.backend.Kildall <> n var
R39446:39447 compcert.lib.Maps <> ::x_'!!'_x not
R39448:39448 compcert.backend.Kildall <> s var
R39443:39445 compcert.backend.Kildall <> res var
R39407:39408 Coq.Lists.List <> In def
R39413:39422 compcert.backend.Kildall <> successors var
R39424:39428 compcert.backend.Kildall <> instr var
R39410:39410 compcert.backend.Kildall <> s var
R39390:39392 Coq.Init.Logic <> :type_scope:x_'='_x not
R39388:39388 compcert.lib.Maps <> ::x_'!'_x not
R39389:39389 compcert.backend.Kildall <> n var
R39384:39387 compcert.backend.Kildall <> code var
R39393:39396 Coq.Init.Datatypes <> Some constr
R39398:39402 compcert.backend.Kildall <> instr var
R39365:39367 Coq.Init.Logic <> :type_scope:x_'='_x not
R39323:39330 compcert.backend.Kildall BBLOCK_SOLVER fixpoint defax
R39355:39364 compcert.backend.Kildall <> entrypoint var
R39348:39353 compcert.backend.Kildall <> transf var
R39337:39346 compcert.backend.Kildall <> successors var
R39332:39335 compcert.backend.Kildall <> code var
R39368:39371 Coq.Init.Datatypes <> Some constr
R39373:39375 compcert.backend.Kildall <> res var
var 39483:39496 BBLOCK_SOLVER fixpoint_entry
R39519:39525 compcert.lib.Maps PTree t def
R39527:39527 compcert.backend.Kildall <> A var
R39644:39646 Coq.Init.Logic <> :type_scope:x_'='_x not
R39632:39633 compcert.lib.Maps <> ::x_'!!'_x not
R39634:39643 compcert.backend.Kildall <> entrypoint var
R39629:39631 compcert.backend.Kildall <> res var
R39647:39651 compcert.backend.Kildall BBLOCK_SOLVER.L top defax
R39610:39612 Coq.Init.Logic <> :type_scope:x_'='_x not
R39568:39575 compcert.backend.Kildall BBLOCK_SOLVER fixpoint defax
R39600:39609 compcert.backend.Kildall <> entrypoint var
R39593:39598 compcert.backend.Kildall <> transf var
R39582:39591 compcert.backend.Kildall <> successors var
R39577:39580 compcert.backend.Kildall <> code var
R39613:39616 Coq.Init.Datatypes <> Some constr
R39618:39620 compcert.backend.Kildall <> res var
var 39668:39685 BBLOCK_SOLVER fixpoint_invariant
R39708:39714 compcert.lib.Maps PTree t def
R39716:39716 compcert.backend.Kildall <> A var
R39763:39765 compcert.backend.Kildall BBLOCK_SOLVER.L t defax
R39951:39951 compcert.backend.Kildall <> P var
R39956:39957 compcert.lib.Maps <> ::x_'!!'_x not
R39958:39959 compcert.backend.Kildall <> pc var
R39953:39955 compcert.backend.Kildall <> res var
R39932:39934 Coq.Init.Logic <> :type_scope:x_'='_x not
R39890:39897 compcert.backend.Kildall BBLOCK_SOLVER fixpoint defax
R39922:39931 compcert.backend.Kildall <> entrypoint var
R39915:39920 compcert.backend.Kildall <> transf var
R39904:39913 compcert.backend.Kildall <> successors var
R39899:39902 compcert.backend.Kildall <> code var
R39935:39938 Coq.Init.Datatypes <> Some constr
R39940:39942 compcert.backend.Kildall <> res var
R39847:39847 compcert.backend.Kildall <> P var
R39850:39855 compcert.backend.Kildall <> transf var
R39860:39860 compcert.backend.Kildall <> x var
R39857:39858 compcert.backend.Kildall <> pc var
R39840:39840 compcert.backend.Kildall <> P var
R39842:39842 compcert.backend.Kildall <> x var
R39823:39825 Coq.Init.Logic <> :type_scope:x_'='_x not
R39820:39820 compcert.lib.Maps <> ::x_'!'_x not
R39821:39822 compcert.backend.Kildall <> pc var
R39816:39819 compcert.backend.Kildall <> code var
R39826:39829 Coq.Init.Datatypes <> Some constr
R39831:39835 compcert.backend.Kildall <> instr var
R39781:39781 compcert.backend.Kildall <> P var
R39783:39787 compcert.backend.Kildall BBLOCK_SOLVER.L top defax
R39967:39979 compcert.backend.Kildall BBLOCK_SOLVER <> modtype
R40144:40164 compcert.backend.Kildall ORDERED_TYPE_WITH_TOP <> mod
R40192:40204 compcert.backend.Kildall BBLOCK_SOLVER <> mod
R40223:40225 compcert.backend.Kildall LAT <> modtype
mod 40125:40137 <> BBlock_solver
R40241:40243 compcert.backend.Kildall LAT <> modtype
mod 40236:40236 <> BBlock_solver.L
sec 40255:40260 BBlock_solver Solver
var 40292:40295 BBlock_solver.Solver code
R40298:40304 compcert.lib.Maps PTree t def
R40306:40306 compcert.backend.Kildall <> BBlock_solver.Solver.A var
var 40318:40327 BBlock_solver.Solver successors
R40335:40338 Coq.Init.Datatypes <> list ind
R40340:40347 Coq.Numbers.BinNums <> positive ind
R40330:40330 compcert.backend.Kildall <> BBlock_solver.Solver.A var
var 40359:40364 BBlock_solver.Solver transf
R40386:40388 compcert.backend.Kildall BBlock_solver.L t defax
R40379:40381 compcert.backend.Kildall BBlock_solver.L t defax
R40367:40374 Coq.Numbers.BinNums <> positive ind
var 40400:40409 BBlock_solver.Solver entrypoint
R40412:40419 Coq.Numbers.BinNums <> positive ind
var 40431:40431 BBlock_solver.Solver P
R40434:40436 compcert.backend.Kildall BBlock_solver.L t defax
var 40458:40461 BBlock_solver.Solver Ptop
R40464:40464 compcert.backend.Kildall <> BBlock_solver.Solver.P var
R40466:40470 compcert.backend.Kildall BBlock_solver.L top defax
var 40484:40490 BBlock_solver.Solver Ptransf
R40543:40543 compcert.backend.Kildall <> BBlock_solver.Solver.P var
R40546:40551 compcert.backend.Kildall <> BBlock_solver.Solver.transf var
R40556:40556 compcert.backend.Kildall <> x var
R40553:40554 compcert.backend.Kildall <> pc var
R40536:40536 compcert.backend.Kildall <> BBlock_solver.Solver.P var
R40538:40538 compcert.backend.Kildall <> x var
R40519:40521 Coq.Init.Logic <> :type_scope:x_'='_x not
R40516:40516 compcert.lib.Maps <> ::x_'!'_x not
R40517:40518 compcert.backend.Kildall <> pc var
R40512:40515 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R40522:40525 Coq.Init.Datatypes <> Some constr
R40527:40531 compcert.backend.Kildall <> instr var
def 40572:40576 BBlock_solver bbmap
R40593:40596 Coq.Init.Datatypes <> bool ind
R40581:40588 Coq.Numbers.BinNums <> positive ind
def 40610:40615 BBlock_solver result
R40620:40625 compcert.lib.Maps PMap t def
R40627:40629 compcert.backend.Kildall BBlock_solver.L t defax
constr 40904:40910 BBlock_solver mkstate
rec 40888:40892 BBlock_solver state
proj 40916:40919 BBlock_solver aval
proj 40930:40937 BBlock_solver worklist
R40922:40927 compcert.backend.Kildall BBlock_solver result def
R40940:40943 Coq.Init.Datatypes <> list ind
R40945:40952 Coq.Numbers.BinNums <> positive ind
def 41506:41525 BBlock_solver propagate_successors
R41536:41540 compcert.backend.Kildall BBlock_solver bbmap def
R41551:41554 Coq.Init.Datatypes <> list ind
R41556:41563 Coq.Numbers.BinNums <> positive ind
R41570:41572 compcert.backend.Kildall BBlock_solver.L t defax
R41580:41584 compcert.backend.Kildall BBlock_solver state rec
R41608:41612 compcert.backend.Kildall BBlock_solver state rec
R41625:41629 compcert.backend.Kildall <> succs var
R41640:41642 Coq.Init.Datatypes <> nil constr
R41647:41648 compcert.backend.Kildall <> st var
R41656:41659 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R41675:41676 compcert.backend.Kildall <> bb var
R41745:41764 compcert.backend.Kildall <> propagate_successors def
R41785:41791 compcert.backend.Kildall BBlock_solver mkstate constr
R41841:41844 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R41849:41856 compcert.backend.Kildall BBlock_solver worklist proj
R41845:41846 compcert.backend.Kildall <> st var
R41794:41801 compcert.lib.Maps PMap set def
R41812:41815 compcert.backend.Kildall BBlock_solver aval proj
R41808:41809 compcert.backend.Kildall <> st var
R41806:41806 compcert.backend.Kildall <> l var
R41772:41772 compcert.backend.Kildall <> l var
R41766:41767 compcert.backend.Kildall <> bb var
R41694:41713 compcert.backend.Kildall <> propagate_successors def
R41723:41724 compcert.backend.Kildall <> st var
R41721:41721 compcert.backend.Kildall <> l var
R41715:41716 compcert.backend.Kildall <> bb var
def 41880:41883 BBlock_solver step
R41890:41894 compcert.backend.Kildall BBlock_solver bbmap def
R41902:41906 compcert.backend.Kildall BBlock_solver state rec
R41917:41919 Coq.Init.Datatypes <> :type_scope:x_'+'_x not
R41911:41916 compcert.backend.Kildall BBlock_solver result def
R41920:41924 compcert.backend.Kildall BBlock_solver state rec
R41941:41948 compcert.backend.Kildall BBlock_solver worklist proj
R41937:41938 compcert.backend.Kildall <> st var
R41960:41962 Coq.Init.Datatypes <> nil constr
R41967:41969 Coq.Init.Datatypes <> inl constr
R41977:41980 compcert.backend.Kildall BBlock_solver aval proj
R41973:41974 compcert.backend.Kildall <> st var
R41989:41992 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R42016:42016 compcert.lib.Maps <> ::x_'!'_x not
R42012:42015 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R42033:42036 Coq.Init.Datatypes <> None constr
R42051:42053 Coq.Init.Datatypes <> inr constr
R42058:42064 compcert.backend.Kildall BBlock_solver mkstate constr
R42070:42073 compcert.backend.Kildall BBlock_solver aval proj
R42066:42067 compcert.backend.Kildall <> st var
R42089:42092 Coq.Init.Datatypes <> Some constr
R42113:42115 Coq.Init.Datatypes <> inr constr
R42120:42139 compcert.backend.Kildall BBlock_solver propagate_successors def
R42248:42254 compcert.backend.Kildall BBlock_solver mkstate constr
R42260:42263 compcert.backend.Kildall BBlock_solver aval proj
R42256:42257 compcert.backend.Kildall <> st var
R42203:42208 compcert.backend.Kildall <> BBlock_solver.Solver.transf var
R42222:42223 compcert.lib.Maps <> ::x_'!!'_x not
R42217:42220 compcert.backend.Kildall BBlock_solver aval proj
R42213:42214 compcert.backend.Kildall <> st var
R42165:42174 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R42161:42162 compcert.backend.Kildall <> bb var
def 42376:42394 BBlock_solver is_basic_block_head
R42409:42415 compcert.lib.Maps PTree t def
R42418:42421 Coq.Init.Datatypes <> list ind
R42423:42430 Coq.Numbers.BinNums <> positive ind
R42439:42446 Coq.Numbers.BinNums <> positive ind
R42451:42454 Coq.Init.Datatypes <> bool ind
R42464:42466 compcert.lib.Coqlib <> peq def
R42471:42480 compcert.backend.Kildall <> BBlock_solver.Solver.entrypoint var
R42468:42469 compcert.backend.Kildall <> pc var
R42512:42514 compcert.backend.Kildall <> ::x_'!!!'_x not
R42507:42511 compcert.backend.Kildall <> preds var
R42515:42516 compcert.backend.Kildall <> pc var
R42529:42531 Coq.Init.Datatypes <> nil constr
R42536:42540 Coq.Init.Datatypes <> false constr
R42549:42552 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R42553:42555 Coq.Init.Datatypes <> nil constr
R42560:42562 compcert.lib.Coqlib <> peq def
R42566:42567 compcert.backend.Kildall <> pc var
R42576:42579 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R42581:42584 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R42590:42593 Coq.Init.Datatypes <> true constr
R42487:42490 Coq.Init.Datatypes <> true constr
def 42616:42630 BBlock_solver basic_block_map
R42634:42638 compcert.backend.Kildall BBlock_solver bbmap def
R42645:42663 compcert.backend.Kildall BBlock_solver is_basic_block_head def
R42666:42682 compcert.backend.Kildall BBlock_solver make_predecessors def
R42689:42698 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R42684:42687 compcert.backend.Kildall <> BBlock_solver.Solver.code var
def 42714:42729 BBlock_solver basic_block_list
R42736:42740 compcert.backend.Kildall BBlock_solver bbmap def
R42745:42748 Coq.Init.Datatypes <> list ind
R42750:42757 Coq.Numbers.BinNums <> positive ind
R42764:42773 compcert.lib.Maps PTree fold def
R42842:42844 Coq.Init.Datatypes <> nil constr
R42837:42840 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R42797:42798 compcert.backend.Kildall <> bb var
R42800:42801 compcert.backend.Kildall <> pc var
R42821:42821 compcert.backend.Kildall <> l var
R42810:42813 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R42808:42809 compcert.backend.Kildall <> pc var
R42814:42814 compcert.backend.Kildall <> l var
def 42912:42919 BBlock_solver fixpoint
R42923:42928 Coq.Init.Datatypes <> option ind
R42930:42935 compcert.backend.Kildall BBlock_solver result def
R42952:42966 compcert.backend.Kildall BBlock_solver basic_block_map def
R42973:42988 compcert.lib.Iteration PrimIter iterate def
R43005:43011 compcert.backend.Kildall BBlock_solver mkstate constr
R43032:43047 compcert.backend.Kildall BBlock_solver basic_block_list def
R43049:43050 compcert.backend.Kildall <> bb var
R43014:43022 compcert.lib.Maps PMap init def
R43024:43028 compcert.backend.Kildall BBlock_solver.L top defax
R42995:42998 compcert.backend.Kildall BBlock_solver step def
R43000:43001 compcert.backend.Kildall <> bb var
def 43137:43148 BBlock_solver predecessors
R43153:43169 compcert.backend.Kildall BBlock_solver make_predecessors def
R43176:43185 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R43171:43174 compcert.backend.Kildall <> BBlock_solver.Solver.code var
prf 43195:43214 BBlock_solver predecessors_correct
R43289:43290 Coq.Lists.List <> In def
R43306:43308 compcert.backend.Kildall <> ::x_'!!!'_x not
R43294:43305 compcert.backend.Kildall BBlock_solver predecessors def
R43309:43309 compcert.backend.Kildall <> s var
R43292:43292 compcert.backend.Kildall <> n var
R43262:43263 Coq.Lists.List <> In def
R43268:43277 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R43279:43283 compcert.backend.Kildall <> instr var
R43265:43265 compcert.backend.Kildall <> s var
R43245:43247 Coq.Init.Logic <> :type_scope:x_'='_x not
R43243:43243 compcert.lib.Maps <> ::x_'!'_x not
R43244:43244 compcert.backend.Kildall <> n var
R43239:43242 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R43248:43251 Coq.Init.Datatypes <> Some constr
R43253:43257 compcert.backend.Kildall <> instr var
R43336:43347 compcert.backend.Kildall BBlock_solver predecessors def
R43357:43383 compcert.backend.Kildall BBlock_solver make_predecessors_correct_1 thm
R43357:43383 compcert.backend.Kildall BBlock_solver make_predecessors_correct_1 thm
prf 43405:43425 BBlock_solver multiple_predecessors
R43603:43605 Coq.Init.Logic <> :type_scope:x_'='_x not
R43586:43600 compcert.backend.Kildall BBlock_solver basic_block_map def
R43602:43602 compcert.backend.Kildall <> s var
R43606:43609 Coq.Init.Datatypes <> true constr
R43574:43577 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R43572:43573 compcert.backend.Kildall <> n1 var
R43578:43579 compcert.backend.Kildall <> n2 var
R43542:43543 Coq.Lists.List <> In def
R43548:43557 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R43559:43564 compcert.backend.Kildall <> instr2 var
R43545:43545 compcert.backend.Kildall <> s var
R43524:43526 Coq.Init.Logic <> :type_scope:x_'='_x not
R43521:43521 compcert.lib.Maps <> ::x_'!'_x not
R43522:43523 compcert.backend.Kildall <> n2 var
R43517:43520 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R43527:43530 Coq.Init.Datatypes <> Some constr
R43532:43537 compcert.backend.Kildall <> instr2 var
R43487:43488 Coq.Lists.List <> In def
R43493:43502 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R43504:43509 compcert.backend.Kildall <> instr1 var
R43490:43490 compcert.backend.Kildall <> s var
R43469:43471 Coq.Init.Logic <> :type_scope:x_'='_x not
R43466:43466 compcert.lib.Maps <> ::x_'!'_x not
R43467:43468 compcert.backend.Kildall <> n1 var
R43462:43465 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R43472:43475 Coq.Init.Datatypes <> Some constr
R43477:43482 compcert.backend.Kildall <> instr1 var
R43640:43641 Coq.Lists.List <> In def
R43658:43660 compcert.backend.Kildall <> ::x_'!!!'_x not
R43646:43657 compcert.backend.Kildall BBlock_solver predecessors def
R43640:43641 Coq.Lists.List <> In def
R43658:43660 compcert.backend.Kildall <> ::x_'!!!'_x not
R43646:43657 compcert.backend.Kildall BBlock_solver predecessors def
R43672:43691 compcert.backend.Kildall BBlock_solver predecessors_correct thm
R43672:43691 compcert.backend.Kildall BBlock_solver predecessors_correct thm
R43711:43712 Coq.Lists.List <> In def
R43729:43731 compcert.backend.Kildall <> ::x_'!!!'_x not
R43717:43728 compcert.backend.Kildall BBlock_solver predecessors def
R43711:43712 Coq.Lists.List <> In def
R43729:43731 compcert.backend.Kildall <> ::x_'!!!'_x not
R43717:43728 compcert.backend.Kildall BBlock_solver predecessors def
R43743:43762 compcert.backend.Kildall BBlock_solver predecessors_correct thm
R43743:43762 compcert.backend.Kildall BBlock_solver predecessors_correct thm
R43781:43795 compcert.backend.Kildall BBlock_solver basic_block_map def
R43798:43816 compcert.backend.Kildall BBlock_solver is_basic_block_head def
R43831:43833 compcert.lib.Coqlib <> peq def
R43837:43846 compcert.backend.Kildall <> BBlock_solver.Solver.entrypoint var
R43831:43833 compcert.lib.Coqlib <> peq def
R43837:43846 compcert.backend.Kildall <> BBlock_solver.Solver.entrypoint var
R43864:43875 compcert.backend.Kildall BBlock_solver predecessors def
R43864:43875 compcert.backend.Kildall BBlock_solver predecessors def
R43902:43904 compcert.backend.Kildall <> ::x_'!!!'_x not
R43890:43901 compcert.backend.Kildall BBlock_solver predecessors def
R43902:43904 compcert.backend.Kildall <> ::x_'!!!'_x not
R43890:43901 compcert.backend.Kildall BBlock_solver predecessors def
R43940:43959 compcert.lib.Coqlib <> proj_sumbool_is_true thm
R43940:43959 compcert.lib.Coqlib <> proj_sumbool_is_true thm
R0:-1 compcert.backend.Kildall <> y var
prf 44017:44028 BBlock_solver no_self_loop
R44118:44120 Coq.Init.Logic <> :type_scope:x_'='_x not
R44101:44115 compcert.backend.Kildall BBlock_solver basic_block_map def
R44117:44117 compcert.backend.Kildall <> n var
R44121:44124 Coq.Init.Datatypes <> true constr
R44074:44075 Coq.Lists.List <> In def
R44080:44089 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R44091:44095 compcert.backend.Kildall <> instr var
R44077:44077 compcert.backend.Kildall <> n var
R44057:44059 Coq.Init.Logic <> :type_scope:x_'='_x not
R44055:44055 compcert.lib.Maps <> ::x_'!'_x not
R44056:44056 compcert.backend.Kildall <> n var
R44051:44054 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R44060:44063 Coq.Init.Datatypes <> Some constr
R44065:44069 compcert.backend.Kildall <> instr var
R44151:44165 compcert.backend.Kildall BBlock_solver basic_block_map def
R44168:44186 compcert.backend.Kildall BBlock_solver is_basic_block_head def
R44201:44203 compcert.lib.Coqlib <> peq def
R44207:44216 compcert.backend.Kildall <> BBlock_solver.Solver.entrypoint var
R44201:44203 compcert.lib.Coqlib <> peq def
R44207:44216 compcert.backend.Kildall <> BBlock_solver.Solver.entrypoint var
R44234:44245 compcert.backend.Kildall BBlock_solver predecessors def
R44234:44245 compcert.backend.Kildall BBlock_solver predecessors def
R44258:44277 compcert.backend.Kildall BBlock_solver predecessors_correct thm
R44320:44322 compcert.backend.Kildall <> ::x_'!!!'_x not
R44308:44319 compcert.backend.Kildall BBlock_solver predecessors def
R44320:44322 compcert.backend.Kildall <> ::x_'!!!'_x not
R44308:44319 compcert.backend.Kildall BBlock_solver predecessors def
R44365:44384 compcert.lib.Coqlib <> proj_sumbool_is_true thm
R44365:44384 compcert.lib.Coqlib <> proj_sumbool_is_true thm
R0:-1 compcert.backend.Kildall <> y var
def 44662:44676 BBlock_solver state_invariant
R44683:44687 compcert.backend.Kildall BBlock_solver state rec
R44702:44702 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R44761:44768 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R44932:44932 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R44753:44755 Coq.Init.Logic <> :type_scope:x_'='_x not
R44750:44751 compcert.lib.Maps <> ::x_'!!'_x not
R44752:44752 compcert.backend.Kildall <> n var
R44745:44748 compcert.backend.Kildall BBlock_solver aval proj
R44741:44742 compcert.backend.Kildall <> st var
R44756:44760 compcert.backend.Kildall BBlock_solver.L top defax
R44730:44732 Coq.Init.Logic <> :type_scope:x_'='_x not
R44713:44727 compcert.backend.Kildall BBlock_solver basic_block_map def
R44729:44729 compcert.backend.Kildall <> n var
R44733:44736 Coq.Init.Datatypes <> true constr
R44800:44807 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R44931:44931 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R44782:44783 Coq.Lists.List <> In def
R44791:44798 compcert.backend.Kildall BBlock_solver worklist proj
R44787:44788 compcert.backend.Kildall <> st var
R44785:44785 compcert.backend.Kildall <> n var
R44890:44893 compcert.backend.Kildall BBlock_solver.L ge defax
R44909:44914 compcert.backend.Kildall <> BBlock_solver.Solver.transf var
R44927:44928 compcert.lib.Maps <> ::x_'!!'_x not
R44929:44929 compcert.backend.Kildall <> n var
R44922:44925 compcert.backend.Kildall BBlock_solver aval proj
R44918:44919 compcert.backend.Kildall <> st var
R44916:44916 compcert.backend.Kildall <> n var
R44904:44905 compcert.lib.Maps <> ::x_'!!'_x not
R44906:44906 compcert.backend.Kildall <> s var
R44899:44902 compcert.backend.Kildall BBlock_solver aval proj
R44895:44896 compcert.backend.Kildall <> st var
R44847:44848 Coq.Lists.List <> In def
R44853:44862 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R44864:44868 compcert.backend.Kildall <> instr var
R44850:44850 compcert.backend.Kildall <> s var
R44830:44832 Coq.Init.Logic <> :type_scope:x_'='_x not
R44828:44828 compcert.lib.Maps <> ::x_'!'_x not
R44829:44829 compcert.backend.Kildall <> n var
R44824:44827 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R44833:44836 Coq.Init.Datatypes <> Some constr
R44838:44842 compcert.backend.Kildall <> instr var
prf 44942:44970 BBlock_solver propagate_successors_charact1
R44999:45002 Coq.Lists.List <> incl def
R45063:45070 compcert.backend.Kildall BBlock_solver worklist proj
R45026:45045 compcert.backend.Kildall BBlock_solver propagate_successors def
R45058:45059 compcert.backend.Kildall <> st var
R45056:45056 compcert.backend.Kildall <> l var
R45050:45054 compcert.backend.Kildall <> succs var
R45047:45048 compcert.backend.Kildall <> bb var
R45008:45015 compcert.backend.Kildall BBlock_solver worklist proj
R45004:45005 compcert.backend.Kildall <> st var
R45123:45131 Coq.Lists.List <> incl_refl thm
R45123:45131 Coq.Lists.List <> incl_refl thm
R45182:45185 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45186:45193 compcert.backend.Kildall BBlock_solver worklist proj
R45165:45173 Coq.Lists.List <> incl_tran thm
R45182:45185 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45186:45193 compcert.backend.Kildall BBlock_solver worklist proj
R45165:45173 Coq.Lists.List <> incl_tran thm
R45208:45214 Coq.Lists.List <> incl_tl thm
R45208:45214 Coq.Lists.List <> incl_tl thm
R45223:45231 Coq.Lists.List <> incl_refl thm
R45223:45231 Coq.Lists.List <> incl_refl thm
R45249:45255 compcert.backend.Kildall BBlock_solver mkstate constr
R45284:45287 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45288:45295 compcert.backend.Kildall BBlock_solver worklist proj
R45258:45265 compcert.lib.Maps PMap set def
R45272:45275 compcert.backend.Kildall BBlock_solver aval proj
R45249:45255 compcert.backend.Kildall BBlock_solver mkstate constr
R45284:45287 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45288:45295 compcert.backend.Kildall BBlock_solver worklist proj
R45258:45265 compcert.lib.Maps PMap set def
R45272:45275 compcert.backend.Kildall BBlock_solver aval proj
R45338:45345 compcert.backend.Kildall BBlock_solver worklist proj
R45315:45318 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45319:45326 compcert.backend.Kildall BBlock_solver worklist proj
R45315:45318 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45319:45326 compcert.backend.Kildall BBlock_solver worklist proj
R45338:45345 compcert.backend.Kildall BBlock_solver worklist proj
prf 45373:45401 BBlock_solver propagate_successors_charact2
R45443:45462 compcert.backend.Kildall BBlock_solver propagate_successors def
R45475:45476 compcert.backend.Kildall <> st var
R45473:45473 compcert.backend.Kildall <> l var
R45467:45471 compcert.backend.Kildall <> succs var
R45464:45465 compcert.backend.Kildall <> bb var
R45483:45483 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R45554:45559 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R45618:45618 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R45533:45536 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R45514:45515 Coq.Lists.List <> In def
R45524:45531 compcert.backend.Kildall BBlock_solver worklist proj
R45519:45521 compcert.backend.Kildall <> st' var
R45517:45517 compcert.backend.Kildall <> n var
R45550:45552 Coq.Init.Logic <> :type_scope:x_'='_x not
R45547:45548 compcert.lib.Maps <> ::x_'!!'_x not
R45549:45549 compcert.backend.Kildall <> n var
R45542:45545 compcert.backend.Kildall BBlock_solver aval proj
R45537:45539 compcert.backend.Kildall <> st' var
R45553:45553 compcert.backend.Kildall <> l var
R45502:45504 Coq.Init.Logic <> :type_scope:x_'='_x not
R45498:45499 compcert.backend.Kildall <> bb var
R45501:45501 compcert.backend.Kildall <> n var
R45505:45509 Coq.Init.Datatypes <> false constr
R45484:45485 Coq.Lists.List <> In def
R45489:45493 compcert.backend.Kildall <> succs var
R45487:45487 compcert.backend.Kildall <> n var
R45603:45605 Coq.Init.Logic <> :type_scope:x_'='_x not
R45600:45601 compcert.lib.Maps <> ::x_'!!'_x not
R45602:45602 compcert.backend.Kildall <> n var
R45595:45598 compcert.backend.Kildall BBlock_solver aval proj
R45590:45592 compcert.backend.Kildall <> st' var
R45615:45616 compcert.lib.Maps <> ::x_'!!'_x not
R45617:45617 compcert.backend.Kildall <> n var
R45610:45613 compcert.backend.Kildall BBlock_solver aval proj
R45606:45607 compcert.backend.Kildall <> st var
R45571:45574 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R45560:45560 Coq.Init.Logic <> :type_scope:'~'_x not
R45561:45562 Coq.Lists.List <> In def
R45566:45570 compcert.backend.Kildall <> succs var
R45564:45564 compcert.backend.Kildall <> n var
R45579:45581 Coq.Init.Logic <> :type_scope:x_'='_x not
R45575:45576 compcert.backend.Kildall <> bb var
R45578:45578 compcert.backend.Kildall <> n var
R45582:45585 Coq.Init.Datatypes <> true constr
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R45897:45903 compcert.backend.Kildall BBlock_solver mkstate constr
R45932:45935 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45936:45943 compcert.backend.Kildall BBlock_solver worklist proj
R45906:45913 compcert.lib.Maps PMap set def
R45920:45923 compcert.backend.Kildall BBlock_solver aval proj
R45897:45903 compcert.backend.Kildall BBlock_solver mkstate constr
R45932:45935 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R45936:45943 compcert.backend.Kildall BBlock_solver worklist proj
R45906:45913 compcert.lib.Maps PMap set def
R45920:45923 compcert.backend.Kildall BBlock_solver aval proj
R46051:46079 compcert.backend.Kildall BBlock_solver propagate_successors_charact1 thm
R46051:46079 compcert.backend.Kildall BBlock_solver propagate_successors_charact1 thm
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R46104:46109 Coq.Lists.List <> In_dec syndef
R46111:46113 compcert.lib.Coqlib <> peq def
R46104:46109 Coq.Lists.List <> In_dec syndef
R46111:46113 compcert.lib.Coqlib <> peq def
R46193:46200 compcert.lib.Maps PMap gss thm
R46193:46200 compcert.lib.Maps PMap gss thm
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R46265:46272 compcert.lib.Maps PMap gso thm
R46265:46272 compcert.lib.Maps PMap gso thm
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
prf 46356:46385 BBlock_solver propagate_successors_invariant
R46490:46504 compcert.backend.Kildall BBlock_solver state_invariant def
R46512:46531 compcert.backend.Kildall BBlock_solver propagate_successors def
R46641:46647 compcert.backend.Kildall BBlock_solver mkstate constr
R46653:46655 compcert.backend.Kildall <> rem var
R46649:46651 compcert.backend.Kildall <> res var
R46595:46600 compcert.backend.Kildall <> BBlock_solver.Solver.transf var
R46608:46609 compcert.lib.Maps <> ::x_'!!'_x not
R46610:46611 compcert.backend.Kildall <> pc var
R46605:46607 compcert.backend.Kildall <> res var
R46602:46603 compcert.backend.Kildall <> pc var
R46550:46559 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R46561:46565 compcert.backend.Kildall <> instr var
R46533:46547 compcert.backend.Kildall BBlock_solver basic_block_map def
R46443:46457 compcert.backend.Kildall BBlock_solver state_invariant def
R46460:46466 compcert.backend.Kildall BBlock_solver mkstate constr
R46475:46478 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R46473:46474 compcert.backend.Kildall <> pc var
R46479:46481 compcert.backend.Kildall <> rem var
R46468:46470 compcert.backend.Kildall <> res var
R46424:46426 Coq.Init.Logic <> :type_scope:x_'='_x not
R46421:46421 compcert.lib.Maps <> ::x_'!'_x not
R46422:46423 compcert.backend.Kildall <> pc var
R46417:46420 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R46427:46430 Coq.Init.Datatypes <> Some constr
R46432:46436 compcert.backend.Kildall <> instr var
R46754:46759 compcert.backend.Kildall <> BBlock_solver.Solver.transf var
R46767:46768 compcert.lib.Maps <> ::x_'!!'_x not
R46754:46759 compcert.backend.Kildall <> BBlock_solver.Solver.transf var
R46767:46768 compcert.lib.Maps <> ::x_'!!'_x not
R46788:46816 compcert.backend.Kildall BBlock_solver propagate_successors_charact1 thm
R46872:46878 compcert.backend.Kildall BBlock_solver mkstate constr
R46851:46860 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R46818:46832 compcert.backend.Kildall BBlock_solver basic_block_map def
R46788:46816 compcert.backend.Kildall BBlock_solver propagate_successors_charact1 thm
R46872:46878 compcert.backend.Kildall BBlock_solver mkstate constr
R46851:46860 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R46818:46832 compcert.backend.Kildall BBlock_solver basic_block_map def
R46905:46933 compcert.backend.Kildall BBlock_solver propagate_successors_charact2 thm
R46989:46995 compcert.backend.Kildall BBlock_solver mkstate constr
R46968:46977 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R46935:46949 compcert.backend.Kildall BBlock_solver basic_block_map def
R46905:46933 compcert.backend.Kildall BBlock_solver propagate_successors_charact2 thm
R46989:46995 compcert.backend.Kildall BBlock_solver mkstate constr
R46968:46977 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R46935:46949 compcert.backend.Kildall BBlock_solver basic_block_map def
R47022:47041 compcert.backend.Kildall BBlock_solver propagate_successors def
R47098:47104 compcert.backend.Kildall BBlock_solver mkstate constr
R47077:47086 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R47043:47057 compcert.backend.Kildall BBlock_solver basic_block_map def
R47022:47041 compcert.backend.Kildall BBlock_solver propagate_successors def
R47098:47104 compcert.backend.Kildall BBlock_solver mkstate constr
R47077:47086 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R47043:47057 compcert.backend.Kildall BBlock_solver basic_block_map def
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R47345:47347 compcert.lib.Coqlib <> peq def
R47345:47347 compcert.lib.Coqlib <> peq def
R47399:47401 Coq.Init.Logic <> :type_scope:x_'='_x not
R47399:47401 Coq.Init.Logic <> :type_scope:x_'='_x not
R47485:47486 compcert.lib.Maps <> ::x_'!!'_x not
R47480:47483 compcert.backend.Kildall BBlock_solver aval proj
R47499:47500 compcert.lib.Maps <> ::x_'!!'_x not
R47499:47500 compcert.lib.Maps <> ::x_'!!'_x not
R47485:47486 compcert.lib.Maps <> ::x_'!!'_x not
R47480:47483 compcert.backend.Kildall BBlock_solver aval proj
R47525:47539 compcert.backend.Kildall BBlock_solver basic_block_map def
R47525:47539 compcert.backend.Kildall BBlock_solver basic_block_map def
R47592:47599 compcert.backend.Kildall BBlock_solver.L top_ge prfax
R47592:47599 compcert.backend.Kildall BBlock_solver.L top_ge prfax
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R47630:47639 Coq.Init.Logic <> refl_equal syndef
R47630:47639 Coq.Init.Logic <> refl_equal syndef
R47675:47683 compcert.backend.Kildall BBlock_solver.L refl_ge prfax
R47675:47683 compcert.backend.Kildall BBlock_solver.L refl_ge prfax
R47751:47756 Coq.Lists.List <> In_dec syndef
R47766:47775 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R47758:47760 compcert.lib.Coqlib <> peq def
R47751:47756 Coq.Lists.List <> In_dec syndef
R47766:47775 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R47758:47760 compcert.lib.Coqlib <> peq def
R47802:47813 compcert.backend.Kildall BBlock_solver no_self_loop thm
R47802:47813 compcert.backend.Kildall BBlock_solver no_self_loop thm
R0:-1 compcert.backend.Kildall <> y var
R48109:48111 Coq.Init.Logic <> :type_scope:x_'='_x not
R48106:48107 compcert.lib.Maps <> ::x_'!!'_x not
R48108:48108 compcert.backend.Kildall <> s var
R48101:48104 compcert.backend.Kildall BBlock_solver aval proj
R48115:48116 compcert.lib.Maps <> ::x_'!!'_x not
R48117:48117 compcert.backend.Kildall <> s var
R48068:48069 Coq.Lists.List <> In def
R48074:48083 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R48085:48090 compcert.backend.Kildall <> instr' var
R48071:48071 compcert.backend.Kildall <> s var
R48050:48052 Coq.Init.Logic <> :type_scope:x_'='_x not
R48048:48048 compcert.lib.Maps <> ::x_'!'_x not
R48044:48047 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R48053:48056 Coq.Init.Datatypes <> Some constr
R48058:48063 compcert.backend.Kildall <> instr' var
R48109:48111 Coq.Init.Logic <> :type_scope:x_'='_x not
R48106:48107 compcert.lib.Maps <> ::x_'!!'_x not
R48108:48108 compcert.backend.Kildall <> s var
R48101:48104 compcert.backend.Kildall BBlock_solver aval proj
R48115:48116 compcert.lib.Maps <> ::x_'!!'_x not
R48117:48117 compcert.backend.Kildall <> s var
R48068:48069 Coq.Lists.List <> In def
R48074:48083 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R48085:48090 compcert.backend.Kildall <> instr' var
R48071:48071 compcert.backend.Kildall <> s var
R48050:48052 Coq.Init.Logic <> :type_scope:x_'='_x not
R48048:48048 compcert.lib.Maps <> ::x_'!'_x not
R48044:48047 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R48053:48056 Coq.Init.Datatypes <> Some constr
R48058:48063 compcert.backend.Kildall <> instr' var
R48446:48451 Coq.Lists.List <> In_dec syndef
R48460:48469 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R48453:48455 compcert.lib.Coqlib <> peq def
R48446:48451 Coq.Lists.List <> In_dec syndef
R48460:48469 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R48453:48455 compcert.lib.Coqlib <> peq def
R48498:48518 compcert.backend.Kildall BBlock_solver multiple_predecessors thm
R48498:48518 compcert.backend.Kildall BBlock_solver multiple_predecessors thm
R48582:48587 Coq.Lists.List <> In_dec syndef
R48596:48605 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R48589:48591 compcert.lib.Coqlib <> peq def
R48582:48587 Coq.Lists.List <> In_dec syndef
R48596:48605 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R48589:48591 compcert.lib.Coqlib <> peq def
R48727:48741 compcert.backend.Kildall BBlock_solver basic_block_map def
R48727:48741 compcert.backend.Kildall BBlock_solver basic_block_map def
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
prf 49068:49099 BBlock_solver propagate_successors_invariant_2
R49192:49206 compcert.backend.Kildall BBlock_solver state_invariant def
R49209:49215 compcert.backend.Kildall BBlock_solver mkstate constr
R49221:49223 compcert.backend.Kildall <> rem var
R49217:49219 compcert.backend.Kildall <> res var
R49145:49159 compcert.backend.Kildall BBlock_solver state_invariant def
R49162:49168 compcert.backend.Kildall BBlock_solver mkstate constr
R49177:49180 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R49175:49176 compcert.backend.Kildall <> pc var
R49181:49183 compcert.backend.Kildall <> rem var
R49170:49172 compcert.backend.Kildall <> res var
R49132:49134 Coq.Init.Logic <> :type_scope:x_'='_x not
R49129:49129 compcert.lib.Maps <> ::x_'!'_x not
R49130:49131 compcert.backend.Kildall <> pc var
R49125:49128 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R49135:49138 Coq.Init.Datatypes <> None constr
prf 49458:49480 BBlock_solver initial_state_invariant
R49485:49499 compcert.backend.Kildall BBlock_solver state_invariant def
R49502:49508 compcert.backend.Kildall BBlock_solver mkstate constr
R49529:49544 compcert.backend.Kildall BBlock_solver basic_block_list def
R49546:49560 compcert.backend.Kildall BBlock_solver basic_block_map def
R49511:49519 compcert.lib.Maps PMap init def
R49521:49525 compcert.backend.Kildall BBlock_solver.L top defax
R49604:49610 compcert.lib.Maps PMap gi thm
R49604:49610 compcert.lib.Maps PMap gi thm
R49645:49651 compcert.lib.Maps PMap gi thm
R49645:49651 compcert.lib.Maps PMap gi thm
R49645:49651 compcert.lib.Maps PMap gi thm
R49645:49651 compcert.lib.Maps PMap gi thm
R49660:49667 compcert.backend.Kildall BBlock_solver.L top_ge prfax
R49660:49667 compcert.backend.Kildall BBlock_solver.L top_ge prfax
prf 49682:49698 BBlock_solver analyze_invariant
R49742:49756 compcert.backend.Kildall BBlock_solver state_invariant def
R49759:49765 compcert.backend.Kildall BBlock_solver mkstate constr
R49771:49773 Coq.Init.Datatypes <> nil constr
R49767:49769 compcert.backend.Kildall <> res var
R49725:49727 Coq.Init.Logic <> :type_scope:x_'='_x not
R49717:49724 compcert.backend.Kildall BBlock_solver fixpoint def
R49728:49731 Coq.Init.Datatypes <> Some constr
R49733:49735 compcert.backend.Kildall <> res var
R49793:49800 compcert.backend.Kildall BBlock_solver fixpoint def
R49834:49854 compcert.lib.Iteration PrimIter iterate_prop thm
R49894:49908 compcert.backend.Kildall BBlock_solver state_invariant def
R49861:49864 compcert.backend.Kildall BBlock_solver step def
R49866:49880 compcert.backend.Kildall BBlock_solver basic_block_map def
R49834:49854 compcert.lib.Iteration PrimIter iterate_prop thm
R49894:49908 compcert.backend.Kildall BBlock_solver state_invariant def
R49861:49864 compcert.backend.Kildall BBlock_solver step def
R49866:49880 compcert.backend.Kildall BBlock_solver basic_block_map def
R49969:49972 compcert.backend.Kildall BBlock_solver step def
R50047:50047 compcert.lib.Maps <> ::x_'!'_x not
R50043:50046 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R50047:50047 compcert.lib.Maps <> ::x_'!'_x not
R50043:50046 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R50083:50112 compcert.backend.Kildall BBlock_solver propagate_successors_invariant thm
R50083:50112 compcert.backend.Kildall BBlock_solver propagate_successors_invariant thm
R50132:50163 compcert.backend.Kildall BBlock_solver propagate_successors_invariant_2 thm
R50132:50163 compcert.backend.Kildall BBlock_solver propagate_successors_invariant_2 thm
R50190:50212 compcert.backend.Kildall BBlock_solver initial_state_invariant thm
R50190:50212 compcert.backend.Kildall BBlock_solver initial_state_invariant thm
prf 50277:50293 BBlock_solver fixpoint_solution
R50399:50402 compcert.backend.Kildall BBlock_solver.L ge defax
R50412:50417 compcert.backend.Kildall <> BBlock_solver.Solver.transf var
R50424:50425 compcert.lib.Maps <> ::x_'!!'_x not
R50426:50426 compcert.backend.Kildall <> n var
R50421:50423 compcert.backend.Kildall <> res var
R50419:50419 compcert.backend.Kildall <> n var
R50407:50408 compcert.lib.Maps <> ::x_'!!'_x not
R50409:50409 compcert.backend.Kildall <> s var
R50404:50406 compcert.backend.Kildall <> res var
R50370:50371 Coq.Lists.List <> In def
R50376:50385 compcert.backend.Kildall <> BBlock_solver.Solver.successors var
R50387:50391 compcert.backend.Kildall <> instr var
R50373:50373 compcert.backend.Kildall <> s var
R50353:50355 Coq.Init.Logic <> :type_scope:x_'='_x not
R50351:50351 compcert.lib.Maps <> ::x_'!'_x not
R50352:50352 compcert.backend.Kildall <> n var
R50347:50350 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R50356:50359 Coq.Init.Datatypes <> Some constr
R50361:50365 compcert.backend.Kildall <> instr var
R50330:50332 Coq.Init.Logic <> :type_scope:x_'='_x not
R50322:50329 compcert.backend.Kildall BBlock_solver fixpoint def
R50333:50336 Coq.Init.Datatypes <> Some constr
R50338:50340 compcert.backend.Kildall <> res var
R50458:50472 compcert.backend.Kildall BBlock_solver state_invariant def
R50475:50481 compcert.backend.Kildall BBlock_solver mkstate constr
R50487:50489 Coq.Init.Datatypes <> nil constr
R50458:50472 compcert.backend.Kildall BBlock_solver state_invariant def
R50475:50481 compcert.backend.Kildall BBlock_solver mkstate constr
R50487:50489 Coq.Init.Datatypes <> nil constr
R50503:50519 compcert.backend.Kildall BBlock_solver analyze_invariant thm
R50503:50519 compcert.backend.Kildall BBlock_solver analyze_invariant thm
prf 50620:50633 BBlock_solver fixpoint_entry
R50692:50694 Coq.Init.Logic <> :type_scope:x_'='_x not
R50680:50681 compcert.lib.Maps <> ::x_'!!'_x not
R50682:50691 compcert.backend.Kildall <> BBlock_solver.Solver.entrypoint var
R50677:50679 compcert.backend.Kildall <> res var
R50695:50699 compcert.backend.Kildall BBlock_solver.L top defax
R50660:50662 Coq.Init.Logic <> :type_scope:x_'='_x not
R50652:50659 compcert.backend.Kildall BBlock_solver fixpoint def
R50663:50666 Coq.Init.Datatypes <> Some constr
R50668:50670 compcert.backend.Kildall <> res var
R50730:50744 compcert.backend.Kildall BBlock_solver state_invariant def
R50747:50753 compcert.backend.Kildall BBlock_solver mkstate constr
R50759:50761 Coq.Init.Datatypes <> nil constr
R50730:50744 compcert.backend.Kildall BBlock_solver state_invariant def
R50747:50753 compcert.backend.Kildall BBlock_solver mkstate constr
R50759:50761 Coq.Init.Datatypes <> nil constr
R50775:50791 compcert.backend.Kildall BBlock_solver analyze_invariant thm
R50775:50791 compcert.backend.Kildall BBlock_solver analyze_invariant thm
R50848:50862 compcert.backend.Kildall BBlock_solver basic_block_map def
R50865:50883 compcert.backend.Kildall BBlock_solver is_basic_block_head def
R50893:50904 compcert.backend.Kildall BBlock_solver predecessors def
R50893:50904 compcert.backend.Kildall BBlock_solver predecessors def
R50913:50920 compcert.lib.Coqlib <> peq_true thm
R50913:50920 compcert.lib.Coqlib <> peq_true thm
def 50995:51000 BBlock_solver Pstate
R51007:51011 compcert.backend.Kildall BBlock_solver state rec
R51037:51037 compcert.backend.Kildall <> BBlock_solver.Solver.P var
R51048:51049 compcert.lib.Maps <> ::x_'!!'_x not
R51050:51051 compcert.backend.Kildall <> pc var
R51043:51046 compcert.backend.Kildall BBlock_solver aval proj
R51039:51040 compcert.backend.Kildall <> st var
prf 51061:51082 BBlock_solver propagate_successors_P
R51145:51150 compcert.backend.Kildall BBlock_solver Pstate def
R51153:51172 compcert.backend.Kildall BBlock_solver propagate_successors def
R51185:51186 compcert.backend.Kildall <> st var
R51183:51183 compcert.backend.Kildall <> l var
R51177:51181 compcert.backend.Kildall <> succs var
R51174:51175 compcert.backend.Kildall <> bb var
R51130:51135 compcert.backend.Kildall BBlock_solver Pstate def
R51137:51138 compcert.backend.Kildall <> st var
R51102:51102 compcert.backend.Kildall <> BBlock_solver.Solver.P var
R51104:51104 compcert.backend.Kildall <> l var
R51309:51319 compcert.lib.Maps PMap gsspec thm
R51309:51319 compcert.lib.Maps PMap gsspec thm
R51328:51330 compcert.lib.Coqlib <> peq def
R51328:51330 compcert.lib.Coqlib <> peq def
prf 51378:51395 BBlock_solver fixpoint_invariant
R51438:51438 compcert.backend.Kildall <> BBlock_solver.Solver.P var
R51443:51444 compcert.lib.Maps <> ::x_'!!'_x not
R51445:51446 compcert.backend.Kildall <> pc var
R51440:51442 compcert.backend.Kildall <> res var
R51423:51425 Coq.Init.Logic <> :type_scope:x_'='_x not
R51415:51422 compcert.backend.Kildall BBlock_solver fixpoint def
R51426:51429 Coq.Init.Datatypes <> Some constr
R51431:51433 compcert.backend.Kildall <> res var
R51465:51472 compcert.backend.Kildall BBlock_solver fixpoint def
R51507:51527 compcert.lib.Iteration PrimIter iterate_prop thm
R51556:51561 compcert.backend.Kildall BBlock_solver Pstate def
R51534:51537 compcert.backend.Kildall BBlock_solver step def
R51539:51553 compcert.backend.Kildall BBlock_solver basic_block_map def
R51507:51527 compcert.lib.Iteration PrimIter iterate_prop thm
R51556:51561 compcert.backend.Kildall BBlock_solver Pstate def
R51534:51537 compcert.backend.Kildall BBlock_solver step def
R51539:51553 compcert.backend.Kildall BBlock_solver basic_block_map def
R51589:51592 compcert.backend.Kildall BBlock_solver step def
R51609:51616 compcert.backend.Kildall BBlock_solver worklist proj
R51609:51616 compcert.backend.Kildall BBlock_solver worklist proj
R51648:51653 compcert.backend.Kildall BBlock_solver Pstate def
R51656:51662 compcert.backend.Kildall BBlock_solver mkstate constr
R51668:51671 compcert.backend.Kildall BBlock_solver aval proj
R51648:51653 compcert.backend.Kildall BBlock_solver Pstate def
R51656:51662 compcert.backend.Kildall BBlock_solver mkstate constr
R51668:51671 compcert.backend.Kildall BBlock_solver aval proj
R51728:51728 compcert.lib.Maps <> ::x_'!'_x not
R51724:51727 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R51728:51728 compcert.lib.Maps <> ::x_'!'_x not
R51724:51727 compcert.backend.Kildall <> BBlock_solver.Solver.code var
R51762:51783 compcert.backend.Kildall BBlock_solver propagate_successors_P thm
R51762:51783 compcert.backend.Kildall BBlock_solver propagate_successors_P thm
R51848:51854 compcert.lib.Maps PMap gi thm
R51848:51854 compcert.lib.Maps PMap gi thm
R51863:51866 compcert.backend.Kildall <> BBlock_solver.Solver.Ptop var
R51863:51866 compcert.backend.Kildall <> BBlock_solver.Solver.Ptop var
R51879:51884 compcert.backend.Kildall BBlock_solver.Solver <> sec
R51892:51904 compcert.backend.Kildall BBlock_solver <> mod
R52675:52679 compcert.lib.Heaps <> <> lib
R52708:52715 compcert.backend.Kildall NODE_SET <> mod
mod 52690:52703 <> NodeSetForward
def 52731:52731 NodeSetForward t
R52736:52742 compcert.lib.Heaps PHeap t def
def 52758:52762 NodeSetForward empty
R52767:52777 compcert.lib.Heaps PHeap empty def
def 52793:52795 NodeSetForward add
R52801:52808 Coq.Numbers.BinNums <> positive ind
R52815:52815 compcert.backend.Kildall NodeSetForward t def
R52820:52820 compcert.backend.Kildall NodeSetForward t def
R52825:52836 compcert.lib.Heaps PHeap insert def
R52840:52840 compcert.backend.Kildall <> s var
R52838:52838 compcert.backend.Kildall <> n var
def 52856:52859 NodeSetForward pick
R52865:52865 compcert.backend.Kildall NodeSetForward t def
R52881:52893 compcert.lib.Heaps PHeap findMax def
R52895:52895 compcert.backend.Kildall <> s var
R52908:52911 Coq.Init.Datatypes <> Some constr
R52918:52921 Coq.Init.Datatypes <> Some constr
R52922:52922 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R52924:52925 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R52943:52943 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R52926:52940 compcert.lib.Heaps PHeap deleteMax def
R52942:52942 compcert.backend.Kildall <> s var
R52951:52954 Coq.Init.Datatypes <> None constr
R52959:52962 Coq.Init.Datatypes <> None constr
def 52986:52994 NodeSetForward all_nodes
R53013:53019 compcert.lib.Maps PTree t def
R53021:53021 compcert.backend.Kildall <> A var
R53031:53040 compcert.lib.Maps PTree fold def
R53085:53095 compcert.lib.Heaps PHeap empty def
R53080:53083 compcert.backend.Kildall <> code var
R53061:53072 compcert.lib.Heaps PHeap insert def
R53077:53077 compcert.backend.Kildall <> s var
R53074:53075 compcert.backend.Kildall <> pc var
def 53111:53112 NodeSetForward In
R53117:53124 compcert.lib.Heaps PHeap In def
prf 53136:53145 NodeSetForward empty_spec
R53162:53162 Coq.Init.Logic <> :type_scope:'~'_x not
R53163:53164 compcert.backend.Kildall NodeSetForward In def
R53168:53172 compcert.backend.Kildall NodeSetForward empty def
R53166:53166 compcert.backend.Kildall <> n var
R53202:53215 compcert.lib.Heaps PHeap In_empty thm
R53202:53215 compcert.lib.Heaps PHeap In_empty thm
prf 53234:53241 NodeSetForward add_spec
R53278:53282 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R53263:53264 compcert.backend.Kildall NodeSetForward In def
R53270:53272 compcert.backend.Kildall NodeSetForward add def
R53276:53276 compcert.backend.Kildall <> s var
R53274:53274 compcert.backend.Kildall <> n var
R53266:53267 compcert.backend.Kildall <> n' var
R53289:53292 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R53284:53286 Coq.Init.Logic <> :type_scope:x_'='_x not
R53283:53283 compcert.backend.Kildall <> n var
R53287:53288 compcert.backend.Kildall <> n' var
R53293:53294 compcert.backend.Kildall NodeSetForward In def
R53299:53299 compcert.backend.Kildall <> s var
R53296:53297 compcert.backend.Kildall <> n' var
R53331:53345 compcert.lib.Heaps PHeap In_insert thm
R53331:53345 compcert.lib.Heaps PHeap In_insert thm
R53355:53356 compcert.backend.Kildall NodeSetForward In def
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
prf 53390:53398 NodeSetForward pick_none
R53434:53434 Coq.Init.Logic <> :type_scope:'~'_x not
R53435:53436 compcert.backend.Kildall NodeSetForward In def
R53440:53440 compcert.backend.Kildall <> s var
R53438:53438 compcert.backend.Kildall <> n var
R53423:53425 Coq.Init.Logic <> :type_scope:x_'='_x not
R53417:53420 compcert.backend.Kildall NodeSetForward pick def
R53422:53422 compcert.backend.Kildall <> s var
R53426:53429 Coq.Init.Datatypes <> None constr
R53479:53482 compcert.backend.Kildall NodeSetForward pick def
R53493:53505 compcert.lib.Heaps PHeap findMax def
R53493:53505 compcert.lib.Heaps PHeap findMax def
R53545:53563 compcert.lib.Heaps PHeap findMax_empty thm
R53545:53563 compcert.lib.Heaps PHeap findMax_empty thm
prf 53588:53596 NodeSetForward pick_some
R53664:53668 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R53657:53658 compcert.backend.Kildall NodeSetForward In def
R53663:53663 compcert.backend.Kildall <> s var
R53660:53661 compcert.backend.Kildall <> n' var
R53675:53678 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R53670:53672 Coq.Init.Logic <> :type_scope:x_'='_x not
R53669:53669 compcert.backend.Kildall <> n var
R53673:53674 compcert.backend.Kildall <> n' var
R53679:53680 compcert.backend.Kildall NodeSetForward In def
R53685:53686 compcert.backend.Kildall <> s' var
R53682:53683 compcert.backend.Kildall <> n' var
R53624:53626 Coq.Init.Logic <> :type_scope:x_'='_x not
R53618:53621 compcert.backend.Kildall NodeSetForward pick def
R53623:53623 compcert.backend.Kildall <> s var
R53627:53630 Coq.Init.Datatypes <> Some constr
R53631:53631 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R53633:53634 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R53637:53637 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R53632:53632 compcert.backend.Kildall <> n var
R53635:53636 compcert.backend.Kildall <> s' var
R53726:53729 compcert.backend.Kildall NodeSetForward pick def
R53740:53752 compcert.lib.Heaps PHeap findMax def
R53740:53752 compcert.lib.Heaps PHeap findMax def
R53794:53811 compcert.lib.Heaps PHeap In_deleteMax thm
R53794:53811 compcert.lib.Heaps PHeap In_deleteMax thm
R53831:53832 compcert.backend.Kildall NodeSetForward In def
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
prf 53878:53891 NodeSetForward all_nodes_spec
R53914:53920 compcert.lib.Maps PTree t def
R53922:53922 compcert.backend.Kildall <> A var
R53962:53963 compcert.backend.Kildall NodeSetForward In def
R53968:53976 compcert.backend.Kildall NodeSetForward all_nodes def
R53978:53981 compcert.backend.Kildall <> code var
R53965:53965 compcert.backend.Kildall <> n var
R53945:53947 Coq.Init.Logic <> :type_scope:x_'='_x not
R53943:53943 compcert.lib.Maps <> ::x_'!'_x not
R53944:53944 compcert.backend.Kildall <> n var
R53939:53942 compcert.backend.Kildall <> code var
R53948:53951 Coq.Init.Datatypes <> Some constr
R53953:53957 compcert.backend.Kildall <> instr var
R54107:54108 compcert.backend.Kildall NodeSetForward In def
R54112:54114 compcert.backend.Kildall <> set var
R54090:54092 Coq.Init.Logic <> :type_scope:x_'='_x not
R54088:54088 compcert.lib.Maps <> ::x_'!'_x not
R54087:54087 compcert.backend.Kildall <> m var
R54093:54096 Coq.Init.Datatypes <> Some constr
R54031:54055 compcert.lib.Maps PTree_Properties fold_rec thm
R54107:54108 compcert.backend.Kildall NodeSetForward In def
R54112:54114 compcert.backend.Kildall <> set var
R54090:54092 Coq.Init.Logic <> :type_scope:x_'='_x not
R54088:54088 compcert.lib.Maps <> ::x_'!'_x not
R54087:54087 compcert.backend.Kildall <> m var
R54093:54096 Coq.Init.Datatypes <> Some constr
R54031:54055 compcert.lib.Maps PTree_Properties fold_rec thm
R54215:54226 compcert.lib.Maps PTree gempty thm
R54215:54226 compcert.lib.Maps PTree gempty thm
R54286:54297 compcert.lib.Maps PTree gsspec thm
R54286:54297 compcert.lib.Maps PTree gsspec thm
R54314:54321 compcert.backend.Kildall NodeSetForward add_spec thm
R54314:54321 compcert.backend.Kildall NodeSetForward add_spec thm
R54338:54340 compcert.lib.Coqlib <> peq def
R54338:54340 compcert.lib.Coqlib <> peq def
R54372:54385 compcert.backend.Kildall NodeSetForward <> mod
R54415:54422 compcert.backend.Kildall NODE_SET <> mod
mod 54396:54410 <> NodeSetBackward
def 54438:54438 NodeSetBackward t
R54443:54449 compcert.lib.Heaps PHeap t def
def 54465:54469 NodeSetBackward empty
R54474:54484 compcert.lib.Heaps PHeap empty def
def 54500:54502 NodeSetBackward add
R54508:54515 Coq.Numbers.BinNums <> positive ind
R54522:54522 compcert.backend.Kildall NodeSetBackward t def
R54527:54527 compcert.backend.Kildall NodeSetBackward t def
R54532:54543 compcert.lib.Heaps PHeap insert def
R54547:54547 compcert.backend.Kildall <> s var
R54545:54545 compcert.backend.Kildall <> n var
def 54563:54566 NodeSetBackward pick
R54572:54572 compcert.backend.Kildall NodeSetBackward t def
R54588:54600 compcert.lib.Heaps PHeap findMin def
R54602:54602 compcert.backend.Kildall <> s var
R54615:54618 Coq.Init.Datatypes <> Some constr
R54625:54628 Coq.Init.Datatypes <> Some constr
R54629:54629 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R54631:54632 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R54650:54650 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R54633:54647 compcert.lib.Heaps PHeap deleteMin def
R54649:54649 compcert.backend.Kildall <> s var
R54658:54661 Coq.Init.Datatypes <> None constr
R54666:54669 Coq.Init.Datatypes <> None constr
def 54693:54701 NodeSetBackward all_nodes
R54720:54726 compcert.lib.Maps PTree t def
R54728:54728 compcert.backend.Kildall <> A var
R54738:54747 compcert.lib.Maps PTree fold def
R54792:54802 compcert.lib.Heaps PHeap empty def
R54787:54790 compcert.backend.Kildall <> code var
R54768:54779 compcert.lib.Heaps PHeap insert def
R54784:54784 compcert.backend.Kildall <> s var
R54781:54782 compcert.backend.Kildall <> pc var
def 54818:54819 NodeSetBackward In
R54824:54831 compcert.lib.Heaps PHeap In def
prf 54843:54852 NodeSetBackward empty_spec
R54869:54869 Coq.Init.Logic <> :type_scope:'~'_x not
R54870:54871 compcert.backend.Kildall NodeSetBackward In def
R54875:54879 compcert.backend.Kildall NodeSetBackward empty def
R54873:54873 compcert.backend.Kildall <> n var
R54890:54914 compcert.backend.Kildall NodeSetForward empty_spec thm
prf 54926:54933 NodeSetBackward add_spec
R54970:54974 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R54955:54956 compcert.backend.Kildall NodeSetBackward In def
R54962:54964 compcert.backend.Kildall NodeSetBackward add def
R54968:54968 compcert.backend.Kildall <> s var
R54966:54966 compcert.backend.Kildall <> n var
R54958:54959 compcert.backend.Kildall <> n' var
R54981:54984 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R54976:54978 Coq.Init.Logic <> :type_scope:x_'='_x not
R54975:54975 compcert.backend.Kildall <> n var
R54979:54980 compcert.backend.Kildall <> n' var
R54985:54986 compcert.backend.Kildall NodeSetBackward In def
R54991:54991 compcert.backend.Kildall <> s var
R54988:54989 compcert.backend.Kildall <> n' var
R55002:55024 compcert.backend.Kildall NodeSetForward add_spec thm
prf 55036:55044 NodeSetBackward pick_none
R55080:55080 Coq.Init.Logic <> :type_scope:'~'_x not
R55081:55082 compcert.backend.Kildall NodeSetBackward In def
R55086:55086 compcert.backend.Kildall <> s var
R55084:55084 compcert.backend.Kildall <> n var
R55069:55071 Coq.Init.Logic <> :type_scope:x_'='_x not
R55063:55066 compcert.backend.Kildall NodeSetBackward pick def
R55068:55068 compcert.backend.Kildall <> s var
R55072:55075 Coq.Init.Datatypes <> None constr
R55125:55128 compcert.backend.Kildall NodeSetBackward pick def
R55139:55151 compcert.lib.Heaps PHeap findMin def
R55139:55151 compcert.lib.Heaps PHeap findMin def
R55191:55209 compcert.lib.Heaps PHeap findMin_empty thm
R55191:55209 compcert.lib.Heaps PHeap findMin_empty thm
prf 55234:55242 NodeSetBackward pick_some
R55310:55314 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R55303:55304 compcert.backend.Kildall NodeSetBackward In def
R55309:55309 compcert.backend.Kildall <> s var
R55306:55307 compcert.backend.Kildall <> n' var
R55321:55324 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R55316:55318 Coq.Init.Logic <> :type_scope:x_'='_x not
R55315:55315 compcert.backend.Kildall <> n var
R55319:55320 compcert.backend.Kildall <> n' var
R55325:55326 compcert.backend.Kildall NodeSetBackward In def
R55331:55332 compcert.backend.Kildall <> s' var
R55328:55329 compcert.backend.Kildall <> n' var
R55270:55272 Coq.Init.Logic <> :type_scope:x_'='_x not
R55264:55267 compcert.backend.Kildall NodeSetBackward pick def
R55269:55269 compcert.backend.Kildall <> s var
R55273:55276 Coq.Init.Datatypes <> Some constr
R55277:55277 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R55279:55280 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R55283:55283 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R55278:55278 compcert.backend.Kildall <> n var
R55281:55282 compcert.backend.Kildall <> s' var
R55372:55375 compcert.backend.Kildall NodeSetBackward pick def
R55386:55398 compcert.lib.Heaps PHeap findMin def
R55386:55398 compcert.lib.Heaps PHeap findMin def
R55440:55457 compcert.lib.Heaps PHeap In_deleteMin thm
R55440:55457 compcert.lib.Heaps PHeap In_deleteMin thm
R55477:55478 compcert.backend.Kildall NodeSetBackward In def
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
R0:-1 compcert.backend.Kildall <> y var
prf 55524:55537 NodeSetBackward all_nodes_spec
R55560:55566 compcert.lib.Maps PTree t def
R55568:55568 compcert.backend.Kildall <> A var
R55608:55609 compcert.backend.Kildall NodeSetBackward In def
R55614:55622 compcert.backend.Kildall NodeSetBackward all_nodes def
R55624:55627 compcert.backend.Kildall <> code var
R55611:55611 compcert.backend.Kildall <> n var
R55591:55593 Coq.Init.Logic <> :type_scope:x_'='_x not
R55589:55589 compcert.lib.Maps <> ::x_'!'_x not
R55590:55590 compcert.backend.Kildall <> n var
R55585:55588 compcert.backend.Kildall <> code var
R55594:55597 Coq.Init.Datatypes <> Some constr
R55599:55603 compcert.backend.Kildall <> instr var
R55639:55667 compcert.backend.Kildall NodeSetForward all_nodes_spec thm
R55674:55688 compcert.backend.Kildall NodeSetBackward <> mod
