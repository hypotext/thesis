DIGEST NO
Fcompcert.backend.Linearize
R910:915 compcert.lib.Coqlib <> <> lib
R933:936 compcert.lib.Maps <> <> lib
R954:960 compcert.lib.Ordered <> <> lib
R978:982 Coq.FSets.FSets <> <> lib
R993:999 Coq.FSets.FSetAVL <> <> lib
R1017:1019 compcert.common.AST <> <> lib
R1037:1042 compcert.common.Errors <> <> lib
R1060:1061 compcert.ia32.Op <> <> lib
R1079:1087 compcert.backend.Locations <> <> lib
R1105:1107 compcert.backend.LTL <> <> lib
R1125:1130 compcert.backend.Linear <> <> lib
R1148:1154 compcert.backend.Kildall <> <> lib
R1172:1178 compcert.lib.Lattice <> <> lib
R3649:3663 compcert.backend.Kildall Dataflow_Solver <> modtype
R3665:3672 compcert.lib.Lattice LBoolean <> modtype
R3675:3688 compcert.backend.Kildall NodeSetForward <> modtype
mod 3643:3644 <> DS
def 3704:3716 <> reachable_aux
R3722:3733 compcert.backend.LTL <> function rec
R3738:3743 Coq.Init.Datatypes <> option ind
R3746:3751 compcert.lib.Maps PMap t def
R3753:3756 Coq.Init.Datatypes <> bool ind
R3764:3774 compcert.backend.Linearize DS fixpoint def
R3855:3858 Coq.Init.Datatypes <> true constr
R3840:3852 compcert.backend.LTL <> fn_entrypoint proj
R3837:3837 compcert.backend.Linearize <> f var
R3830:3830 compcert.backend.Linearize <> r var
R3796:3811 compcert.backend.LTL <> successors_block def
R3781:3791 compcert.backend.LTL <> fn_code proj
R3793:3793 compcert.backend.Linearize <> f var
def 3873:3881 <> reachable
R3887:3898 compcert.backend.LTL <> function rec
R3903:3908 compcert.lib.Maps PMap t def
R3910:3913 Coq.Init.Datatypes <> bool ind
R3926:3938 compcert.backend.Linearize <> reachable_aux def
R3940:3940 compcert.backend.Linearize <> f var
R3953:3956 Coq.Init.Datatypes <> None constr
R3961:3969 compcert.lib.Maps PMap init def
R3971:3974 Coq.Init.Datatypes <> true constr
R3980:3983 Coq.Init.Datatypes <> Some constr
ax 4128:4140 <> enumerate_aux
R4174:4177 Coq.Init.Datatypes <> list ind
R4179:4182 compcert.backend.LTL <> node def
R4159:4164 compcert.lib.Maps PMap t def
R4166:4169 Coq.Init.Datatypes <> bool ind
R4143:4154 compcert.backend.LTL <> function rec
R4273:4284 Coq.FSets.FSetAVL Make <> modtype
R4286:4300 compcert.lib.Ordered OrderedPositive <> modtype
mod 4262:4268 <> Nodeset
def 4413:4427 <> nodeset_of_list
R4433:4436 Coq.Init.Datatypes <> list ind
R4438:4441 compcert.backend.LTL <> node def
R4448:4456 compcert.backend.Linearize Nodeset t def
R4496:4498 compcert.common.Errors <> res ind
R4500:4508 compcert.backend.Linearize Nodeset t def
R4521:4521 compcert.backend.Linearize <> l var
R4532:4534 Coq.Init.Datatypes <> nil constr
R4539:4540 compcert.common.Errors <> OK constr
R4542:4542 compcert.backend.Linearize <> s var
R4550:4553 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4569:4579 compcert.backend.Linearize Nodeset mem def
R4584:4584 compcert.backend.Linearize <> s var
R4660:4674 compcert.backend.Linearize <> nodeset_of_list def
R4680:4690 compcert.backend.Linearize Nodeset add def
R4695:4695 compcert.backend.Linearize <> s var
R4598:4602 compcert.common.Errors <> Error constr
R4605:4607 compcert.common.Errors <> msg def
def 4717:4735 <> check_reachable_aux
R4750:4755 compcert.lib.Maps PMap t def
R4757:4760 Coq.Init.Datatypes <> bool ind
R4767:4775 compcert.backend.Linearize Nodeset t def
R4788:4791 Coq.Init.Datatypes <> bool ind
R4799:4802 compcert.backend.LTL <> node def
R4810:4819 compcert.backend.LTL <> bblock def
R4824:4827 Coq.Init.Datatypes <> bool ind
R4842:4843 compcert.lib.Maps <> ::x_'!!'_x not
R4844:4845 compcert.backend.Linearize <> pc var
R4837:4841 compcert.backend.Linearize <> reach var
R4880:4881 compcert.backend.Linearize <> ok var
R4854:4857 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R4852:4853 compcert.backend.Linearize <> ok var
R4858:4868 compcert.backend.Linearize Nodeset mem def
R4873:4873 compcert.backend.Linearize <> s var
R4870:4871 compcert.backend.Linearize <> pc var
def 4896:4910 <> check_reachable
R4921:4932 compcert.backend.LTL <> function rec
R4943:4948 compcert.lib.Maps PMap t def
R4950:4953 Coq.Init.Datatypes <> bool ind
R4960:4968 compcert.backend.Linearize Nodeset t def
R4973:4976 Coq.Init.Datatypes <> bool ind
R4983:4992 compcert.lib.Maps PTree fold def
R5040:5043 Coq.Init.Datatypes <> true constr
R5027:5037 compcert.backend.LTL <> fn_code proj
R5024:5024 compcert.backend.Linearize <> f var
R4995:5013 compcert.backend.Linearize <> check_reachable_aux def
R5021:5021 compcert.backend.Linearize <> s var
R5015:5019 compcert.backend.Linearize <> reach var
def 5058:5066 <> enumerate
R5072:5083 compcert.backend.LTL <> function rec
R5088:5090 compcert.common.Errors <> res ind
R5093:5096 Coq.Init.Datatypes <> list ind
R5098:5101 compcert.backend.LTL <> node def
R5122:5130 compcert.backend.Linearize <> reachable def
R5132:5132 compcert.backend.Linearize <> f var
R5151:5163 compcert.backend.Linearize <> enumerate_aux defax
R5167:5171 compcert.backend.Linearize <> reach var
R5165:5165 compcert.backend.Linearize <> f var
R5178:5180 compcert.common.Errors <> :error_monad_scope:'do'_x_'<-'_x_';'_x not
R5182:5185 compcert.common.Errors <> :error_monad_scope:'do'_x_'<-'_x_';'_x not
R5220:5223 compcert.common.Errors <> :error_monad_scope:'do'_x_'<-'_x_';'_x not
R5186:5200 compcert.backend.Linearize <> nodeset_of_list def
R5207:5219 compcert.backend.Linearize Nodeset empty def
R5202:5205 compcert.backend.Linearize <> enum var
R5227:5241 compcert.backend.Linearize <> check_reachable def
R5245:5249 compcert.backend.Linearize <> reach var
R5243:5243 compcert.backend.Linearize <> f var
R5275:5279 compcert.common.Errors <> Error constr
R5282:5284 compcert.common.Errors <> msg def
R5260:5261 compcert.common.Errors <> OK constr
R5263:5266 compcert.backend.Linearize <> enum var
def 6080:6090 <> starts_with
R6098:6102 compcert.backend.Linear <> label def
R6109:6112 compcert.backend.Linear <> code def
R6128:6131 Coq.Init.Datatypes <> bool ind
R6144:6144 compcert.backend.Linearize <> k var
R6166:6169 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6155:6160 compcert.backend.Linear <> Llabel constr
R6179:6181 compcert.lib.Coqlib <> peq def
R6183:6185 compcert.backend.Linearize <> lbl var
R6207:6217 compcert.backend.Linearize <> starts_with def
R6219:6221 compcert.backend.Linearize <> lbl var
R6197:6200 Coq.Init.Datatypes <> true constr
R6235:6239 Coq.Init.Datatypes <> false constr
def 6260:6269 <> add_branch
R6275:6279 compcert.backend.Linear <> label def
R6286:6289 compcert.backend.Linear <> code def
R6294:6297 compcert.backend.Linear <> code def
R6307:6317 compcert.backend.Linearize <> starts_with def
R6321:6321 compcert.backend.Linearize <> k var
R6319:6319 compcert.backend.Linearize <> s var
R6342:6345 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6335:6339 compcert.backend.Linear <> Lgoto constr
R6341:6341 compcert.backend.Linearize <> s var
R6346:6346 compcert.backend.Linearize <> k var
R6328:6328 compcert.backend.Linearize <> k var
def 6359:6373 <> linearize_block
R6379:6388 compcert.backend.LTL <> bblock def
R6395:6398 compcert.backend.Linear <> code def
R6403:6406 compcert.backend.Linear <> code def
R6419:6419 compcert.backend.Linearize <> b var
R6430:6432 Coq.Init.Datatypes <> nil constr
R6437:6437 compcert.backend.Linearize <> k var
R6462:6465 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6443:6449 compcert.backend.LTL <> Lop constr
R6493:6496 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6478:6480 compcert.backend.Linear <> Lop constr
R6497:6511 compcert.backend.Linearize <> linearize_block def
R6516:6516 compcert.backend.Linearize <> k var
R6551:6554 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6522:6530 compcert.backend.LTL <> Lload constr
R6592:6595 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6567:6571 compcert.backend.Linear <> Lload constr
R6596:6610 compcert.backend.Linearize <> linearize_block def
R6615:6615 compcert.backend.Linearize <> k var
R6648:6651 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6621:6633 compcert.backend.LTL <> Lgetstack constr
R6687:6690 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6664:6672 compcert.backend.Linear <> Lgetstack constr
R6691:6705 compcert.backend.Linearize <> linearize_block def
R6710:6710 compcert.backend.Linearize <> k var
R6743:6746 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6716:6728 compcert.backend.LTL <> Lsetstack constr
R6782:6785 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6759:6767 compcert.backend.Linear <> Lsetstack constr
R6786:6800 compcert.backend.Linearize <> linearize_block def
R6805:6805 compcert.backend.Linearize <> k var
R6841:6844 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6811:6820 compcert.backend.LTL <> Lstore constr
R6883:6886 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6857:6862 compcert.backend.Linear <> Lstore constr
R6887:6901 compcert.backend.Linearize <> linearize_block def
R6906:6906 compcert.backend.Linearize <> k var
R6929:6932 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6912:6920 compcert.backend.LTL <> Lcall constr
R6958:6961 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6945:6949 compcert.backend.Linear <> Lcall constr
R6962:6976 compcert.backend.Linearize <> linearize_block def
R6981:6981 compcert.backend.Linearize <> k var
R7008:7011 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R6987:6999 compcert.backend.LTL <> Ltailcall constr
R7041:7044 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7024:7032 compcert.backend.Linear <> Ltailcall constr
R7045:7045 compcert.backend.Linearize <> k var
R7075:7078 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7051:7062 compcert.backend.LTL <> Lbuiltin constr
R7111:7114 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7091:7098 compcert.backend.Linear <> Lbuiltin constr
R7115:7129 compcert.backend.Linearize <> linearize_block def
R7134:7134 compcert.backend.Linearize <> k var
R7158:7161 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7140:7149 compcert.backend.LTL <> Lannot constr
R7188:7191 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7174:7179 compcert.backend.Linear <> Lannot constr
R7192:7206 compcert.backend.Linearize <> linearize_block def
R7211:7211 compcert.backend.Linearize <> k var
R7230:7233 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7217:7227 compcert.backend.LTL <> Lbranch constr
R7246:7255 compcert.backend.Linearize <> add_branch def
R7259:7259 compcert.backend.Linearize <> k var
R7290:7293 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7265:7273 compcert.backend.LTL <> Lcond constr
R7309:7319 compcert.backend.Linearize <> starts_with def
R7324:7324 compcert.backend.Linearize <> k var
R7433:7436 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7415:7419 compcert.backend.Linear <> Lcond constr
R7437:7446 compcert.backend.Linearize <> add_branch def
R7451:7451 compcert.backend.Linearize <> k var
R7376:7379 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7339:7343 compcert.backend.Linear <> Lcond constr
R7346:7361 compcert.ia32.Op <> negate_condition def
R7380:7389 compcert.backend.Linearize <> add_branch def
R7394:7394 compcert.backend.Linearize <> k var
R7479:7482 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7457:7470 compcert.backend.LTL <> Ljumptable constr
R7513:7516 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7495:7504 compcert.backend.Linear <> Ljumptable constr
R7517:7517 compcert.backend.Linearize <> k var
R7534:7537 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7523:7533 compcert.backend.LTL <> Lreturn constr
R7557:7560 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7550:7556 compcert.backend.Linear <> Lreturn constr
R7561:7561 compcert.backend.Linearize <> k var
def 7659:7672 <> linearize_node
R7678:7689 compcert.backend.LTL <> function rec
R7697:7700 compcert.backend.LTL <> node def
R7707:7710 compcert.backend.Linear <> code def
R7715:7718 compcert.backend.Linear <> code def
R7746:7746 compcert.lib.Maps <> ::x_'!'_x not
R7747:7748 compcert.backend.Linearize <> pc var
R7734:7744 compcert.backend.LTL <> fn_code proj
R7731:7731 compcert.backend.Linearize <> f var
R7759:7762 Coq.Init.Datatypes <> None constr
R7767:7767 compcert.backend.Linearize <> k var
R7773:7776 Coq.Init.Datatypes <> Some constr
R7792:7795 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R7783:7788 compcert.backend.Linear <> Llabel constr
R7790:7791 compcert.backend.Linearize <> pc var
R7796:7810 compcert.backend.Linearize <> linearize_block def
R7814:7814 compcert.backend.Linearize <> k var
def 7835:7848 <> linearize_body
R7854:7865 compcert.backend.LTL <> function rec
R7875:7878 Coq.Init.Datatypes <> list ind
R7880:7883 compcert.backend.LTL <> node def
R7888:7891 compcert.backend.Linear <> code def
R7898:7912 compcert.lib.Coqlib <> list_fold_right def
R7938:7940 Coq.Init.Datatypes <> nil constr
R7933:7936 compcert.backend.Linearize <> enum var
R7915:7928 compcert.backend.Linearize <> linearize_node def
R7930:7930 compcert.backend.Linearize <> f var
def 8001:8015 <> transf_function
R8021:8032 compcert.backend.LTL <> function rec
R8037:8039 compcert.common.Errors <> res ind
R8041:8055 compcert.backend.Linear <> function rec
R8062:8064 compcert.common.Errors <> :error_monad_scope:'do'_x_'<-'_x_';'_x not
R8069:8072 compcert.common.Errors <> :error_monad_scope:'do'_x_'<-'_x_';'_x not
R8084:8087 compcert.common.Errors <> :error_monad_scope:'do'_x_'<-'_x_';'_x not
R8073:8081 compcert.backend.Linearize <> enumerate def
R8083:8083 compcert.backend.Linearize <> f var
R8088:8089 compcert.common.Errors <> OK constr
R8092:8101 compcert.backend.Linear <> mkfunction constr
R8161:8170 compcert.backend.Linearize <> add_branch def
R8195:8208 compcert.backend.Linearize <> linearize_body def
R8210:8210 compcert.backend.Linearize <> f var
R8173:8189 compcert.backend.LTL <> fn_entrypoint proj
R8191:8191 compcert.backend.Linearize <> f var
R8133:8148 compcert.backend.LTL <> fn_stacksize proj
R8150:8150 compcert.backend.Linearize <> f var
R8111:8120 compcert.backend.LTL <> fn_sig proj
R8122:8122 compcert.backend.Linearize <> f var
def 8233:8245 <> transf_fundef
R8251:8260 compcert.backend.LTL <> fundef def
R8265:8267 compcert.common.Errors <> res ind
R8269:8281 compcert.backend.Linear <> fundef def
R8288:8312 compcert.common.AST <> transf_partial_fundef def
R8330:8330 compcert.backend.Linearize <> f var
R8314:8328 compcert.backend.Linearize <> transf_function def
def 8345:8358 <> transf_program
R8364:8374 compcert.backend.LTL <> program def
R8379:8381 compcert.common.Errors <> res ind
R8383:8396 compcert.backend.Linear <> program def
R8403:8427 compcert.common.AST <> transform_partial_program def
R8443:8443 compcert.backend.Linearize <> p var
R8429:8441 compcert.backend.Linearize <> transf_fundef def
