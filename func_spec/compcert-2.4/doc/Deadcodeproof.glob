DIGEST NO
Fcompcert.backend.Deadcodeproof
R904:909 compcert.lib.Coqlib <> <> lib
R927:932 compcert.common.Errors <> <> lib
R950:953 compcert.lib.Maps <> <> lib
R971:978 compcert.lib.IntvSets <> <> lib
R996:998 compcert.common.AST <> <> lib
R1016:1023 compcert.lib.Integers <> <> lib
R1041:1046 compcert.lib.Floats <> <> lib
R1064:1069 compcert.common.Values <> <> lib
R1087:1092 compcert.common.Memory <> <> lib
R1110:1119 compcert.common.Globalenvs <> <> lib
R1137:1142 compcert.common.Events <> <> lib
R1160:1168 compcert.common.Smallstep <> <> lib
R1186:1187 compcert.ia32.Op <> <> lib
R1205:1213 compcert.backend.Registers <> <> lib
R1231:1233 compcert.backend.RTL <> <> lib
R1251:1257 compcert.lib.Lattice <> <> lib
R1275:1281 compcert.backend.Kildall <> <> lib
R1299:1309 compcert.backend.ValueDomain <> <> lib
R1327:1339 compcert.backend.ValueAnalysis <> <> lib
R1357:1366 compcert.backend.NeedDomain <> <> lib
R1384:1389 compcert.ia32.NeedOp <> <> lib
R1407:1414 compcert.backend.Deadcode <> <> lib
def 1721:1726 <> locset
R1740:1740 Coq.Numbers.BinNums <> Z ind
R1731:1735 compcert.common.Values <> block def
constr 1801:1809 <> mk_magree
rec 1759:1764 <> magree
proj 1815:1821 <> ma_perm
proj 1904:1912 <> ma_memval
proj 2127:2138 <> ma_nextblock
R1774:1776 compcert.common.Memory <> mem syndef
R1783:1788 compcert.backend.Deadcodeproof <> locset def
R1879:1886 compcert.common.Memory Mem perm def
R1899:1899 compcert.backend.Deadcodeproof <> p var
R1897:1897 compcert.backend.Deadcodeproof <> k var
R1893:1895 compcert.backend.Deadcodeproof <> ofs var
R1891:1891 compcert.backend.Deadcodeproof <> b var
R1888:1889 compcert.backend.Deadcodeproof <> m2 var
R1850:1857 compcert.common.Memory Mem perm def
R1870:1870 compcert.backend.Deadcodeproof <> p var
R1868:1868 compcert.backend.Deadcodeproof <> k var
R1864:1866 compcert.backend.Deadcodeproof <> ofs var
R1862:1862 compcert.backend.Deadcodeproof <> b var
R1859:1860 compcert.backend.Deadcodeproof <> m1 var
R1990:2003 compcert.common.Memdata <> memval_lessdef def
R2075:2082 compcert.lib.Maps ZMap get def
R2089:2096 compcert.lib.Maps PMap get def
R2101:2116 compcert.common.Memory Mem mem_contents proj
R2118:2119 compcert.backend.Deadcodeproof <> m2 var
R2098:2098 compcert.backend.Deadcodeproof <> b var
R2084:2086 compcert.backend.Deadcodeproof <> ofs var
R2006:2013 compcert.lib.Maps ZMap get def
R2020:2027 compcert.lib.Maps PMap get def
R2032:2047 compcert.common.Memory Mem mem_contents proj
R2049:2050 compcert.backend.Deadcodeproof <> m1 var
R2029:2029 compcert.backend.Deadcodeproof <> b var
R2015:2017 compcert.backend.Deadcodeproof <> ofs var
R1975:1975 compcert.backend.Deadcodeproof <> P var
R1979:1981 compcert.backend.Deadcodeproof <> ofs var
R1977:1977 compcert.backend.Deadcodeproof <> b var
R1937:1944 compcert.common.Memory Mem perm def
R1959:1966 compcert.common.Memtype <> Readable constr
R1955:1957 compcert.common.Memtype <> Cur constr
R1951:1953 compcert.backend.Deadcodeproof <> ofs var
R1949:1949 compcert.backend.Deadcodeproof <> b var
R1946:1947 compcert.backend.Deadcodeproof <> m1 var
R2161:2163 Coq.Init.Logic <> :type_scope:x_'='_x not
R2145:2157 compcert.common.Memory Mem nextblock proj
R2159:2160 compcert.backend.Deadcodeproof <> m2 var
R2164:2176 compcert.common.Memory Mem nextblock proj
R2178:2179 compcert.backend.Deadcodeproof <> m1 var
prf 2191:2205 <> magree_monotone
R2229:2234 compcert.backend.Deadcodeproof <> locset def
R2300:2305 compcert.backend.Deadcodeproof <> magree rec
R2313:2313 compcert.backend.Deadcodeproof <> Q var
R2310:2311 compcert.backend.Deadcodeproof <> m2 var
R2307:2308 compcert.backend.Deadcodeproof <> m1 var
R2286:2286 compcert.backend.Deadcodeproof <> P var
R2290:2292 compcert.backend.Deadcodeproof <> ofs var
R2288:2288 compcert.backend.Deadcodeproof <> b var
R2275:2275 compcert.backend.Deadcodeproof <> Q var
R2279:2281 compcert.backend.Deadcodeproof <> ofs var
R2277:2277 compcert.backend.Deadcodeproof <> b var
R2240:2245 compcert.backend.Deadcodeproof <> magree rec
R2253:2253 compcert.backend.Deadcodeproof <> P var
R2250:2251 compcert.backend.Deadcodeproof <> m2 var
R2247:2248 compcert.backend.Deadcodeproof <> m1 var
prf 2376:2389 <> mextends_agree
R2431:2436 compcert.backend.Deadcodeproof <> magree rec
R2444:2444 compcert.backend.Deadcodeproof <> P var
R2441:2442 compcert.backend.Deadcodeproof <> m2 var
R2438:2439 compcert.backend.Deadcodeproof <> m1 var
R2410:2420 compcert.common.Memory Mem extends def
R2425:2426 compcert.backend.Deadcodeproof <> m2 var
R2422:2423 compcert.backend.Deadcodeproof <> m1 var
R2539:2541 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2539:2541 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2619:2627 compcert.common.Values <> inject_id def
R2648:2656 Coq.ZArith.BinInt <> Zplus_0_r syndef
R2648:2656 Coq.ZArith.BinInt <> Zplus_0_r syndef
prf 2686:2699 <> magree_extends
R2721:2726 compcert.backend.Deadcodeproof <> locset def
R2779:2789 compcert.common.Memory Mem extends def
R2794:2795 compcert.backend.Deadcodeproof <> m2 var
R2791:2792 compcert.backend.Deadcodeproof <> m1 var
R2761:2766 compcert.backend.Deadcodeproof <> magree rec
R2774:2774 compcert.backend.Deadcodeproof <> P var
R2771:2772 compcert.backend.Deadcodeproof <> m2 var
R2768:2769 compcert.backend.Deadcodeproof <> m1 var
R2747:2747 compcert.backend.Deadcodeproof <> P var
R2751:2753 compcert.backend.Deadcodeproof <> ofs var
R2749:2749 compcert.backend.Deadcodeproof <> b var
R2867:2875 compcert.common.Values <> inject_id def
R2904:2912 Coq.ZArith.BinInt <> Zplus_0_r syndef
R2904:2912 Coq.ZArith.BinInt <> Zplus_0_r syndef
R2939:2947 Coq.ZArith.Znumtheory <> Zdivide_0 syndef
R2939:2947 Coq.ZArith.Znumtheory <> Zdivide_0 syndef
R2969:2977 Coq.ZArith.BinInt <> Zplus_0_r syndef
R2969:2977 Coq.ZArith.BinInt <> Zplus_0_r syndef
prf 3018:3033 <> magree_loadbytes
R3178:3184 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3191:3192 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3231:3234 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R3217:3219 Coq.Init.Logic <> :type_scope:x_'='_x not
R3193:3205 compcert.common.Memory Mem loadbytes def
R3216:3216 compcert.backend.Deadcodeproof <> n var
R3212:3214 compcert.backend.Deadcodeproof <> ofs var
R3210:3210 compcert.backend.Deadcodeproof <> b var
R3207:3208 compcert.backend.Deadcodeproof <> m2 var
R3220:3223 Coq.Init.Datatypes <> Some constr
R3225:3230 compcert.backend.Deadcodeproof <> bytes' var
R3235:3246 compcert.lib.Coqlib <> list_forall2 ind
R3269:3274 compcert.backend.Deadcodeproof <> bytes' var
R3263:3267 compcert.backend.Deadcodeproof <> bytes var
R3248:3261 compcert.common.Memdata <> memval_lessdef def
R3166:3166 compcert.backend.Deadcodeproof <> P var
R3170:3170 compcert.backend.Deadcodeproof <> i var
R3168:3168 compcert.backend.Deadcodeproof <> b var
R3147:3150 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3152:3154 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3144:3146 compcert.backend.Deadcodeproof <> ofs var
R3151:3151 compcert.backend.Deadcodeproof <> i var
R3151:3151 compcert.backend.Deadcodeproof <> i var
R3158:3160 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3155:3157 compcert.backend.Deadcodeproof <> ofs var
R3161:3161 compcert.backend.Deadcodeproof <> n var
R3114:3116 Coq.Init.Logic <> :type_scope:x_'='_x not
R3090:3102 compcert.common.Memory Mem loadbytes def
R3113:3113 compcert.backend.Deadcodeproof <> n var
R3109:3111 compcert.backend.Deadcodeproof <> ofs var
R3107:3107 compcert.backend.Deadcodeproof <> b var
R3104:3105 compcert.backend.Deadcodeproof <> m1 var
R3117:3120 Coq.Init.Datatypes <> Some constr
R3122:3126 compcert.backend.Deadcodeproof <> bytes var
R3070:3075 compcert.backend.Deadcodeproof <> magree rec
R3083:3083 compcert.backend.Deadcodeproof <> P var
R3080:3081 compcert.backend.Deadcodeproof <> m2 var
R3077:3078 compcert.backend.Deadcodeproof <> m1 var
R3421:3432 compcert.lib.Coqlib <> list_forall2 ind
R3470:3477 compcert.common.Memory Mem getN def
R3485:3486 compcert.backend.Deadcodeproof <> c2 var
R3481:3483 compcert.backend.Deadcodeproof <> ofs var
R3479:3479 compcert.backend.Deadcodeproof <> n var
R3450:3457 compcert.common.Memory Mem getN def
R3465:3466 compcert.backend.Deadcodeproof <> c1 var
R3461:3463 compcert.backend.Deadcodeproof <> ofs var
R3459:3459 compcert.backend.Deadcodeproof <> n var
R3434:3447 compcert.common.Memdata <> memval_lessdef def
R3366:3379 compcert.common.Memdata <> memval_lessdef def
R3398:3405 compcert.lib.Maps ZMap get def
R3409:3410 compcert.backend.Deadcodeproof <> c2 var
R3407:3407 compcert.backend.Deadcodeproof <> i var
R3382:3389 compcert.lib.Maps ZMap get def
R3393:3394 compcert.backend.Deadcodeproof <> c1 var
R3391:3391 compcert.backend.Deadcodeproof <> i var
R3338:3341 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3343:3345 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3335:3337 compcert.backend.Deadcodeproof <> ofs var
R3342:3342 compcert.backend.Deadcodeproof <> i var
R3342:3342 compcert.backend.Deadcodeproof <> i var
R3349:3351 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3346:3348 compcert.backend.Deadcodeproof <> ofs var
R3352:3359 Coq.ZArith.BinInt Z of_nat def
R3361:3361 compcert.backend.Deadcodeproof <> n var
R3421:3432 compcert.lib.Coqlib <> list_forall2 ind
R3470:3477 compcert.common.Memory Mem getN def
R3485:3486 compcert.backend.Deadcodeproof <> c2 var
R3481:3483 compcert.backend.Deadcodeproof <> ofs var
R3479:3479 compcert.backend.Deadcodeproof <> n var
R3450:3457 compcert.common.Memory Mem getN def
R3465:3466 compcert.backend.Deadcodeproof <> c1 var
R3461:3463 compcert.backend.Deadcodeproof <> ofs var
R3459:3459 compcert.backend.Deadcodeproof <> n var
R3434:3447 compcert.common.Memdata <> memval_lessdef def
R3366:3379 compcert.common.Memdata <> memval_lessdef def
R3398:3405 compcert.lib.Maps ZMap get def
R3409:3410 compcert.backend.Deadcodeproof <> c2 var
R3407:3407 compcert.backend.Deadcodeproof <> i var
R3382:3389 compcert.lib.Maps ZMap get def
R3393:3394 compcert.backend.Deadcodeproof <> c1 var
R3391:3391 compcert.backend.Deadcodeproof <> i var
R3338:3341 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3343:3345 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3335:3337 compcert.backend.Deadcodeproof <> ofs var
R3342:3342 compcert.backend.Deadcodeproof <> i var
R3342:3342 compcert.backend.Deadcodeproof <> i var
R3349:3351 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3346:3348 compcert.backend.Deadcodeproof <> ofs var
R3352:3359 Coq.ZArith.BinInt Z of_nat def
R3361:3361 compcert.backend.Deadcodeproof <> n var
R3557:3561 Coq.ZArith.Znat <> inj_S syndef
R3557:3561 Coq.ZArith.Znat <> inj_S syndef
R3664:3676 compcert.common.Memory Mem loadbytes def
R3688:3700 compcert.common.Memory Mem loadbytes def
R3736:3753 compcert.common.Memory Mem range_perm_dec thm
R3778:3785 compcert.common.Memtype <> Readable constr
R3774:3776 compcert.common.Memtype <> Cur constr
R3768:3770 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3736:3753 compcert.common.Memory Mem range_perm_dec thm
R3778:3785 compcert.common.Memtype <> Readable constr
R3774:3776 compcert.common.Memtype <> Cur constr
R3768:3770 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3807:3819 compcert.lib.Coqlib <> pred_dec_true thm
R3807:3819 compcert.lib.Coqlib <> pred_dec_true thm
R3880:3891 compcert.lib.Coqlib <> nat_of_Z_max thm
R3880:3891 compcert.lib.Coqlib <> nat_of_Z_max thm
R3912:3915 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3917:3919 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3923:3925 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3912:3915 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3917:3919 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R3923:3925 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
prf 4002:4012 <> magree_load
R4167:4173 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4176:4177 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4211:4214 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4201:4203 Coq.Init.Logic <> :type_scope:x_'='_x not
R4178:4185 compcert.common.Memory Mem load def
R4198:4200 compcert.backend.Deadcodeproof <> ofs var
R4196:4196 compcert.backend.Deadcodeproof <> b var
R4193:4194 compcert.backend.Deadcodeproof <> m2 var
R4187:4191 compcert.backend.Deadcodeproof <> chunk var
R4204:4207 Coq.Init.Datatypes <> Some constr
R4209:4210 compcert.backend.Deadcodeproof <> v' var
R4215:4225 compcert.common.Values Val lessdef ind
R4229:4230 compcert.backend.Deadcodeproof <> v' var
R4227:4227 compcert.backend.Deadcodeproof <> v var
R4155:4155 compcert.backend.Deadcodeproof <> P var
R4159:4159 compcert.backend.Deadcodeproof <> i var
R4157:4157 compcert.backend.Deadcodeproof <> b var
R4121:4124 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R4126:4128 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R4118:4120 compcert.backend.Deadcodeproof <> ofs var
R4125:4125 compcert.backend.Deadcodeproof <> i var
R4125:4125 compcert.backend.Deadcodeproof <> i var
R4132:4134 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4129:4131 compcert.backend.Deadcodeproof <> ofs var
R4135:4144 compcert.common.Memdata <> size_chunk def
R4146:4150 compcert.backend.Deadcodeproof <> chunk var
R4092:4094 Coq.Init.Logic <> :type_scope:x_'='_x not
R4069:4076 compcert.common.Memory Mem load def
R4089:4091 compcert.backend.Deadcodeproof <> ofs var
R4087:4087 compcert.backend.Deadcodeproof <> b var
R4084:4085 compcert.backend.Deadcodeproof <> m1 var
R4078:4082 compcert.backend.Deadcodeproof <> chunk var
R4095:4098 Coq.Init.Datatypes <> Some constr
R4100:4100 compcert.backend.Deadcodeproof <> v var
R4049:4054 compcert.backend.Deadcodeproof <> magree rec
R4062:4062 compcert.backend.Deadcodeproof <> P var
R4059:4060 compcert.backend.Deadcodeproof <> m2 var
R4056:4057 compcert.backend.Deadcodeproof <> m1 var
R4258:4278 compcert.common.Memory Mem load_valid_access thm
R4313:4330 compcert.common.Memory Mem load_loadbytes thm
R4372:4387 compcert.backend.Deadcodeproof <> magree_loadbytes thm
R4430:4439 compcert.common.Memdata <> decode_val def
R4430:4439 compcert.common.Memdata <> decode_val def
R4472:4489 compcert.common.Memory Mem loadbytes_load thm
R4472:4489 compcert.common.Memory Mem loadbytes_load thm
R4507:4519 compcert.common.Values <> val_inject_id thm
R4507:4519 compcert.common.Values <> val_inject_id thm
R4537:4553 compcert.common.Memdata <> decode_val_inject thm
R4537:4553 compcert.common.Memdata <> decode_val_inject thm
prf 4575:4600 <> magree_storebytes_parallel
R4624:4629 compcert.backend.Deadcodeproof <> locset def
R4903:4909 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4913:4914 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R4956:4959 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4945:4947 Coq.Init.Logic <> :type_scope:x_'='_x not
R4915:4928 compcert.common.Memory Mem storebytes def
R4939:4944 compcert.backend.Deadcodeproof <> bytes2 var
R4935:4937 compcert.backend.Deadcodeproof <> ofs var
R4933:4933 compcert.backend.Deadcodeproof <> b var
R4930:4931 compcert.backend.Deadcodeproof <> m2 var
R4948:4951 Coq.Init.Datatypes <> Some constr
R4953:4955 compcert.backend.Deadcodeproof <> m2' var
R4960:4965 compcert.backend.Deadcodeproof <> magree rec
R4975:4975 compcert.backend.Deadcodeproof <> Q var
R4971:4973 compcert.backend.Deadcodeproof <> m2' var
R4967:4969 compcert.backend.Deadcodeproof <> m1' var
R4856:4867 compcert.lib.Coqlib <> list_forall2 ind
R4891:4896 compcert.backend.Deadcodeproof <> bytes2 var
R4884:4889 compcert.backend.Deadcodeproof <> bytes1 var
R4869:4882 compcert.common.Memdata <> memval_lessdef def
R4843:4843 compcert.backend.Deadcodeproof <> P var
R4848:4848 compcert.backend.Deadcodeproof <> i var
R4845:4846 compcert.backend.Deadcodeproof <> b' var
R4773:4776 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R4768:4771 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R4766:4767 compcert.backend.Deadcodeproof <> b' var
R4772:4772 compcert.backend.Deadcodeproof <> b var
R4784:4787 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R4778:4780 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R4777:4777 compcert.backend.Deadcodeproof <> i var
R4781:4783 compcert.backend.Deadcodeproof <> ofs var
R4818:4821 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R4791:4793 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4788:4790 compcert.backend.Deadcodeproof <> ofs var
R4794:4801 Coq.ZArith.BinInt <> Z_of_nat syndef
R4804:4809 Coq.Init.Datatypes <> length def
R4811:4816 compcert.backend.Deadcodeproof <> bytes1 var
R4822:4822 compcert.backend.Deadcodeproof <> i var
R4740:4740 compcert.backend.Deadcodeproof <> Q var
R4745:4745 compcert.backend.Deadcodeproof <> i var
R4742:4743 compcert.backend.Deadcodeproof <> b' var
R4709:4711 Coq.Init.Logic <> :type_scope:x_'='_x not
R4679:4692 compcert.common.Memory Mem storebytes def
R4703:4708 compcert.backend.Deadcodeproof <> bytes1 var
R4699:4701 compcert.backend.Deadcodeproof <> ofs var
R4697:4697 compcert.backend.Deadcodeproof <> b var
R4694:4695 compcert.backend.Deadcodeproof <> m1 var
R4712:4715 Coq.Init.Datatypes <> Some constr
R4717:4719 compcert.backend.Deadcodeproof <> m1' var
R4659:4664 compcert.backend.Deadcodeproof <> magree rec
R4672:4672 compcert.backend.Deadcodeproof <> P var
R4669:4670 compcert.backend.Deadcodeproof <> m2 var
R4666:4667 compcert.backend.Deadcodeproof <> m1 var
R5017:5017 Coq.Numbers.BinNums <> Z ind
R5266:5279 compcert.common.Memdata <> memval_lessdef def
R5337:5344 compcert.lib.Maps ZMap get def
R5349:5356 compcert.common.Memory Mem setN def
R5367:5368 compcert.backend.Deadcodeproof <> c2 var
R5365:5365 compcert.backend.Deadcodeproof <> p var
R5358:5363 compcert.backend.Deadcodeproof <> bytes2 var
R5346:5346 compcert.backend.Deadcodeproof <> q var
R5282:5289 compcert.lib.Maps ZMap get def
R5294:5301 compcert.common.Memory Mem setN def
R5312:5313 compcert.backend.Deadcodeproof <> c1 var
R5310:5310 compcert.backend.Deadcodeproof <> p var
R5303:5308 compcert.backend.Deadcodeproof <> bytes1 var
R5291:5291 compcert.backend.Deadcodeproof <> q var
R5250:5255 compcert.backend.Deadcodeproof <> access var
R5257:5257 compcert.backend.Deadcodeproof <> q var
R5185:5198 compcert.common.Memdata <> memval_lessdef def
R5217:5224 compcert.lib.Maps ZMap get def
R5228:5229 compcert.backend.Deadcodeproof <> c2 var
R5226:5226 compcert.backend.Deadcodeproof <> i var
R5201:5208 compcert.lib.Maps ZMap get def
R5212:5213 compcert.backend.Deadcodeproof <> c1 var
R5210:5210 compcert.backend.Deadcodeproof <> i var
R5144:5147 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R5140:5142 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R5139:5139 compcert.backend.Deadcodeproof <> i var
R5143:5143 compcert.backend.Deadcodeproof <> p var
R5176:5179 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R5149:5151 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5148:5148 compcert.backend.Deadcodeproof <> p var
R5152:5159 Coq.ZArith.BinInt Z of_nat def
R5162:5167 Coq.Init.Datatypes <> length def
R5169:5174 compcert.backend.Deadcodeproof <> bytes1 var
R5180:5180 compcert.backend.Deadcodeproof <> i var
R5127:5132 compcert.backend.Deadcodeproof <> access var
R5134:5134 compcert.backend.Deadcodeproof <> i var
R5047:5058 compcert.lib.Coqlib <> list_forall2 ind
R5082:5087 compcert.backend.Deadcodeproof <> bytes2 var
R5075:5080 compcert.backend.Deadcodeproof <> bytes1 var
R5060:5073 compcert.common.Memdata <> memval_lessdef def
R5017:5017 Coq.Numbers.BinNums <> Z ind
R5266:5279 compcert.common.Memdata <> memval_lessdef def
R5337:5344 compcert.lib.Maps ZMap get def
R5349:5356 compcert.common.Memory Mem setN def
R5367:5368 compcert.backend.Deadcodeproof <> c2 var
R5365:5365 compcert.backend.Deadcodeproof <> p var
R5358:5363 compcert.backend.Deadcodeproof <> bytes2 var
R5346:5346 compcert.backend.Deadcodeproof <> q var
R5282:5289 compcert.lib.Maps ZMap get def
R5294:5301 compcert.common.Memory Mem setN def
R5312:5313 compcert.backend.Deadcodeproof <> c1 var
R5310:5310 compcert.backend.Deadcodeproof <> p var
R5303:5308 compcert.backend.Deadcodeproof <> bytes1 var
R5291:5291 compcert.backend.Deadcodeproof <> q var
R5250:5255 compcert.backend.Deadcodeproof <> access var
R5257:5257 compcert.backend.Deadcodeproof <> q var
R5185:5198 compcert.common.Memdata <> memval_lessdef def
R5217:5224 compcert.lib.Maps ZMap get def
R5228:5229 compcert.backend.Deadcodeproof <> c2 var
R5226:5226 compcert.backend.Deadcodeproof <> i var
R5201:5208 compcert.lib.Maps ZMap get def
R5212:5213 compcert.backend.Deadcodeproof <> c1 var
R5210:5210 compcert.backend.Deadcodeproof <> i var
R5144:5147 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R5140:5142 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R5139:5139 compcert.backend.Deadcodeproof <> i var
R5143:5143 compcert.backend.Deadcodeproof <> p var
R5176:5179 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R5149:5151 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5148:5148 compcert.backend.Deadcodeproof <> p var
R5152:5159 Coq.ZArith.BinInt Z of_nat def
R5162:5167 Coq.Init.Datatypes <> length def
R5169:5174 compcert.backend.Deadcodeproof <> bytes1 var
R5180:5180 compcert.backend.Deadcodeproof <> i var
R5127:5132 compcert.backend.Deadcodeproof <> access var
R5134:5134 compcert.backend.Deadcodeproof <> i var
R5047:5058 compcert.lib.Coqlib <> list_forall2 ind
R5082:5087 compcert.backend.Deadcodeproof <> bytes2 var
R5075:5080 compcert.backend.Deadcodeproof <> bytes1 var
R5060:5073 compcert.common.Memdata <> memval_lessdef def
R5453:5458 Coq.Init.Datatypes <> length def
R5475:5479 Coq.ZArith.Znat <> inj_S syndef
R5453:5458 Coq.Init.Datatypes <> length def
R5475:5479 Coq.ZArith.Znat <> inj_S syndef
R5544:5554 compcert.lib.Maps ZMap gsspec thm
R5544:5554 compcert.lib.Maps ZMap gsspec thm
R5544:5554 compcert.lib.Maps ZMap gsspec thm
R5544:5554 compcert.lib.Maps ZMap gsspec thm
R5567:5577 compcert.lib.Maps ZIndexed eq def
R5567:5577 compcert.lib.Maps ZIndexed eq def
R5619:5628 compcert.lib.Maps ZIndexed t def
R5671:5695 compcert.common.Memory Mem range_perm_storebytes thm
R5671:5695 compcert.common.Memory Mem range_perm_storebytes thm
R5744:5762 compcert.lib.Coqlib <> list_forall2_length thm
R5744:5762 compcert.lib.Coqlib <> list_forall2_length thm
R5798:5804 compcert.backend.Deadcodeproof <> ma_perm proj
R5798:5804 compcert.backend.Deadcodeproof <> ma_perm proj
R5826:5850 compcert.common.Memory Mem storebytes_range_perm thm
R5826:5850 compcert.common.Memory Mem storebytes_range_perm thm
R5922:5942 compcert.common.Memory Mem perm_storebytes_1 thm
R5922:5942 compcert.common.Memory Mem perm_storebytes_1 thm
R5959:5965 compcert.backend.Deadcodeproof <> ma_perm proj
R5959:5965 compcert.backend.Deadcodeproof <> ma_perm proj
R5984:6004 compcert.common.Memory Mem perm_storebytes_2 thm
R5984:6004 compcert.common.Memory Mem perm_storebytes_2 thm
R6026:6052 compcert.common.Memory Mem storebytes_mem_contents thm
R6026:6052 compcert.common.Memory Mem storebytes_mem_contents thm
R6080:6106 compcert.common.Memory Mem storebytes_mem_contents thm
R6080:6106 compcert.common.Memory Mem storebytes_mem_contents thm
R6136:6146 compcert.lib.Maps PMap gsspec thm
R6136:6146 compcert.lib.Maps PMap gsspec thm
R6136:6146 compcert.lib.Maps PMap gsspec thm
R6136:6146 compcert.lib.Maps PMap gsspec thm
R6159:6161 compcert.lib.Coqlib <> peq def
R6159:6161 compcert.lib.Coqlib <> peq def
R6251:6254 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6220:6227 compcert.common.Memory Mem perm def
R6243:6250 compcert.common.Memtype <> Readable constr
R6239:6241 compcert.common.Memtype <> Cur constr
R6235:6237 compcert.backend.Deadcodeproof <> ofs var
R6259:6261 compcert.backend.Deadcodeproof <> ofs var
R6251:6254 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6220:6227 compcert.common.Memory Mem perm def
R6243:6250 compcert.common.Memtype <> Readable constr
R6239:6241 compcert.common.Memtype <> Cur constr
R6235:6237 compcert.backend.Deadcodeproof <> ofs var
R6259:6261 compcert.backend.Deadcodeproof <> ofs var
R6301:6309 compcert.backend.Deadcodeproof <> ma_memval proj
R6301:6309 compcert.backend.Deadcodeproof <> ma_memval proj
R6328:6348 compcert.common.Memory Mem perm_storebytes_2 thm
R6328:6348 compcert.common.Memory Mem perm_storebytes_2 thm
R6385:6393 compcert.backend.Deadcodeproof <> ma_memval proj
R6385:6393 compcert.backend.Deadcodeproof <> ma_memval proj
R6410:6430 compcert.common.Memory Mem perm_storebytes_2 thm
R6410:6430 compcert.common.Memory Mem perm_storebytes_2 thm
R6467:6490 compcert.common.Memory Mem nextblock_storebytes thm
R6467:6490 compcert.common.Memory Mem nextblock_storebytes thm
R6518:6541 compcert.common.Memory Mem nextblock_storebytes thm
R6518:6541 compcert.common.Memory Mem nextblock_storebytes thm
R6568:6579 compcert.backend.Deadcodeproof <> ma_nextblock proj
R6568:6579 compcert.backend.Deadcodeproof <> ma_nextblock proj
prf 6602:6622 <> magree_store_parallel
R6646:6651 compcert.backend.Deadcodeproof <> locset def
R6906:6912 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6916:6917 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6956:6959 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6945:6947 Coq.Init.Logic <> :type_scope:x_'='_x not
R6918:6926 compcert.common.Memory Mem store def
R6943:6944 compcert.backend.Deadcodeproof <> v2 var
R6939:6941 compcert.backend.Deadcodeproof <> ofs var
R6937:6937 compcert.backend.Deadcodeproof <> b var
R6934:6935 compcert.backend.Deadcodeproof <> m2 var
R6928:6932 compcert.backend.Deadcodeproof <> chunk var
R6948:6951 Coq.Init.Datatypes <> Some constr
R6953:6955 compcert.backend.Deadcodeproof <> m2' var
R6960:6965 compcert.backend.Deadcodeproof <> magree rec
R6975:6975 compcert.backend.Deadcodeproof <> Q var
R6971:6973 compcert.backend.Deadcodeproof <> m2' var
R6967:6969 compcert.backend.Deadcodeproof <> m1' var
R6893:6893 compcert.backend.Deadcodeproof <> P var
R6898:6898 compcert.backend.Deadcodeproof <> i var
R6895:6896 compcert.backend.Deadcodeproof <> b' var
R6831:6834 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6826:6829 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R6824:6825 compcert.backend.Deadcodeproof <> b' var
R6830:6830 compcert.backend.Deadcodeproof <> b var
R6842:6845 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R6836:6838 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R6835:6835 compcert.backend.Deadcodeproof <> i var
R6839:6841 compcert.backend.Deadcodeproof <> ofs var
R6868:6871 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R6849:6851 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6846:6848 compcert.backend.Deadcodeproof <> ofs var
R6852:6861 compcert.common.Memdata <> size_chunk def
R6863:6867 compcert.backend.Deadcodeproof <> chunk var
R6872:6872 compcert.backend.Deadcodeproof <> i var
R6798:6798 compcert.backend.Deadcodeproof <> Q var
R6803:6803 compcert.backend.Deadcodeproof <> i var
R6800:6801 compcert.backend.Deadcodeproof <> b' var
R6743:6748 compcert.backend.NeedDomain <> vagree def
R6757:6770 compcert.backend.NeedDomain <> store_argument def
R6772:6776 compcert.backend.Deadcodeproof <> chunk var
R6753:6754 compcert.backend.Deadcodeproof <> v2 var
R6750:6751 compcert.backend.Deadcodeproof <> v1 var
R6726:6728 Coq.Init.Logic <> :type_scope:x_'='_x not
R6699:6707 compcert.common.Memory Mem store def
R6724:6725 compcert.backend.Deadcodeproof <> v1 var
R6720:6722 compcert.backend.Deadcodeproof <> ofs var
R6718:6718 compcert.backend.Deadcodeproof <> b var
R6715:6716 compcert.backend.Deadcodeproof <> m1 var
R6709:6713 compcert.backend.Deadcodeproof <> chunk var
R6729:6732 Coq.Init.Datatypes <> Some constr
R6734:6736 compcert.backend.Deadcodeproof <> m1' var
R6679:6684 compcert.backend.Deadcodeproof <> magree rec
R6692:6692 compcert.backend.Deadcodeproof <> P var
R6689:6690 compcert.backend.Deadcodeproof <> m2 var
R6686:6687 compcert.backend.Deadcodeproof <> m1 var
R7006:7029 compcert.common.Memory Mem store_valid_access_3 thm
R7064:7083 compcert.common.Memory Mem store_storebytes thm
R7115:7140 compcert.backend.Deadcodeproof <> magree_storebytes_parallel thm
R7198:7214 compcert.common.Memdata <> encode_val_length thm
R7198:7214 compcert.common.Memdata <> encode_val_length thm
R7236:7250 compcert.common.Memdata <> size_chunk_conv thm
R7236:7250 compcert.common.Memdata <> size_chunk_conv thm
R7285:7304 compcert.backend.NeedDomain <> store_argument_sound thm
R7285:7304 compcert.backend.NeedDomain <> store_argument_sound thm
R7376:7395 compcert.common.Memory Mem storebytes_store thm
R7376:7395 compcert.common.Memory Mem storebytes_store thm
prf 7417:7438 <> magree_storebytes_left
R7616:7621 compcert.backend.Deadcodeproof <> magree rec
R7630:7630 compcert.backend.Deadcodeproof <> P var
R7627:7628 compcert.backend.Deadcodeproof <> m2 var
R7623:7625 compcert.backend.Deadcodeproof <> m1' var
R7601:7602 Coq.Init.Logic <> :type_scope:'~'_x not
R7608:7608 Coq.Init.Logic <> :type_scope:'~'_x not
R7603:7603 compcert.backend.Deadcodeproof <> P var
R7607:7607 compcert.backend.Deadcodeproof <> i var
R7605:7605 compcert.backend.Deadcodeproof <> b var
R7559:7562 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7564:7566 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7556:7558 compcert.backend.Deadcodeproof <> ofs var
R7563:7563 compcert.backend.Deadcodeproof <> i var
R7563:7563 compcert.backend.Deadcodeproof <> i var
R7570:7572 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7567:7569 compcert.backend.Deadcodeproof <> ofs var
R7573:7580 Coq.ZArith.BinInt <> Z_of_nat syndef
R7583:7588 Coq.Init.Datatypes <> length def
R7590:7595 compcert.backend.Deadcodeproof <> bytes1 var
R7528:7530 Coq.Init.Logic <> :type_scope:x_'='_x not
R7498:7511 compcert.common.Memory Mem storebytes def
R7522:7527 compcert.backend.Deadcodeproof <> bytes1 var
R7518:7520 compcert.backend.Deadcodeproof <> ofs var
R7516:7516 compcert.backend.Deadcodeproof <> b var
R7513:7514 compcert.backend.Deadcodeproof <> m1 var
R7531:7534 Coq.Init.Datatypes <> Some constr
R7536:7538 compcert.backend.Deadcodeproof <> m1' var
R7478:7483 compcert.backend.Deadcodeproof <> magree rec
R7491:7491 compcert.backend.Deadcodeproof <> P var
R7488:7489 compcert.backend.Deadcodeproof <> m2 var
R7485:7486 compcert.backend.Deadcodeproof <> m1 var
R7680:7686 compcert.backend.Deadcodeproof <> ma_perm proj
R7680:7686 compcert.backend.Deadcodeproof <> ma_perm proj
R7703:7723 compcert.common.Memory Mem perm_storebytes_2 thm
R7703:7723 compcert.common.Memory Mem perm_storebytes_2 thm
R7745:7771 compcert.common.Memory Mem storebytes_mem_contents thm
R7745:7771 compcert.common.Memory Mem storebytes_mem_contents thm
R7798:7808 compcert.lib.Maps PMap gsspec thm
R7798:7808 compcert.lib.Maps PMap gsspec thm
R7821:7823 compcert.lib.Coqlib <> peq def
R7821:7823 compcert.lib.Coqlib <> peq def
R7852:7867 compcert.common.Memory Mem setN_outside thm
R7852:7867 compcert.common.Memory Mem setN_outside thm
R7877:7885 compcert.backend.Deadcodeproof <> ma_memval proj
R7877:7885 compcert.backend.Deadcodeproof <> ma_memval proj
R7902:7922 compcert.common.Memory Mem perm_storebytes_2 thm
R7902:7922 compcert.common.Memory Mem perm_storebytes_2 thm
R7944:7946 compcert.lib.Coqlib <> zlt def
R7944:7946 compcert.lib.Coqlib <> zlt def
R7975:7977 compcert.lib.Coqlib <> zle def
R7983:7985 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7986:7993 Coq.ZArith.BinInt Z of_nat def
R7996:8001 Coq.Init.Datatypes <> length def
R7975:7977 compcert.lib.Coqlib <> zle def
R7983:7985 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7986:7993 Coq.ZArith.BinInt Z of_nat def
R7996:8001 Coq.Init.Datatypes <> length def
R8071:8079 compcert.backend.Deadcodeproof <> ma_memval proj
R8071:8079 compcert.backend.Deadcodeproof <> ma_memval proj
R8096:8116 compcert.common.Memory Mem perm_storebytes_2 thm
R8096:8116 compcert.common.Memory Mem perm_storebytes_2 thm
R8137:8160 compcert.common.Memory Mem nextblock_storebytes thm
R8137:8160 compcert.common.Memory Mem nextblock_storebytes thm
R8186:8197 compcert.backend.Deadcodeproof <> ma_nextblock proj
R8186:8197 compcert.backend.Deadcodeproof <> ma_nextblock proj
prf 8220:8236 <> magree_store_left
R8405:8410 compcert.backend.Deadcodeproof <> magree rec
R8419:8419 compcert.backend.Deadcodeproof <> P var
R8416:8417 compcert.backend.Deadcodeproof <> m2 var
R8412:8414 compcert.backend.Deadcodeproof <> m1' var
R8390:8391 Coq.Init.Logic <> :type_scope:'~'_x not
R8397:8397 Coq.Init.Logic <> :type_scope:'~'_x not
R8392:8392 compcert.backend.Deadcodeproof <> P var
R8396:8396 compcert.backend.Deadcodeproof <> i var
R8394:8394 compcert.backend.Deadcodeproof <> b var
R8356:8359 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8361:8363 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8353:8355 compcert.backend.Deadcodeproof <> ofs var
R8360:8360 compcert.backend.Deadcodeproof <> i var
R8360:8360 compcert.backend.Deadcodeproof <> i var
R8367:8369 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R8364:8366 compcert.backend.Deadcodeproof <> ofs var
R8370:8379 compcert.common.Memdata <> size_chunk def
R8381:8385 compcert.backend.Deadcodeproof <> chunk var
R8325:8327 Coq.Init.Logic <> :type_scope:x_'='_x not
R8298:8306 compcert.common.Memory Mem store def
R8323:8324 compcert.backend.Deadcodeproof <> v1 var
R8319:8321 compcert.backend.Deadcodeproof <> ofs var
R8317:8317 compcert.backend.Deadcodeproof <> b var
R8314:8315 compcert.backend.Deadcodeproof <> m1 var
R8308:8312 compcert.backend.Deadcodeproof <> chunk var
R8328:8331 Coq.Init.Datatypes <> Some constr
R8333:8335 compcert.backend.Deadcodeproof <> m1' var
R8278:8283 compcert.backend.Deadcodeproof <> magree rec
R8291:8291 compcert.backend.Deadcodeproof <> P var
R8288:8289 compcert.backend.Deadcodeproof <> m2 var
R8285:8286 compcert.backend.Deadcodeproof <> m1 var
R8446:8467 compcert.backend.Deadcodeproof <> magree_storebytes_left thm
R8446:8467 compcert.backend.Deadcodeproof <> magree_storebytes_left thm
R8486:8505 compcert.common.Memory Mem store_storebytes thm
R8486:8505 compcert.common.Memory Mem store_storebytes thm
R8534:8550 compcert.common.Memdata <> encode_val_length thm
R8534:8550 compcert.common.Memdata <> encode_val_length thm
R8572:8586 compcert.common.Memdata <> size_chunk_conv thm
R8572:8586 compcert.common.Memdata <> size_chunk_conv thm
prf 8624:8634 <> magree_free
R8658:8663 compcert.backend.Deadcodeproof <> locset def
R8836:8842 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8846:8847 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8878:8881 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R8867:8869 Coq.Init.Logic <> :type_scope:x_'='_x not
R8848:8855 compcert.common.Memory Mem free def
R8865:8866 compcert.backend.Deadcodeproof <> hi var
R8862:8863 compcert.backend.Deadcodeproof <> lo var
R8860:8860 compcert.backend.Deadcodeproof <> b var
R8857:8858 compcert.backend.Deadcodeproof <> m2 var
R8870:8873 Coq.Init.Datatypes <> Some constr
R8875:8877 compcert.backend.Deadcodeproof <> m2' var
R8882:8887 compcert.backend.Deadcodeproof <> magree rec
R8897:8897 compcert.backend.Deadcodeproof <> Q var
R8893:8895 compcert.backend.Deadcodeproof <> m2' var
R8889:8891 compcert.backend.Deadcodeproof <> m1' var
R8823:8823 compcert.backend.Deadcodeproof <> P var
R8828:8828 compcert.backend.Deadcodeproof <> i var
R8825:8826 compcert.backend.Deadcodeproof <> b' var
R8784:8787 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R8779:8782 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R8777:8778 compcert.backend.Deadcodeproof <> b' var
R8783:8783 compcert.backend.Deadcodeproof <> b var
R8788:8789 Coq.Init.Logic <> :type_scope:'~'_x not
R8802:8802 Coq.Init.Logic <> :type_scope:'~'_x not
R8792:8795 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8797:8799 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8790:8791 compcert.backend.Deadcodeproof <> lo var
R8796:8796 compcert.backend.Deadcodeproof <> i var
R8796:8796 compcert.backend.Deadcodeproof <> i var
R8800:8801 compcert.backend.Deadcodeproof <> hi var
R8751:8751 compcert.backend.Deadcodeproof <> Q var
R8756:8756 compcert.backend.Deadcodeproof <> i var
R8753:8754 compcert.backend.Deadcodeproof <> b' var
R8720:8722 Coq.Init.Logic <> :type_scope:x_'='_x not
R8701:8708 compcert.common.Memory Mem free def
R8718:8719 compcert.backend.Deadcodeproof <> hi var
R8715:8716 compcert.backend.Deadcodeproof <> lo var
R8713:8713 compcert.backend.Deadcodeproof <> b var
R8710:8711 compcert.backend.Deadcodeproof <> m1 var
R8723:8726 Coq.Init.Datatypes <> Some constr
R8728:8730 compcert.backend.Deadcodeproof <> m1' var
R8681:8686 compcert.backend.Deadcodeproof <> magree rec
R8694:8694 compcert.backend.Deadcodeproof <> P var
R8691:8692 compcert.backend.Deadcodeproof <> m2 var
R8688:8689 compcert.backend.Deadcodeproof <> m1 var
R8930:8948 compcert.common.Memory Mem range_perm_free thm
R8930:8948 compcert.common.Memory Mem range_perm_free thm
R8999:9005 compcert.backend.Deadcodeproof <> ma_perm proj
R8999:9005 compcert.backend.Deadcodeproof <> ma_perm proj
R9022:9040 compcert.common.Memory Mem free_range_perm thm
R9022:9040 compcert.common.Memory Mem free_range_perm thm
R9131:9138 compcert.common.Memory Mem perm def
R9131:9138 compcert.common.Memory Mem perm def
R9165:9171 compcert.backend.Deadcodeproof <> ma_perm proj
R9165:9171 compcert.backend.Deadcodeproof <> ma_perm proj
R9188:9202 compcert.common.Memory Mem perm_free_3 thm
R9188:9202 compcert.common.Memory Mem perm_free_3 thm
R9224:9240 compcert.common.Memory Mem perm_free_inv thm
R9294:9308 compcert.common.Memory Mem perm_free_2 thm
R9294:9308 compcert.common.Memory Mem perm_free_2 thm
R9365:9379 compcert.common.Memory Mem free_result thm
R9365:9379 compcert.common.Memory Mem free_result thm
R9407:9421 compcert.common.Memory Mem free_result thm
R9407:9421 compcert.common.Memory Mem free_result thm
R9457:9465 compcert.backend.Deadcodeproof <> ma_memval proj
R9457:9465 compcert.backend.Deadcodeproof <> ma_memval proj
R9482:9496 compcert.common.Memory Mem perm_free_3 thm
R9482:9496 compcert.common.Memory Mem perm_free_3 thm
R9534:9541 compcert.common.Values <> eq_block def
R9534:9541 compcert.common.Values <> eq_block def
R9594:9608 compcert.common.Memory Mem perm_free_2 thm
R9594:9608 compcert.common.Memory Mem perm_free_2 thm
R9666:9680 compcert.common.Memory Mem free_result thm
R9666:9680 compcert.common.Memory Mem free_result thm
R9708:9722 compcert.common.Memory Mem free_result thm
R9708:9722 compcert.common.Memory Mem free_result thm
R9757:9768 compcert.backend.Deadcodeproof <> ma_nextblock proj
R9757:9768 compcert.backend.Deadcodeproof <> ma_nextblock proj
prf 9835:9853 <> add_need_all_eagree
R9913:9918 compcert.backend.NeedDomain <> eagree def
R9925:9926 compcert.backend.Deadcodeproof <> ne var
R9922:9923 compcert.backend.Deadcodeproof <> e' var
R9920:9920 compcert.backend.Deadcodeproof <> e var
R9878:9883 compcert.backend.NeedDomain <> eagree def
R9891:9902 compcert.backend.Deadcode <> add_need_all def
R9906:9907 compcert.backend.Deadcodeproof <> ne var
R9904:9904 compcert.backend.Deadcodeproof <> r var
R9887:9888 compcert.backend.Deadcodeproof <> e' var
R9885:9885 compcert.backend.Deadcodeproof <> e var
R9985:9996 compcert.backend.Deadcode <> add_need_all def
R10010:10018 compcert.backend.NeedDomain NE gsspec thm
R10010:10018 compcert.backend.NeedDomain NE gsspec thm
R10031:10033 compcert.lib.Coqlib <> peq def
R10031:10033 compcert.lib.Coqlib <> peq def
prf 10069:10088 <> add_need_all_lessdef
R10148:10158 compcert.common.Values Val lessdef ind
R10166:10166 compcert.backend.Registers <> ::x_'#'_x not
R10167:10167 compcert.backend.Deadcodeproof <> r var
R10164:10165 compcert.backend.Deadcodeproof <> e' var
R10161:10161 compcert.backend.Registers <> ::x_'#'_x not
R10162:10162 compcert.backend.Deadcodeproof <> r var
R10160:10160 compcert.backend.Deadcodeproof <> e var
R10113:10118 compcert.backend.NeedDomain <> eagree def
R10126:10137 compcert.backend.Deadcode <> add_need_all def
R10141:10142 compcert.backend.Deadcodeproof <> ne var
R10139:10139 compcert.backend.Deadcodeproof <> r var
R10122:10123 compcert.backend.Deadcodeproof <> e' var
R10120:10120 compcert.backend.Deadcodeproof <> e var
R10212:10223 compcert.backend.Deadcode <> add_need_all def
R10237:10245 compcert.backend.NeedDomain NE gsspec thm
R10248:10255 compcert.lib.Coqlib <> peq_true thm
R10237:10245 compcert.backend.NeedDomain NE gsspec thm
R10248:10255 compcert.lib.Coqlib <> peq_true thm
prf 10284:10298 <> add_need_eagree
R10360:10365 compcert.backend.NeedDomain <> eagree def
R10372:10373 compcert.backend.Deadcodeproof <> ne var
R10369:10370 compcert.backend.Deadcodeproof <> e' var
R10367:10367 compcert.backend.Deadcodeproof <> e var
R10326:10331 compcert.backend.NeedDomain <> eagree def
R10339:10346 compcert.backend.Deadcode <> add_need def
R10353:10354 compcert.backend.Deadcodeproof <> ne var
R10350:10351 compcert.backend.Deadcodeproof <> nv var
R10348:10348 compcert.backend.Deadcodeproof <> r var
R10335:10336 compcert.backend.Deadcodeproof <> e' var
R10333:10333 compcert.backend.Deadcodeproof <> e var
R10432:10439 compcert.backend.Deadcode <> add_need def
R10452:10460 compcert.backend.NeedDomain NE gsspec thm
R10452:10460 compcert.backend.NeedDomain NE gsspec thm
R10473:10475 compcert.lib.Coqlib <> peq def
R10473:10475 compcert.lib.Coqlib <> peq def
R10517:10525 compcert.backend.NeedDomain <> nge_agree thm
R10517:10525 compcert.backend.NeedDomain <> nge_agree thm
R10541:10549 compcert.backend.NeedDomain <> nge_lub_r thm
R10541:10549 compcert.backend.NeedDomain <> nge_lub_r thm
prf 10564:10578 <> add_need_vagree
R10640:10645 compcert.backend.NeedDomain <> vagree def
R10656:10657 compcert.backend.Deadcodeproof <> nv var
R10653:10653 compcert.backend.Registers <> ::x_'#'_x not
R10654:10654 compcert.backend.Deadcodeproof <> r var
R10651:10652 compcert.backend.Deadcodeproof <> e' var
R10648:10648 compcert.backend.Registers <> ::x_'#'_x not
R10649:10649 compcert.backend.Deadcodeproof <> r var
R10647:10647 compcert.backend.Deadcodeproof <> e var
R10606:10611 compcert.backend.NeedDomain <> eagree def
R10619:10626 compcert.backend.Deadcode <> add_need def
R10633:10634 compcert.backend.Deadcodeproof <> ne var
R10630:10631 compcert.backend.Deadcodeproof <> nv var
R10628:10628 compcert.backend.Deadcodeproof <> r var
R10615:10616 compcert.backend.Deadcodeproof <> e' var
R10613:10613 compcert.backend.Deadcodeproof <> e var
R10702:10709 compcert.backend.Deadcode <> add_need def
R10722:10730 compcert.backend.NeedDomain NE gsspec thm
R10733:10740 compcert.lib.Coqlib <> peq_true thm
R10722:10730 compcert.backend.NeedDomain NE gsspec thm
R10733:10740 compcert.lib.Coqlib <> peq_true thm
R10758:10766 compcert.backend.NeedDomain <> nge_agree thm
R10758:10766 compcert.backend.NeedDomain <> nge_agree thm
R10782:10790 compcert.backend.NeedDomain <> nge_lub_l thm
R10782:10790 compcert.backend.NeedDomain <> nge_lub_l thm
prf 10805:10824 <> add_needs_all_eagree
R10887:10892 compcert.backend.NeedDomain <> eagree def
R10899:10900 compcert.backend.Deadcodeproof <> ne var
R10896:10897 compcert.backend.Deadcodeproof <> e' var
R10894:10894 compcert.backend.Deadcodeproof <> e var
R10850:10855 compcert.backend.NeedDomain <> eagree def
R10863:10875 compcert.backend.Deadcode <> add_needs_all def
R10880:10881 compcert.backend.Deadcodeproof <> ne var
R10877:10878 compcert.backend.Deadcodeproof <> rl var
R10859:10860 compcert.backend.Deadcodeproof <> e' var
R10857:10857 compcert.backend.Deadcodeproof <> e var
R10970:10988 compcert.backend.Deadcodeproof <> add_need_all_eagree thm
R10970:10988 compcert.backend.Deadcodeproof <> add_need_all_eagree thm
prf 11011:11031 <> add_needs_all_lessdef
R11094:11109 compcert.common.Values Val lessdef_list ind
R11119:11120 compcert.backend.Registers <> ::x_'##'_x not
R11117:11118 compcert.backend.Deadcodeproof <> e' var
R11121:11122 compcert.backend.Deadcodeproof <> rl var
R11112:11113 compcert.backend.Registers <> ::x_'##'_x not
R11111:11111 compcert.backend.Deadcodeproof <> e var
R11114:11115 compcert.backend.Deadcodeproof <> rl var
R11057:11062 compcert.backend.NeedDomain <> eagree def
R11070:11082 compcert.backend.Deadcode <> add_needs_all def
R11087:11088 compcert.backend.Deadcodeproof <> ne var
R11084:11085 compcert.backend.Deadcodeproof <> rl var
R11066:11067 compcert.backend.Deadcodeproof <> e' var
R11064:11064 compcert.backend.Deadcodeproof <> e var
R11201:11220 compcert.backend.Deadcodeproof <> add_need_all_lessdef thm
R11201:11220 compcert.backend.Deadcodeproof <> add_need_all_lessdef thm
R11253:11271 compcert.backend.Deadcodeproof <> add_need_all_eagree thm
R11253:11271 compcert.backend.Deadcodeproof <> add_need_all_eagree thm
prf 11294:11309 <> add_needs_eagree
R11376:11381 compcert.backend.NeedDomain <> eagree def
R11388:11389 compcert.backend.Deadcodeproof <> ne var
R11385:11386 compcert.backend.Deadcodeproof <> e' var
R11383:11383 compcert.backend.Deadcodeproof <> e var
R11339:11344 compcert.backend.NeedDomain <> eagree def
R11352:11360 compcert.backend.Deadcode <> add_needs def
R11369:11370 compcert.backend.Deadcodeproof <> ne var
R11365:11367 compcert.backend.Deadcodeproof <> nvl var
R11362:11363 compcert.backend.Deadcodeproof <> rl var
R11348:11349 compcert.backend.Deadcodeproof <> e' var
R11346:11346 compcert.backend.Deadcodeproof <> e var
R11488:11491 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R11460:11479 compcert.backend.Deadcodeproof <> add_needs_all_eagree thm
R11488:11491 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R11460:11479 compcert.backend.Deadcodeproof <> add_needs_all_eagree thm
R11525:11539 compcert.backend.Deadcodeproof <> add_need_eagree thm
R11525:11539 compcert.backend.Deadcodeproof <> add_need_eagree thm
prf 11562:11577 <> add_needs_vagree
R11644:11654 compcert.backend.NeedDomain <> vagree_list ind
R11669:11671 compcert.backend.Deadcodeproof <> nvl var
R11664:11665 compcert.backend.Registers <> ::x_'##'_x not
R11662:11663 compcert.backend.Deadcodeproof <> e' var
R11666:11667 compcert.backend.Deadcodeproof <> rl var
R11657:11658 compcert.backend.Registers <> ::x_'##'_x not
R11656:11656 compcert.backend.Deadcodeproof <> e var
R11659:11660 compcert.backend.Deadcodeproof <> rl var
R11607:11612 compcert.backend.NeedDomain <> eagree def
R11620:11628 compcert.backend.Deadcode <> add_needs def
R11637:11638 compcert.backend.Deadcodeproof <> ne var
R11633:11635 compcert.backend.Deadcodeproof <> nvl var
R11630:11631 compcert.backend.Deadcodeproof <> rl var
R11616:11617 compcert.backend.Deadcodeproof <> e' var
R11614:11614 compcert.backend.Deadcodeproof <> e var
R11751:11769 compcert.backend.NeedDomain <> vagree_lessdef_list thm
R11751:11769 compcert.backend.NeedDomain <> vagree_lessdef_list thm
R11814:11817 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R11779:11799 compcert.backend.Deadcodeproof <> add_needs_all_lessdef thm
R11814:11817 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R11779:11799 compcert.backend.Deadcodeproof <> add_needs_all_lessdef thm
R11852:11866 compcert.backend.Deadcodeproof <> add_need_vagree thm
R11852:11866 compcert.backend.Deadcodeproof <> add_need_vagree thm
R11899:11913 compcert.backend.Deadcodeproof <> add_need_eagree thm
R11899:11913 compcert.backend.Deadcodeproof <> add_need_eagree thm
prf 11936:11954 <> add_ros_need_eagree
R12020:12025 compcert.backend.NeedDomain <> eagree def
R12032:12033 compcert.backend.Deadcodeproof <> ne var
R12029:12030 compcert.backend.Deadcodeproof <> e' var
R12027:12027 compcert.backend.Deadcodeproof <> e var
R11979:11984 compcert.backend.NeedDomain <> eagree def
R11992:12007 compcert.backend.Deadcode <> add_ros_need_all def
R12013:12014 compcert.backend.Deadcodeproof <> ne var
R12009:12011 compcert.backend.Deadcodeproof <> ros var
R11988:11989 compcert.backend.Deadcodeproof <> e' var
R11986:11986 compcert.backend.Deadcodeproof <> e var
R12086:12104 compcert.backend.Deadcodeproof <> add_need_all_eagree thm
R12086:12104 compcert.backend.Deadcodeproof <> add_need_all_eagree thm
R12140:12158 compcert.backend.Deadcodeproof <> add_need_all_eagree thm
R12160:12179 compcert.backend.Deadcodeproof <> add_need_all_lessdef thm
R12194:12208 compcert.backend.Deadcodeproof <> add_need_eagree thm
R12210:12224 compcert.backend.Deadcodeproof <> add_need_vagree thm
R12239:12258 compcert.backend.Deadcodeproof <> add_needs_all_eagree thm
R12260:12280 compcert.backend.Deadcodeproof <> add_needs_all_lessdef thm
R12295:12310 compcert.backend.Deadcodeproof <> add_needs_eagree thm
R12312:12327 compcert.backend.Deadcodeproof <> add_needs_vagree thm
R12342:12360 compcert.backend.Deadcodeproof <> add_ros_need_eagree thm
prf 12374:12389 <> eagree_init_regs
R12450:12455 compcert.backend.NeedDomain <> eagree def
R12495:12496 compcert.backend.Deadcodeproof <> ne var
R12477:12485 compcert.backend.RTL <> init_regs def
R12491:12492 compcert.backend.Deadcodeproof <> rl var
R12487:12489 compcert.backend.Deadcodeproof <> vl2 var
R12458:12466 compcert.backend.RTL <> init_regs def
R12472:12473 compcert.backend.Deadcodeproof <> rl var
R12468:12470 compcert.backend.Deadcodeproof <> vl1 var
R12418:12433 compcert.common.Values Val lessdef_list ind
R12439:12441 compcert.backend.Deadcodeproof <> vl2 var
R12435:12437 compcert.backend.Deadcodeproof <> vl1 var
R12623:12635 compcert.backend.NeedDomain <> eagree_update thm
R12623:12635 compcert.backend.NeedDomain <> eagree_update thm
sec 12712:12723 <> PRESERVATION
var 12736:12739 PRESERVATION prog
R12742:12748 compcert.backend.RTL <> program def
var 12760:12764 PRESERVATION tprog
R12767:12773 compcert.backend.RTL <> program def
var 12787:12792 PRESERVATION TRANSF
R12814:12816 Coq.Init.Logic <> :type_scope:x_'='_x not
R12795:12808 compcert.backend.Deadcode <> transf_program def
R12810:12813 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R12817:12818 compcert.common.Errors <> OK constr
R12820:12824 compcert.backend.Deadcodeproof <> PRESERVATION.tprog var
var 12831:12832 PRESERVATION ge
R12837:12850 compcert.common.Globalenvs Genv globalenv def
R12852:12855 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
var 12862:12864 PRESERVATION tge
R12869:12882 compcert.common.Globalenvs Genv globalenv def
R12884:12888 compcert.backend.Deadcodeproof <> PRESERVATION.tprog var
var 12895:12896 PRESERVATION rm
R12901:12917 compcert.backend.ValueAnalysis <> romem_for_program def
R12919:12922 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
prf 12932:12948 <> symbols_preserved
R12964:12968 compcert.common.AST <> ident def
R12994:12996 Coq.Init.Logic <> :type_scope:x_'='_x not
R12972:12987 compcert.common.Globalenvs Genv find_symbol def
R12993:12993 compcert.backend.Deadcodeproof <> s var
R12989:12991 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R12997:13012 compcert.common.Globalenvs Genv find_symbol def
R13017:13017 compcert.backend.Deadcodeproof <> s var
R13014:13015 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R13043:13044 compcert.backend.Deadcodeproof <> ge vardef
R13047:13049 compcert.backend.Deadcodeproof <> tge vardef
R13098:13110 compcert.backend.Deadcode <> transf_fundef def
R13112:13113 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R13060:13090 compcert.common.Globalenvs Genv find_symbol_transf_partial thm
R13098:13110 compcert.backend.Deadcode <> transf_fundef def
R13112:13113 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R13060:13090 compcert.common.Globalenvs Genv find_symbol_transf_partial thm
R13125:13130 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
R13125:13130 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
prf 13145:13161 <> varinfo_preserved
R13200:13202 Coq.Init.Logic <> :type_scope:x_'='_x not
R13176:13193 compcert.common.Globalenvs Genv find_var_info def
R13199:13199 compcert.backend.Deadcodeproof <> b var
R13195:13197 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R13203:13220 compcert.common.Globalenvs Genv find_var_info def
R13225:13225 compcert.backend.Deadcodeproof <> b var
R13222:13223 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R13251:13252 compcert.backend.Deadcodeproof <> ge vardef
R13255:13257 compcert.backend.Deadcodeproof <> tge vardef
R13308:13320 compcert.backend.Deadcode <> transf_fundef def
R13322:13323 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R13268:13300 compcert.common.Globalenvs Genv find_var_info_transf_partial thm
R13308:13320 compcert.backend.Deadcode <> transf_fundef def
R13322:13323 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R13268:13300 compcert.common.Globalenvs Genv find_var_info_transf_partial thm
R13335:13340 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
R13335:13340 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
prf 13355:13374 <> functions_translated
R13390:13392 compcert.common.Values <> val ind
R13399:13408 compcert.backend.RTL <> fundef def
R13449:13455 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13458:13461 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13493:13496 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13483:13485 Coq.Init.Logic <> :type_scope:x_'='_x not
R13462:13476 compcert.common.Globalenvs Genv find_funct def
R13482:13482 compcert.backend.Deadcodeproof <> v var
R13478:13480 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R13486:13489 Coq.Init.Datatypes <> Some constr
R13491:13492 compcert.backend.Deadcodeproof <> tf var
R13515:13517 Coq.Init.Logic <> :type_scope:x_'='_x not
R13497:13509 compcert.backend.Deadcode <> transf_fundef def
R13514:13514 compcert.backend.Deadcodeproof <> f var
R13511:13512 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R13518:13519 compcert.common.Errors <> OK constr
R13521:13522 compcert.backend.Deadcodeproof <> tf var
R13434:13436 Coq.Init.Logic <> :type_scope:x_'='_x not
R13414:13428 compcert.common.Globalenvs Genv find_funct def
R13433:13433 compcert.backend.Deadcodeproof <> v var
R13430:13431 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R13437:13440 Coq.Init.Datatypes <> Some constr
R13442:13442 compcert.backend.Deadcodeproof <> f var
R13532:13561 compcert.common.Globalenvs Genv find_funct_transf_partial thm
R13584:13589 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
R13564:13576 compcert.backend.Deadcode <> transf_fundef def
R13578:13579 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
prf 13600:13622 <> function_ptr_translated
R13638:13642 compcert.common.Values <> block def
R13649:13658 compcert.backend.RTL <> fundef def
R13703:13709 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13712:13715 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13751:13754 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13741:13743 Coq.Init.Logic <> :type_scope:x_'='_x not
R13716:13734 compcert.common.Globalenvs Genv find_funct_ptr def
R13740:13740 compcert.backend.Deadcodeproof <> b var
R13736:13738 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R13744:13747 Coq.Init.Datatypes <> Some constr
R13749:13750 compcert.backend.Deadcodeproof <> tf var
R13773:13775 Coq.Init.Logic <> :type_scope:x_'='_x not
R13755:13767 compcert.backend.Deadcode <> transf_fundef def
R13772:13772 compcert.backend.Deadcodeproof <> f var
R13769:13770 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R13776:13777 compcert.common.Errors <> OK constr
R13779:13780 compcert.backend.Deadcodeproof <> tf var
R13688:13690 Coq.Init.Logic <> :type_scope:x_'='_x not
R13664:13682 compcert.common.Globalenvs Genv find_funct_ptr def
R13687:13687 compcert.backend.Deadcodeproof <> b var
R13684:13685 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R13691:13694 Coq.Init.Datatypes <> Some constr
R13696:13696 compcert.backend.Deadcodeproof <> f var
R13790:13823 compcert.common.Globalenvs Genv find_funct_ptr_transf_partial thm
R13846:13851 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
R13826:13838 compcert.backend.Deadcode <> transf_fundef def
R13840:13841 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
prf 13862:13884 <> sig_function_translated
R13945:13947 Coq.Init.Logic <> :type_scope:x_'='_x not
R13936:13941 compcert.backend.RTL <> funsig def
R13943:13944 compcert.backend.Deadcodeproof <> tf var
R13948:13953 compcert.backend.RTL <> funsig def
R13955:13955 compcert.backend.Deadcodeproof <> f var
R13922:13924 Coq.Init.Logic <> :type_scope:x_'='_x not
R13904:13916 compcert.backend.Deadcode <> transf_fundef def
R13921:13921 compcert.backend.Deadcodeproof <> f var
R13918:13919 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R13925:13926 compcert.common.Errors <> OK constr
R13928:13929 compcert.backend.Deadcodeproof <> tf var
R14008:14022 compcert.backend.Deadcode <> transf_function def
R14044:14050 compcert.backend.Deadcode <> analyze def
R14053:14060 compcert.backend.Deadcode <> vanalyze def
R14062:14063 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R14044:14050 compcert.backend.Deadcode <> analyze def
R14053:14060 compcert.backend.Deadcode <> vanalyze def
R14062:14063 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
prf 14107:14126 <> stacksize_translated
R14195:14197 Coq.Init.Logic <> :type_scope:x_'='_x not
R14182:14193 compcert.backend.RTL <> fn_stacksize proj
R14178:14179 compcert.backend.Deadcodeproof <> tf var
R14201:14212 compcert.backend.RTL <> fn_stacksize proj
R14198:14198 compcert.backend.Deadcodeproof <> f var
R14166:14168 Coq.Init.Logic <> :type_scope:x_'='_x not
R14146:14160 compcert.backend.Deadcode <> transf_function def
R14165:14165 compcert.backend.Deadcodeproof <> f var
R14162:14163 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R14169:14170 compcert.common.Errors <> OK constr
R14172:14173 compcert.backend.Deadcodeproof <> tf var
R14232:14246 compcert.backend.Deadcode <> transf_function def
R14267:14273 compcert.backend.Deadcode <> analyze def
R14276:14283 compcert.backend.Deadcode <> vanalyze def
R14285:14286 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R14267:14273 compcert.backend.Deadcode <> analyze def
R14276:14283 compcert.backend.Deadcode <> vanalyze def
R14285:14286 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
prf 14320:14337 <> transf_function_at
R14492:14494 Coq.Init.Logic <> :type_scope:x_'='_x not
R14489:14489 compcert.lib.Maps <> ::x_'!'_x not
R14490:14491 compcert.backend.Deadcodeproof <> pc var
R14481:14487 compcert.backend.RTL <> fn_code proj
R14477:14478 compcert.backend.Deadcodeproof <> tf var
R14495:14498 Coq.Init.Datatypes <> Some constr
R14500:14511 compcert.backend.Deadcode <> transf_instr def
R14535:14539 compcert.backend.Deadcodeproof <> instr var
R14532:14533 compcert.backend.Deadcodeproof <> pc var
R14529:14530 compcert.backend.Deadcodeproof <> an var
R14514:14521 compcert.backend.Deadcode <> vanalyze def
R14526:14526 compcert.backend.Deadcodeproof <> f var
R14523:14524 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R14458:14460 Coq.Init.Logic <> :type_scope:x_'='_x not
R14455:14455 compcert.lib.Maps <> ::x_'!'_x not
R14456:14457 compcert.backend.Deadcodeproof <> pc var
R14447:14453 compcert.backend.RTL <> fn_code proj
R14444:14444 compcert.backend.Deadcodeproof <> f var
R14461:14464 Coq.Init.Datatypes <> Some constr
R14466:14470 compcert.backend.Deadcodeproof <> instr var
R14428:14430 Coq.Init.Logic <> :type_scope:x_'='_x not
R14403:14409 compcert.backend.Deadcode <> analyze def
R14427:14427 compcert.backend.Deadcodeproof <> f var
R14412:14419 compcert.backend.Deadcode <> vanalyze def
R14424:14424 compcert.backend.Deadcodeproof <> f var
R14421:14422 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R14431:14434 Coq.Init.Datatypes <> Some constr
R14436:14437 compcert.backend.Deadcodeproof <> an var
R14389:14391 Coq.Init.Logic <> :type_scope:x_'='_x not
R14369:14383 compcert.backend.Deadcode <> transf_function def
R14388:14388 compcert.backend.Deadcodeproof <> f var
R14385:14386 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R14392:14393 compcert.common.Errors <> OK constr
R14395:14396 compcert.backend.Deadcodeproof <> tf var
R14567:14581 compcert.backend.Deadcode <> transf_function def
R14631:14640 compcert.lib.Maps PTree gmap thm
R14631:14640 compcert.lib.Maps PTree gmap thm
prf 14674:14688 <> is_dead_sound_1
R14727:14729 Coq.Init.Logic <> :type_scope:x_'='_x not
R14725:14726 compcert.backend.Deadcodeproof <> nv var
R14730:14736 compcert.backend.NeedDomain <> Nothing constr
R14714:14716 Coq.Init.Logic <> :type_scope:x_'='_x not
R14704:14710 compcert.backend.Deadcode <> is_dead def
R14712:14713 compcert.backend.Deadcodeproof <> nv var
R14717:14720 Coq.Init.Datatypes <> true constr
prf 14793:14807 <> is_dead_sound_2
R14847:14850 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R14845:14846 compcert.backend.Deadcodeproof <> nv var
R14851:14857 compcert.backend.NeedDomain <> Nothing constr
R14833:14835 Coq.Init.Logic <> :type_scope:x_'='_x not
R14823:14829 compcert.backend.Deadcode <> is_dead def
R14831:14832 compcert.backend.Deadcodeproof <> nv var
R14836:14840 Coq.Init.Datatypes <> false constr
R14933:14947 compcert.backend.Deadcodeproof <> is_dead_sound_1 thm
R14949:14963 compcert.backend.Deadcodeproof <> is_dead_sound_2 thm
prf 14977:14993 <> is_int_zero_sound
R15036:15038 Coq.Init.Logic <> :type_scope:x_'='_x not
R15034:15035 compcert.backend.Deadcodeproof <> nv var
R15039:15039 compcert.backend.NeedDomain <> I constr
R15041:15048 compcert.lib.Integers Int zero def
R15023:15025 Coq.Init.Logic <> :type_scope:x_'='_x not
R15009:15019 compcert.backend.Deadcode <> is_int_zero def
R15021:15022 compcert.backend.Deadcodeproof <> nv var
R15026:15029 Coq.Init.Datatypes <> true constr
R15067:15077 compcert.backend.Deadcode <> is_int_zero def
R15143:15150 compcert.lib.Integers Int zero def
R15129:15139 compcert.lib.Integers Int eq_spec thm
R15122:15127 compcert.lib.Integers Int eq def
prf 15179:15202 <> find_function_translated
R15318:15324 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15328:15329 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15366:15369 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15355:15357 Coq.Init.Logic <> :type_scope:x_'='_x not
R15330:15342 compcert.backend.RTL <> find_function def
R15352:15354 compcert.backend.Deadcodeproof <> trs var
R15348:15350 compcert.backend.Deadcodeproof <> ros var
R15344:15346 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R15358:15361 Coq.Init.Datatypes <> Some constr
R15363:15365 compcert.backend.Deadcodeproof <> tfd var
R15389:15391 Coq.Init.Logic <> :type_scope:x_'='_x not
R15370:15382 compcert.backend.Deadcode <> transf_fundef def
R15387:15388 compcert.backend.Deadcodeproof <> fd var
R15384:15385 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R15392:15393 compcert.common.Errors <> OK constr
R15395:15397 compcert.backend.Deadcodeproof <> tfd var
R15273:15278 compcert.backend.NeedDomain <> eagree def
R15288:15303 compcert.backend.Deadcode <> add_ros_need_all def
R15309:15310 compcert.backend.Deadcodeproof <> ne var
R15305:15307 compcert.backend.Deadcodeproof <> ros var
R15283:15285 compcert.backend.Deadcodeproof <> trs var
R15280:15281 compcert.backend.Deadcodeproof <> rs var
R15257:15259 Coq.Init.Logic <> :type_scope:x_'='_x not
R15234:15246 compcert.backend.RTL <> find_function def
R15255:15256 compcert.backend.Deadcodeproof <> rs var
R15251:15253 compcert.backend.Deadcodeproof <> ros var
R15248:15249 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R15260:15263 Coq.Init.Datatypes <> Some constr
R15265:15266 compcert.backend.Deadcodeproof <> fd var
R15467:15477 compcert.common.Values Val lessdef ind
R15487:15487 compcert.backend.Registers <> ::x_'#'_x not
R15481:15481 compcert.backend.Registers <> ::x_'#'_x not
R15467:15477 compcert.common.Values Val lessdef ind
R15487:15487 compcert.backend.Registers <> ::x_'#'_x not
R15481:15481 compcert.backend.Registers <> ::x_'#'_x not
R15525:15544 compcert.backend.Deadcodeproof <> functions_translated thm
R15525:15544 compcert.backend.Deadcodeproof <> functions_translated thm
R15599:15615 compcert.backend.Deadcodeproof <> symbols_preserved thm
R15599:15615 compcert.backend.Deadcodeproof <> symbols_preserved thm
R15628:15643 compcert.common.Globalenvs Genv find_symbol def
R15645:15646 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R15628:15643 compcert.common.Globalenvs Genv find_symbol def
R15645:15646 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R15679:15701 compcert.backend.Deadcodeproof <> function_ptr_translated thm
R15679:15701 compcert.backend.Deadcodeproof <> function_ptr_translated thm
ind 15755:15771 <> match_stackframes
constr 15814:15836 <> match_stackframes_intro
R15788:15797 compcert.backend.RTL <> stackframe ind
R15774:15783 compcert.backend.RTL <> stackframe ind
R15909:15911 Coq.Init.Logic <> :type_scope:x_'='_x not
R15889:15903 compcert.backend.Deadcode <> transf_function def
R15908:15908 compcert.backend.Deadcodeproof <> f var
R15905:15906 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R15912:15913 compcert.common.Errors <> OK constr
R15915:15916 compcert.backend.Deadcodeproof <> tf var
R15958:15960 Coq.Init.Logic <> :type_scope:x_'='_x not
R15933:15939 compcert.backend.Deadcode <> analyze def
R15957:15957 compcert.backend.Deadcodeproof <> f var
R15942:15949 compcert.backend.Deadcode <> vanalyze def
R15954:15954 compcert.backend.Deadcodeproof <> f var
R15951:15952 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R15961:15964 Coq.Init.Datatypes <> Some constr
R15966:15967 compcert.backend.Deadcodeproof <> an var
R16045:16050 compcert.backend.NeedDomain <> eagree def
R16101:16103 Coq.Init.Datatypes <> fst def
R16106:16113 compcert.backend.Deadcode <> transfer def
R16138:16139 compcert.lib.Maps <> ::x_'!!'_x not
R16140:16141 compcert.backend.Deadcodeproof <> pc var
R16136:16137 compcert.backend.Deadcodeproof <> an var
R16133:16134 compcert.backend.Deadcodeproof <> pc var
R16118:16125 compcert.backend.Deadcode <> vanalyze def
R16130:16130 compcert.backend.Deadcodeproof <> f var
R16127:16128 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R16115:16115 compcert.backend.Deadcodeproof <> f var
R16068:16068 compcert.backend.Registers <> ::x_'#'_x_'<-'_x not
R16072:16074 compcert.backend.Registers <> ::x_'#'_x_'<-'_x not
R16069:16071 compcert.backend.Deadcodeproof <> res var
R16075:16076 compcert.backend.Deadcodeproof <> tv var
R16066:16067 compcert.backend.Deadcodeproof <> te var
R16054:16054 compcert.backend.Registers <> ::x_'#'_x_'<-'_x not
R16058:16061 compcert.backend.Registers <> ::x_'#'_x_'<-'_x not
R16055:16057 compcert.backend.Deadcodeproof <> res var
R16062:16062 compcert.backend.Deadcodeproof <> v var
R16053:16053 compcert.backend.Deadcodeproof <> e var
R16011:16021 compcert.common.Values Val lessdef ind
R16025:16026 compcert.backend.Deadcodeproof <> tv var
R16023:16023 compcert.backend.Deadcodeproof <> v var
R16153:16169 compcert.backend.Deadcodeproof <> match_stackframes ind
R16239:16248 compcert.backend.RTL <> Stackframe constr
R16279:16280 compcert.backend.Deadcodeproof <> te var
R16276:16277 compcert.backend.Deadcodeproof <> pc var
R16258:16261 compcert.common.Values <> Vptr constr
R16266:16273 compcert.lib.Integers Int zero def
R16263:16264 compcert.backend.Deadcodeproof <> sp var
R16254:16255 compcert.backend.Deadcodeproof <> tf var
R16250:16252 compcert.backend.Deadcodeproof <> res var
R16172:16181 compcert.backend.RTL <> Stackframe constr
R16211:16211 compcert.backend.Deadcodeproof <> e var
R16208:16209 compcert.backend.Deadcodeproof <> pc var
R16190:16193 compcert.common.Values <> Vptr constr
R16198:16205 compcert.lib.Integers Int zero def
R16195:16196 compcert.backend.Deadcodeproof <> sp var
R16187:16187 compcert.backend.Deadcodeproof <> f var
R16183:16185 compcert.backend.Deadcodeproof <> res var
ind 16295:16306 <> match_states
constr 16339:16358 <> match_regular_states
constr 16833:16849 <> match_call_states
constr 17156:17174 <> match_return_states
R16318:16322 compcert.backend.RTL <> state ind
R16309:16313 compcert.backend.RTL <> state ind
R16420:16431 compcert.lib.Coqlib <> list_forall2 ind
R16453:16454 compcert.backend.Deadcodeproof <> ts var
R16451:16451 compcert.backend.Deadcodeproof <> s var
R16433:16449 compcert.backend.Deadcodeproof <> match_stackframes ind
R16491:16493 Coq.Init.Logic <> :type_scope:x_'='_x not
R16471:16485 compcert.backend.Deadcode <> transf_function def
R16490:16490 compcert.backend.Deadcodeproof <> f var
R16487:16488 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R16494:16495 compcert.common.Errors <> OK constr
R16497:16498 compcert.backend.Deadcodeproof <> tf var
R16540:16542 Coq.Init.Logic <> :type_scope:x_'='_x not
R16515:16521 compcert.backend.Deadcode <> analyze def
R16539:16539 compcert.backend.Deadcodeproof <> f var
R16524:16531 compcert.backend.Deadcode <> vanalyze def
R16536:16536 compcert.backend.Deadcodeproof <> f var
R16533:16534 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R16543:16546 Coq.Init.Datatypes <> Some constr
R16548:16549 compcert.backend.Deadcodeproof <> an var
R16566:16571 compcert.backend.NeedDomain <> eagree def
R16579:16581 Coq.Init.Datatypes <> fst def
R16584:16591 compcert.backend.Deadcode <> transfer def
R16616:16617 compcert.lib.Maps <> ::x_'!!'_x not
R16618:16619 compcert.backend.Deadcodeproof <> pc var
R16614:16615 compcert.backend.Deadcodeproof <> an var
R16611:16612 compcert.backend.Deadcodeproof <> pc var
R16596:16603 compcert.backend.Deadcode <> vanalyze def
R16608:16608 compcert.backend.Deadcodeproof <> f var
R16605:16606 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R16593:16593 compcert.backend.Deadcodeproof <> f var
R16575:16576 compcert.backend.Deadcodeproof <> te var
R16573:16573 compcert.backend.Deadcodeproof <> e var
R16638:16643 compcert.backend.Deadcodeproof <> magree rec
R16651:16655 compcert.backend.NeedDomain <> nlive ind
R16664:16666 Coq.Init.Datatypes <> snd def
R16669:16676 compcert.backend.Deadcode <> transfer def
R16701:16702 compcert.lib.Maps <> ::x_'!!'_x not
R16703:16704 compcert.backend.Deadcodeproof <> pc var
R16699:16700 compcert.backend.Deadcodeproof <> an var
R16696:16697 compcert.backend.Deadcodeproof <> pc var
R16681:16688 compcert.backend.Deadcode <> vanalyze def
R16693:16693 compcert.backend.Deadcodeproof <> f var
R16690:16691 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R16678:16678 compcert.backend.Deadcodeproof <> f var
R16660:16661 compcert.backend.Deadcodeproof <> sp var
R16657:16658 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R16647:16648 compcert.backend.Deadcodeproof <> tm var
R16645:16645 compcert.backend.Deadcodeproof <> m var
R16717:16728 compcert.backend.Deadcodeproof <> match_states ind
R16788:16792 compcert.backend.RTL <> State constr
R16825:16826 compcert.backend.Deadcodeproof <> tm var
R16822:16823 compcert.backend.Deadcodeproof <> te var
R16819:16820 compcert.backend.Deadcodeproof <> pc var
R16801:16804 compcert.common.Values <> Vptr constr
R16809:16816 compcert.lib.Integers Int zero def
R16806:16807 compcert.backend.Deadcodeproof <> sp var
R16797:16798 compcert.backend.Deadcodeproof <> tf var
R16794:16795 compcert.backend.Deadcodeproof <> ts var
R16731:16735 compcert.backend.RTL <> State constr
R16765:16765 compcert.backend.Deadcodeproof <> m var
R16763:16763 compcert.backend.Deadcodeproof <> e var
R16760:16761 compcert.backend.Deadcodeproof <> pc var
R16742:16745 compcert.common.Values <> Vptr constr
R16750:16757 compcert.lib.Integers Int zero def
R16747:16748 compcert.backend.Deadcodeproof <> sp var
R16739:16739 compcert.backend.Deadcodeproof <> f var
R16737:16737 compcert.backend.Deadcodeproof <> s var
R16908:16919 compcert.lib.Coqlib <> list_forall2 ind
R16941:16942 compcert.backend.Deadcodeproof <> ts var
R16939:16939 compcert.backend.Deadcodeproof <> s var
R16921:16937 compcert.backend.Deadcodeproof <> match_stackframes ind
R16977:16979 Coq.Init.Logic <> :type_scope:x_'='_x not
R16959:16971 compcert.backend.Deadcode <> transf_fundef def
R16976:16976 compcert.backend.Deadcodeproof <> f var
R16973:16974 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R16980:16981 compcert.common.Errors <> OK constr
R16983:16984 compcert.backend.Deadcodeproof <> tf var
R17002:17017 compcert.common.Values Val lessdef_list ind
R17024:17028 compcert.backend.Deadcodeproof <> targs var
R17019:17022 compcert.backend.Deadcodeproof <> args var
R17045:17055 compcert.common.Memory Mem extends def
R17059:17060 compcert.backend.Deadcodeproof <> tm var
R17057:17057 compcert.backend.Deadcodeproof <> m var
R17070:17081 compcert.backend.Deadcodeproof <> match_states ind
R17126:17134 compcert.backend.RTL <> Callstate constr
R17148:17149 compcert.backend.Deadcodeproof <> tm var
R17142:17146 compcert.backend.Deadcodeproof <> targs var
R17139:17140 compcert.backend.Deadcodeproof <> tf var
R17136:17137 compcert.backend.Deadcodeproof <> ts var
R17084:17092 compcert.backend.RTL <> Callstate constr
R17103:17103 compcert.backend.Deadcodeproof <> m var
R17098:17101 compcert.backend.Deadcodeproof <> args var
R17096:17096 compcert.backend.Deadcodeproof <> f var
R17094:17094 compcert.backend.Deadcodeproof <> s var
R17222:17233 compcert.lib.Coqlib <> list_forall2 ind
R17255:17256 compcert.backend.Deadcodeproof <> ts var
R17253:17253 compcert.backend.Deadcodeproof <> s var
R17235:17251 compcert.backend.Deadcodeproof <> match_stackframes ind
R17273:17283 compcert.common.Values Val lessdef ind
R17287:17288 compcert.backend.Deadcodeproof <> tv var
R17285:17285 compcert.backend.Deadcodeproof <> v var
R17305:17315 compcert.common.Memory Mem extends def
R17319:17320 compcert.backend.Deadcodeproof <> tm var
R17317:17317 compcert.backend.Deadcodeproof <> m var
R17330:17341 compcert.backend.Deadcodeproof <> match_states ind
R17383:17393 compcert.backend.RTL <> Returnstate constr
R17401:17402 compcert.backend.Deadcodeproof <> tm var
R17398:17399 compcert.backend.Deadcodeproof <> tv var
R17395:17396 compcert.backend.Deadcodeproof <> ts var
R17344:17354 compcert.backend.RTL <> Returnstate constr
R17360:17360 compcert.backend.Deadcodeproof <> m var
R17358:17358 compcert.backend.Deadcodeproof <> v var
R17356:17356 compcert.backend.Deadcodeproof <> s var
prf 17455:17472 <> analyze_successors
R17616:17620 compcert.backend.NeedDomain NA ge defax
R17630:17637 compcert.backend.Deadcode <> transfer def
R17663:17664 compcert.lib.Maps <> ::x_'!!'_x not
R17665:17667 compcert.backend.Deadcodeproof <> pc' var
R17661:17662 compcert.backend.Deadcodeproof <> an var
R17657:17659 compcert.backend.Deadcodeproof <> pc' var
R17642:17649 compcert.backend.Deadcode <> vanalyze def
R17654:17654 compcert.backend.Deadcodeproof <> f var
R17651:17652 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R17639:17639 compcert.backend.Deadcodeproof <> f var
R17624:17625 compcert.lib.Maps <> ::x_'!!'_x not
R17626:17627 compcert.backend.Deadcodeproof <> pc var
R17622:17623 compcert.backend.Deadcodeproof <> an var
R17579:17580 Coq.Lists.List <> In def
R17587:17602 compcert.backend.RTL <> successors_instr def
R17604:17608 compcert.backend.Deadcodeproof <> instr var
R17582:17584 compcert.backend.Deadcodeproof <> pc' var
R17560:17562 Coq.Init.Logic <> :type_scope:x_'='_x not
R17557:17557 compcert.lib.Maps <> ::x_'!'_x not
R17558:17559 compcert.backend.Deadcodeproof <> pc var
R17549:17555 compcert.backend.RTL <> fn_code proj
R17546:17546 compcert.backend.Deadcodeproof <> f var
R17563:17566 Coq.Init.Datatypes <> Some constr
R17568:17572 compcert.backend.Deadcodeproof <> instr var
R17530:17532 Coq.Init.Logic <> :type_scope:x_'='_x not
R17505:17511 compcert.backend.Deadcode <> analyze def
R17529:17529 compcert.backend.Deadcodeproof <> f var
R17514:17521 compcert.backend.Deadcode <> vanalyze def
R17526:17526 compcert.backend.Deadcodeproof <> f var
R17523:17524 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R17533:17536 Coq.Init.Datatypes <> Some constr
R17538:17539 compcert.backend.Deadcodeproof <> an var
R17695:17714 compcert.backend.Deadcode DS fixpoint_solution prfax
R17695:17714 compcert.backend.Deadcode DS fixpoint_solution prfax
R17741:17748 compcert.backend.Deadcode <> transfer def
R17781:17792 compcert.backend.Deadcode DS.L eq_refl prfax
R17781:17792 compcert.backend.Deadcode DS.L eq_refl prfax
prf 17807:17823 <> match_succ_states
R17893:17904 compcert.lib.Coqlib <> list_forall2 ind
R17926:17927 compcert.backend.Deadcodeproof <> ts var
R17924:17924 compcert.backend.Deadcodeproof <> s var
R17906:17922 compcert.backend.Deadcodeproof <> match_stackframes ind
R17960:17962 Coq.Init.Logic <> :type_scope:x_'='_x not
R17940:17954 compcert.backend.Deadcode <> transf_function def
R17959:17959 compcert.backend.Deadcodeproof <> f var
R17956:17957 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R17963:17964 compcert.common.Errors <> OK constr
R17966:17967 compcert.backend.Deadcodeproof <> tf var
R18005:18007 Coq.Init.Logic <> :type_scope:x_'='_x not
R17980:17986 compcert.backend.Deadcode <> analyze def
R18004:18004 compcert.backend.Deadcodeproof <> f var
R17989:17996 compcert.backend.Deadcode <> vanalyze def
R18001:18001 compcert.backend.Deadcodeproof <> f var
R17998:17999 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R18008:18011 Coq.Init.Datatypes <> Some constr
R18013:18014 compcert.backend.Deadcodeproof <> an var
R18043:18045 Coq.Init.Logic <> :type_scope:x_'='_x not
R18040:18040 compcert.lib.Maps <> ::x_'!'_x not
R18041:18042 compcert.backend.Deadcodeproof <> pc var
R18032:18038 compcert.backend.RTL <> fn_code proj
R18029:18029 compcert.backend.Deadcodeproof <> f var
R18046:18049 Coq.Init.Datatypes <> Some constr
R18051:18055 compcert.backend.Deadcodeproof <> instr var
R18069:18070 Coq.Lists.List <> In def
R18077:18092 compcert.backend.RTL <> successors_instr def
R18094:18098 compcert.backend.Deadcodeproof <> instr var
R18072:18074 compcert.backend.Deadcodeproof <> pc' var
R18119:18121 Coq.Init.Logic <> :type_scope:x_'='_x not
R18115:18116 compcert.lib.Maps <> ::x_'!!'_x not
R18117:18118 compcert.backend.Deadcodeproof <> pc var
R18113:18114 compcert.backend.Deadcodeproof <> an var
R18122:18122 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18125:18126 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18129:18129 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R18123:18124 compcert.backend.Deadcodeproof <> ne var
R18127:18128 compcert.backend.Deadcodeproof <> nm var
R18142:18147 compcert.backend.NeedDomain <> eagree def
R18154:18155 compcert.backend.Deadcodeproof <> ne var
R18151:18152 compcert.backend.Deadcodeproof <> te var
R18149:18149 compcert.backend.Deadcodeproof <> e var
R18168:18173 compcert.backend.Deadcodeproof <> magree rec
R18181:18185 compcert.backend.NeedDomain <> nlive ind
R18193:18194 compcert.backend.Deadcodeproof <> nm var
R18190:18191 compcert.backend.Deadcodeproof <> sp var
R18187:18188 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R18177:18178 compcert.backend.Deadcodeproof <> tm var
R18175:18175 compcert.backend.Deadcodeproof <> m var
R18201:18212 compcert.backend.Deadcodeproof <> match_states ind
R18269:18273 compcert.backend.RTL <> State constr
R18307:18308 compcert.backend.Deadcodeproof <> tm var
R18304:18305 compcert.backend.Deadcodeproof <> te var
R18300:18302 compcert.backend.Deadcodeproof <> pc' var
R18282:18285 compcert.common.Values <> Vptr constr
R18290:18297 compcert.lib.Integers Int zero def
R18287:18288 compcert.backend.Deadcodeproof <> sp var
R18278:18279 compcert.backend.Deadcodeproof <> tf var
R18275:18276 compcert.backend.Deadcodeproof <> ts var
R18215:18219 compcert.backend.RTL <> State constr
R18250:18250 compcert.backend.Deadcodeproof <> m var
R18248:18248 compcert.backend.Deadcodeproof <> e var
R18244:18246 compcert.backend.Deadcodeproof <> pc' var
R18226:18229 compcert.common.Values <> Vptr constr
R18234:18241 compcert.lib.Integers Int zero def
R18231:18232 compcert.backend.Deadcodeproof <> sp var
R18223:18223 compcert.backend.Deadcodeproof <> f var
R18221:18221 compcert.backend.Deadcodeproof <> s var
R18337:18354 compcert.backend.Deadcodeproof <> analyze_successors thm
R18433:18441 compcert.backend.NeedDomain <> eagree_ge thm
R18433:18441 compcert.backend.NeedDomain <> eagree_ge thm
R18461:18475 compcert.backend.Deadcodeproof <> magree_monotone thm
R18461:18475 compcert.backend.Deadcodeproof <> magree_monotone thm
prf 19496:19516 <> transf_volatile_store
R19735:19740 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19726:19728 Coq.Init.Logic <> :type_scope:x_'='_x not
R19725:19725 compcert.backend.Deadcodeproof <> v var
R19729:19734 compcert.common.Values <> Vundef constr
R19741:19747 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R19751:19752 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R19812:19826 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19753:19770 compcert.common.Events <> volatile_store_sem ind
R19809:19811 compcert.backend.Deadcodeproof <> tm' var
R19802:19807 compcert.common.Values <> Vundef constr
R19800:19800 compcert.backend.Deadcodeproof <> t var
R19797:19798 compcert.backend.Deadcodeproof <> tm var
R19785:19786 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R19782:19784 compcert.backend.Deadcodeproof <> v1' var
R19790:19791 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R19787:19789 compcert.backend.Deadcodeproof <> v2' var
R19792:19794 Coq.Init.Datatypes <> nil constr
R19778:19779 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R19772:19776 compcert.backend.Deadcodeproof <> chunk var
R19827:19832 compcert.backend.Deadcodeproof <> magree rec
R19842:19846 compcert.backend.NeedDomain <> nlive ind
R19854:19855 compcert.backend.Deadcodeproof <> nm var
R19851:19852 compcert.backend.Deadcodeproof <> sp var
R19848:19849 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R19837:19839 compcert.backend.Deadcodeproof <> tm' var
R19834:19835 compcert.backend.Deadcodeproof <> m' var
R19691:19696 compcert.backend.Deadcodeproof <> magree rec
R19704:19708 compcert.backend.NeedDomain <> nlive ind
R19716:19717 compcert.backend.Deadcodeproof <> nm var
R19713:19714 compcert.backend.Deadcodeproof <> sp var
R19710:19711 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R19700:19701 compcert.backend.Deadcodeproof <> tm var
R19698:19698 compcert.backend.Deadcodeproof <> m var
R19649:19654 compcert.backend.NeedDomain <> vagree def
R19664:19677 compcert.backend.NeedDomain <> store_argument def
R19679:19683 compcert.backend.Deadcodeproof <> chunk var
R19659:19661 compcert.backend.Deadcodeproof <> v2' var
R19656:19657 compcert.backend.Deadcodeproof <> v2 var
R19625:19635 compcert.common.Values Val lessdef ind
R19640:19642 compcert.backend.Deadcodeproof <> v1' var
R19637:19638 compcert.backend.Deadcodeproof <> v1 var
R19569:19586 compcert.common.Events <> volatile_store_sem ind
R19617:19618 compcert.backend.Deadcodeproof <> m' var
R19615:19615 compcert.backend.Deadcodeproof <> v var
R19613:19613 compcert.backend.Deadcodeproof <> t var
R19611:19611 compcert.backend.Deadcodeproof <> m var
R19600:19601 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R19598:19599 compcert.backend.Deadcodeproof <> v1 var
R19604:19605 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R19602:19603 compcert.backend.Deadcodeproof <> v2 var
R19606:19608 Coq.Init.Datatypes <> nil constr
R19594:19595 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R19588:19592 compcert.backend.Deadcodeproof <> chunk var
R20002:20023 compcert.common.Events <> eventval_match_lessdef thm
R20002:20023 compcert.common.Events <> eventval_match_lessdef thm
R20039:20064 compcert.backend.NeedDomain <> store_argument_load_result thm
R20039:20064 compcert.backend.NeedDomain <> store_argument_load_result thm
R20104:20124 compcert.backend.Deadcodeproof <> magree_store_parallel thm
R20168:20172 compcert.backend.NeedDomain <> nlive ind
R20174:20175 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
prf 20290:20305 <> eagree_set_undef
R20348:20353 compcert.backend.NeedDomain <> eagree def
R20375:20376 compcert.backend.Deadcodeproof <> ne var
R20372:20373 compcert.backend.Deadcodeproof <> e2 var
R20358:20358 compcert.backend.Registers <> ::x_'#'_x_'<-'_x not
R20360:20363 compcert.backend.Registers <> ::x_'#'_x_'<-'_x not
R20359:20359 compcert.backend.Deadcodeproof <> r var
R20364:20369 compcert.common.Values <> Vundef constr
R20356:20357 compcert.backend.Deadcodeproof <> e1 var
R20329:20334 compcert.backend.NeedDomain <> eagree def
R20342:20343 compcert.backend.Deadcodeproof <> ne var
R20339:20340 compcert.backend.Deadcodeproof <> e2 var
R20336:20337 compcert.backend.Deadcodeproof <> e1 var
R20417:20427 compcert.lib.Maps PMap gsspec thm
R20417:20427 compcert.lib.Maps PMap gsspec thm
R20440:20442 compcert.lib.Coqlib <> peq def
R20440:20442 compcert.lib.Coqlib <> peq def
prf 20512:20526 <> step_simulation
R20628:20634 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R20638:20639 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R20658:20661 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20640:20643 compcert.backend.RTL <> step ind
R20655:20657 compcert.backend.Deadcodeproof <> S2' var
R20653:20653 compcert.backend.Deadcodeproof <> t var
R20649:20651 compcert.backend.Deadcodeproof <> S1' var
R20645:20647 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R20662:20673 compcert.backend.Deadcodeproof <> match_states ind
R20678:20680 compcert.backend.Deadcodeproof <> S2' var
R20675:20676 compcert.backend.Deadcodeproof <> S2 var
R20603:20613 compcert.backend.ValueAnalysis <> sound_state ind
R20620:20621 compcert.backend.Deadcodeproof <> S1 var
R20615:20618 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R20580:20591 compcert.backend.Deadcodeproof <> match_states ind
R20596:20598 compcert.backend.Deadcodeproof <> S1' var
R20593:20594 compcert.backend.Deadcodeproof <> S1 var
R20547:20550 compcert.backend.RTL <> step ind
R20560:20561 compcert.backend.Deadcodeproof <> S2 var
R20558:20558 compcert.backend.Deadcodeproof <> t var
R20555:20556 compcert.backend.Deadcodeproof <> S1 var
R20552:20553 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R20754:20756 Coq.Init.Logic <> :type_scope:x_'='_x not
R20741:20741 compcert.lib.Maps <> ::x_'!'_x not
R20751:20752 compcert.lib.Maps <> ::x_'!'_x not
R20742:20748 compcert.backend.RTL <> fn_code proj
R20757:20760 Coq.Init.Datatypes <> Some constr
R20754:20756 Coq.Init.Logic <> :type_scope:x_'='_x not
R20741:20741 compcert.lib.Maps <> ::x_'!'_x not
R20751:20752 compcert.lib.Maps <> ::x_'!'_x not
R20742:20748 compcert.backend.RTL <> fn_code proj
R20757:20760 Coq.Init.Datatypes <> Some constr
R20794:20796 Coq.Init.Logic <> :type_scope:x_'='_x not
R20775:20789 compcert.backend.Deadcode <> transf_function def
R20797:20798 compcert.common.Errors <> OK constr
R20794:20796 Coq.Init.Logic <> :type_scope:x_'='_x not
R20775:20789 compcert.backend.Deadcode <> transf_function def
R20797:20798 compcert.common.Errors <> OK constr
R20824:20826 Coq.Init.Logic <> :type_scope:x_'='_x not
R20813:20819 compcert.backend.Deadcode <> analyze def
R20827:20830 Coq.Init.Datatypes <> Some constr
R20824:20826 Coq.Init.Logic <> :type_scope:x_'='_x not
R20813:20819 compcert.backend.Deadcode <> analyze def
R20827:20830 Coq.Init.Datatypes <> Some constr
R20863:20880 compcert.backend.Deadcodeproof <> transf_function_at thm
R20939:20950 compcert.backend.Deadcode <> transf_instr def
R21031:21033 Coq.Init.Logic <> :type_scope:x_'='_x not
R21016:21016 compcert.lib.Maps <> ::x_'!'_x not
R21026:21028 compcert.lib.Maps <> ::x_'!'_x not
R21017:21023 compcert.backend.RTL <> fn_code proj
R21034:21037 Coq.Init.Datatypes <> Some constr
R21031:21033 Coq.Init.Logic <> :type_scope:x_'='_x not
R21016:21016 compcert.lib.Maps <> ::x_'!'_x not
R21026:21028 compcert.lib.Maps <> ::x_'!'_x not
R21017:21023 compcert.backend.RTL <> fn_code proj
R21034:21037 Coq.Init.Datatypes <> Some constr
R21063:21065 Coq.Init.Logic <> :type_scope:x_'='_x not
R21052:21058 compcert.backend.Deadcode <> analyze def
R21066:21069 Coq.Init.Datatypes <> Some constr
R21063:21065 Coq.Init.Logic <> :type_scope:x_'='_x not
R21052:21058 compcert.backend.Deadcode <> analyze def
R21066:21069 Coq.Init.Datatypes <> Some constr
R21104:21105 compcert.lib.Maps <> ::x_'!!'_x not
R21145:21152 compcert.backend.Deadcode <> transfer def
R21327:21335 compcert.backend.RTL <> exec_Inop constr
R21327:21335 compcert.backend.RTL <> exec_Inop constr
R21355:21371 compcert.backend.Deadcodeproof <> match_succ_states thm
R21355:21371 compcert.backend.Deadcodeproof <> match_succ_states thm
R21446:21452 compcert.backend.Deadcode <> is_dead def
R21455:21458 compcert.backend.NeedDomain <> nreg def
R21498:21508 compcert.backend.Deadcode <> is_int_zero def
R21511:21514 compcert.backend.NeedDomain <> nreg def
R21557:21578 compcert.ia32.NeedOp <> operation_is_redundant def
R21584:21587 compcert.backend.NeedDomain <> nreg def
R21446:21452 compcert.backend.Deadcode <> is_dead def
R21455:21458 compcert.backend.NeedDomain <> nreg def
R21498:21508 compcert.backend.Deadcode <> is_int_zero def
R21511:21514 compcert.backend.NeedDomain <> nreg def
R21557:21578 compcert.ia32.NeedOp <> operation_is_redundant def
R21584:21587 compcert.backend.NeedDomain <> nreg def
R21691:21699 compcert.backend.RTL <> exec_Inop constr
R21691:21699 compcert.backend.RTL <> exec_Inop constr
R21719:21735 compcert.backend.Deadcodeproof <> match_succ_states thm
R21719:21735 compcert.backend.Deadcodeproof <> match_succ_states thm
R21766:21783 compcert.backend.NeedDomain <> eagree_update_dead thm
R21766:21783 compcert.backend.NeedDomain <> eagree_update_dead thm
R21938:21941 compcert.common.Values <> Vint constr
R21943:21950 compcert.lib.Integers Int zero def
R21918:21925 compcert.backend.RTL <> exec_Iop constr
R21938:21941 compcert.common.Values <> Vint constr
R21943:21950 compcert.lib.Integers Int zero def
R21918:21925 compcert.backend.RTL <> exec_Iop constr
R21971:21987 compcert.backend.Deadcodeproof <> match_succ_states thm
R21971:21987 compcert.backend.Deadcodeproof <> match_succ_states thm
R22018:22030 compcert.backend.NeedDomain <> eagree_update thm
R22018:22030 compcert.backend.NeedDomain <> eagree_update thm
R22050:22066 compcert.backend.Deadcodeproof <> is_int_zero_sound thm
R22050:22066 compcert.backend.Deadcodeproof <> is_int_zero_sound thm
R22110:22120 compcert.backend.NeedDomain <> iagree_zero thm
R22110:22120 compcert.backend.NeedDomain <> iagree_zero thm
R22258:22281 compcert.ia32.NeedOp <> needs_of_operation_sound thm
R22291:22297 compcert.backend.Deadcodeproof <> ma_perm proj
R22291:22297 compcert.backend.Deadcodeproof <> ma_perm proj
R22335:22338 compcert.backend.NeedDomain <> nreg def
R22431:22438 compcert.backend.RTL <> exec_Iop constr
R22431:22438 compcert.backend.RTL <> exec_Iop constr
R22485:22508 compcert.ia32.Op <> eval_operation_preserved thm
R22485:22508 compcert.ia32.Op <> eval_operation_preserved thm
R22517:22533 compcert.backend.Deadcodeproof <> symbols_preserved thm
R22517:22533 compcert.backend.Deadcodeproof <> symbols_preserved thm
R22545:22561 compcert.backend.Deadcodeproof <> match_succ_states thm
R22545:22561 compcert.backend.Deadcodeproof <> match_succ_states thm
R22593:22605 compcert.backend.NeedDomain <> eagree_update thm
R22593:22605 compcert.backend.NeedDomain <> eagree_update thm
R22652:22654 Coq.Init.Datatypes <> fst def
R22671:22673 Coq.Init.Datatypes <> snd def
R22710:22715 compcert.backend.NeedDomain <> vagree def
R22725:22728 compcert.backend.NeedDomain <> nreg def
R22721:22721 compcert.backend.Registers <> ::x_'#'_x not
R22710:22715 compcert.backend.NeedDomain <> vagree def
R22725:22728 compcert.backend.NeedDomain <> nreg def
R22721:22721 compcert.backend.Registers <> ::x_'#'_x not
R22797:22797 compcert.backend.Registers <> ::x_'#'_x not
R22813:22814 compcert.backend.Registers <> ::x_'##'_x not
R22751:22778 compcert.ia32.NeedOp <> operation_is_redundant_sound thm
R22797:22797 compcert.backend.Registers <> ::x_'#'_x not
R22813:22814 compcert.backend.Registers <> ::x_'##'_x not
R22751:22778 compcert.ia32.NeedOp <> operation_is_redundant_sound thm
R22848:22863 compcert.backend.Deadcodeproof <> add_needs_vagree thm
R22907:22914 compcert.backend.RTL <> exec_Iop constr
R22907:22914 compcert.backend.RTL <> exec_Iop constr
R22954:22970 compcert.backend.Deadcodeproof <> match_succ_states thm
R22954:22970 compcert.backend.Deadcodeproof <> match_succ_states thm
R23003:23015 compcert.backend.NeedDomain <> eagree_update thm
R23003:23015 compcert.backend.NeedDomain <> eagree_update thm
R23088:23111 compcert.ia32.NeedOp <> needs_of_operation_sound thm
R23121:23127 compcert.backend.Deadcodeproof <> ma_perm proj
R23121:23127 compcert.backend.Deadcodeproof <> ma_perm proj
R23230:23237 compcert.backend.RTL <> exec_Iop constr
R23230:23237 compcert.backend.RTL <> exec_Iop constr
R23284:23307 compcert.ia32.Op <> eval_operation_preserved thm
R23284:23307 compcert.ia32.Op <> eval_operation_preserved thm
R23316:23332 compcert.backend.Deadcodeproof <> symbols_preserved thm
R23316:23332 compcert.backend.Deadcodeproof <> symbols_preserved thm
R23344:23360 compcert.backend.Deadcodeproof <> match_succ_states thm
R23344:23360 compcert.backend.Deadcodeproof <> match_succ_states thm
R23392:23404 compcert.backend.NeedDomain <> eagree_update thm
R23392:23404 compcert.backend.NeedDomain <> eagree_update thm
R23478:23484 compcert.backend.Deadcode <> is_dead def
R23487:23490 compcert.backend.NeedDomain <> nreg def
R23530:23540 compcert.backend.Deadcode <> is_int_zero def
R23543:23546 compcert.backend.NeedDomain <> nreg def
R23478:23484 compcert.backend.Deadcode <> is_dead def
R23487:23490 compcert.backend.NeedDomain <> nreg def
R23530:23540 compcert.backend.Deadcode <> is_int_zero def
R23543:23546 compcert.backend.NeedDomain <> nreg def
R23661:23669 compcert.backend.RTL <> exec_Inop constr
R23661:23669 compcert.backend.RTL <> exec_Inop constr
R23689:23705 compcert.backend.Deadcodeproof <> match_succ_states thm
R23689:23705 compcert.backend.Deadcodeproof <> match_succ_states thm
R23736:23753 compcert.backend.NeedDomain <> eagree_update_dead thm
R23736:23753 compcert.backend.NeedDomain <> eagree_update_dead thm
R23908:23911 compcert.common.Values <> Vint constr
R23913:23920 compcert.lib.Integers Int zero def
R23888:23895 compcert.backend.RTL <> exec_Iop constr
R23908:23911 compcert.common.Values <> Vint constr
R23913:23920 compcert.lib.Integers Int zero def
R23888:23895 compcert.backend.RTL <> exec_Iop constr
R23941:23957 compcert.backend.Deadcodeproof <> match_succ_states thm
R23941:23957 compcert.backend.Deadcodeproof <> match_succ_states thm
R23988:24000 compcert.backend.NeedDomain <> eagree_update thm
R23988:24000 compcert.backend.NeedDomain <> eagree_update thm
R24020:24036 compcert.backend.Deadcodeproof <> is_int_zero_sound thm
R24020:24036 compcert.backend.Deadcodeproof <> is_int_zero_sound thm
R24080:24090 compcert.backend.NeedDomain <> iagree_zero thm
R24080:24090 compcert.backend.NeedDomain <> iagree_zero thm
R24121:24143 compcert.ia32.Op <> eval_addressing_lessdef thm
R24153:24173 compcert.backend.Deadcodeproof <> add_needs_all_lessdef thm
R24153:24173 compcert.backend.Deadcodeproof <> add_needs_all_lessdef thm
R24295:24305 compcert.backend.Deadcodeproof <> magree_load thm
R24326:24342 compcert.backend.ValueAnalysis <> aaddressing_sound thm
R24393:24401 compcert.backend.NeedDomain <> nlive_add thm
R24393:24401 compcert.backend.NeedDomain <> nlive_add thm
R24504:24507 compcert.common.Values <> Vptr constr
R24482:24491 compcert.backend.RTL <> exec_Iload constr
R24504:24507 compcert.common.Values <> Vptr constr
R24482:24491 compcert.backend.RTL <> exec_Iload constr
R24545:24569 compcert.ia32.Op <> eval_addressing_preserved thm
R24545:24569 compcert.ia32.Op <> eval_addressing_preserved thm
R24578:24594 compcert.backend.Deadcodeproof <> symbols_preserved thm
R24578:24594 compcert.backend.Deadcodeproof <> symbols_preserved thm
R24616:24632 compcert.backend.Deadcodeproof <> match_succ_states thm
R24616:24632 compcert.backend.Deadcodeproof <> match_succ_states thm
R24663:24675 compcert.backend.NeedDomain <> eagree_update thm
R24663:24675 compcert.backend.NeedDomain <> eagree_update thm
R24705:24719 compcert.backend.Deadcodeproof <> magree_monotone thm
R24705:24719 compcert.backend.Deadcodeproof <> magree_monotone thm
R24743:24755 compcert.backend.NeedDomain <> incl_nmem_add thm
R24743:24755 compcert.backend.NeedDomain <> incl_nmem_add thm
R24820:24832 compcert.backend.NeedDomain <> nmem_contains def
R24896:24905 compcert.common.Memdata <> size_chunk def
R24838:24848 compcert.backend.ValueAnalysis <> aaddressing def
R24850:24850 compcert.backend.Registers <> ::x_'#'_x not
R24864:24867 compcert.backend.Registers <> ::x_'#'_x not
R24851:24858 compcert.backend.Deadcode <> vanalyze def
R24860:24861 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R24820:24832 compcert.backend.NeedDomain <> nmem_contains def
R24896:24905 compcert.common.Memdata <> size_chunk def
R24838:24848 compcert.backend.ValueAnalysis <> aaddressing def
R24850:24850 compcert.backend.Registers <> ::x_'#'_x not
R24864:24867 compcert.backend.Registers <> ::x_'#'_x not
R24851:24858 compcert.backend.Deadcode <> vanalyze def
R24860:24861 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R24972:24994 compcert.ia32.Op <> eval_addressing_lessdef thm
R25004:25024 compcert.backend.Deadcodeproof <> add_needs_all_lessdef thm
R25004:25024 compcert.backend.Deadcodeproof <> add_needs_all_lessdef thm
R25146:25166 compcert.backend.Deadcodeproof <> magree_store_parallel thm
R25203:25203 compcert.backend.Registers <> ::x_'#'_x not
R25245:25249 compcert.backend.NeedDomain <> nlive ind
R25251:25252 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R25274:25290 compcert.backend.ValueAnalysis <> aaddressing_sound thm
R25341:25352 compcert.backend.NeedDomain <> nlive_remove thm
R25341:25352 compcert.backend.NeedDomain <> nlive_remove thm
R25459:25462 compcert.common.Values <> Vptr constr
R25436:25446 compcert.backend.RTL <> exec_Istore constr
R25459:25462 compcert.common.Values <> Vptr constr
R25436:25446 compcert.backend.RTL <> exec_Istore constr
R25500:25524 compcert.ia32.Op <> eval_addressing_preserved thm
R25500:25524 compcert.ia32.Op <> eval_addressing_preserved thm
R25533:25549 compcert.backend.Deadcodeproof <> symbols_preserved thm
R25533:25549 compcert.backend.Deadcodeproof <> symbols_preserved thm
R25570:25586 compcert.backend.Deadcodeproof <> match_succ_states thm
R25570:25586 compcert.backend.Deadcodeproof <> match_succ_states thm
R25750:25758 compcert.backend.RTL <> exec_Inop constr
R25750:25758 compcert.backend.RTL <> exec_Inop constr
R25778:25794 compcert.backend.Deadcodeproof <> match_succ_states thm
R25778:25794 compcert.backend.Deadcodeproof <> match_succ_states thm
R25826:25842 compcert.backend.Deadcodeproof <> magree_store_left thm
R25826:25842 compcert.backend.Deadcodeproof <> magree_store_left thm
R25862:25878 compcert.backend.ValueAnalysis <> aaddressing_sound thm
R25930:25943 compcert.backend.NeedDomain <> nlive_contains thm
R25930:25943 compcert.backend.NeedDomain <> nlive_contains thm
R26006:26029 compcert.backend.Deadcodeproof <> find_function_translated thm
R26103:26112 compcert.backend.RTL <> exec_Icall constr
R26103:26112 compcert.backend.RTL <> exec_Icall constr
R26128:26150 compcert.backend.Deadcodeproof <> sig_function_translated thm
R26128:26150 compcert.backend.Deadcodeproof <> sig_function_translated thm
R26241:26258 compcert.backend.Deadcodeproof <> analyze_successors thm
R26292:26300 compcert.backend.NeedDomain <> eagree_ge thm
R26292:26300 compcert.backend.NeedDomain <> eagree_ge thm
R26340:26352 compcert.backend.NeedDomain <> eagree_update thm
R26340:26352 compcert.backend.NeedDomain <> eagree_update thm
R26402:26415 compcert.backend.Deadcodeproof <> magree_extends thm
R26402:26415 compcert.backend.Deadcodeproof <> magree_extends thm
R26431:26439 compcert.backend.NeedDomain <> nlive_all thm
R26431:26439 compcert.backend.NeedDomain <> nlive_all thm
R26499:26522 compcert.backend.Deadcodeproof <> find_function_translated thm
R26574:26584 compcert.backend.Deadcodeproof <> magree_free thm
R26619:26623 compcert.backend.NeedDomain <> nlive ind
R26632:26639 compcert.backend.NeedDomain <> nmem_all def
R26625:26626 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R26661:26676 compcert.backend.NeedDomain <> nlive_dead_stack thm
R26661:26676 compcert.backend.NeedDomain <> nlive_dead_stack thm
R26744:26757 compcert.backend.RTL <> exec_Itailcall constr
R26744:26757 compcert.backend.RTL <> exec_Itailcall constr
R26773:26795 compcert.backend.Deadcodeproof <> sig_function_translated thm
R26773:26795 compcert.backend.Deadcodeproof <> sig_function_translated thm
R26816:26835 compcert.backend.Deadcodeproof <> stacksize_translated thm
R26816:26835 compcert.backend.Deadcodeproof <> stacksize_translated thm
R26896:26909 compcert.backend.Deadcodeproof <> magree_extends thm
R26896:26909 compcert.backend.Deadcodeproof <> magree_extends thm
R26925:26933 compcert.backend.NeedDomain <> nlive_all thm
R26925:26933 compcert.backend.NeedDomain <> nlive_all thm
R27025:27040 compcert.backend.Deadcode <> transfer_builtin def
R27042:27042 compcert.backend.Registers <> ::x_'#'_x not
R27056:27057 compcert.backend.Registers <> ::x_'#'_x not
R27043:27050 compcert.backend.Deadcode <> vanalyze def
R27052:27053 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R27025:27040 compcert.backend.Deadcode <> transfer_builtin def
R27042:27042 compcert.backend.Registers <> ::x_'#'_x not
R27056:27057 compcert.backend.Registers <> ::x_'#'_x not
R27043:27050 compcert.backend.Deadcode <> vanalyze def
R27052:27053 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R27139:27149 compcert.common.Values Val lessdef ind
R27159:27159 compcert.backend.Registers <> ::x_'#'_x not
R27153:27153 compcert.backend.Registers <> ::x_'#'_x not
R27139:27149 compcert.common.Values Val lessdef ind
R27159:27159 compcert.backend.Registers <> ::x_'#'_x not
R27153:27153 compcert.backend.Registers <> ::x_'#'_x not
R27236:27242 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R27245:27246 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R27283:27286 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R27247:27259 compcert.common.Events <> volatile_load ind
R27281:27282 compcert.backend.Deadcodeproof <> tv var
R27261:27262 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R27287:27297 compcert.common.Values Val lessdef ind
R27301:27302 compcert.backend.Deadcodeproof <> tv var
R27236:27242 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R27245:27246 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R27283:27286 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R27247:27259 compcert.common.Events <> volatile_load ind
R27281:27282 compcert.backend.Deadcodeproof <> tv var
R27261:27262 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R27287:27297 compcert.common.Values Val lessdef ind
R27301:27302 compcert.backend.Deadcodeproof <> tv var
R27335:27349 compcert.common.Values Val load_result def
R27335:27349 compcert.common.Values Val load_result def
R27407:27417 compcert.backend.Deadcodeproof <> magree_load thm
R27440:27450 compcert.backend.ValueAnalysis <> aaddr_sound thm
R27504:27512 compcert.backend.NeedDomain <> nlive_add thm
R27504:27512 compcert.backend.NeedDomain <> nlive_add thm
R27669:27681 compcert.backend.RTL <> exec_Ibuiltin constr
R27669:27681 compcert.backend.RTL <> exec_Ibuiltin constr
R27700:27730 compcert.common.Events <> external_call_symbols_preserved thm
R27700:27730 compcert.common.Events <> external_call_symbols_preserved thm
R27788:27804 compcert.backend.Deadcodeproof <> symbols_preserved thm
R27788:27804 compcert.backend.Deadcodeproof <> symbols_preserved thm
R27813:27829 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R27813:27829 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R27841:27857 compcert.backend.Deadcodeproof <> match_succ_states thm
R27841:27857 compcert.backend.Deadcodeproof <> match_succ_states thm
R27888:27900 compcert.backend.NeedDomain <> eagree_update thm
R27888:27900 compcert.backend.NeedDomain <> eagree_update thm
R27929:27943 compcert.backend.Deadcodeproof <> magree_monotone thm
R27929:27943 compcert.backend.Deadcodeproof <> magree_monotone thm
R27967:27979 compcert.backend.NeedDomain <> incl_nmem_add thm
R27967:27979 compcert.backend.NeedDomain <> incl_nmem_add thm
R28042:28048 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R28051:28052 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R28089:28092 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R28053:28065 compcert.common.Events <> volatile_load ind
R28087:28088 compcert.backend.Deadcodeproof <> tv var
R28067:28068 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R28093:28103 compcert.common.Values Val lessdef ind
R28107:28108 compcert.backend.Deadcodeproof <> tv var
R28042:28048 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R28051:28052 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R28089:28092 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R28053:28065 compcert.common.Events <> volatile_load ind
R28087:28088 compcert.backend.Deadcodeproof <> tv var
R28067:28068 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R28093:28103 compcert.common.Values Val lessdef ind
R28107:28108 compcert.backend.Deadcodeproof <> tv var
R28141:28155 compcert.common.Values Val load_result def
R28141:28155 compcert.common.Values Val load_result def
R28213:28223 compcert.backend.Deadcodeproof <> magree_load thm
R28260:28268 compcert.backend.NeedDomain <> nlive_add thm
R28260:28268 compcert.backend.NeedDomain <> nlive_add thm
R28448:28460 compcert.backend.RTL <> exec_Ibuiltin constr
R28448:28460 compcert.backend.RTL <> exec_Ibuiltin constr
R28479:28509 compcert.common.Events <> external_call_symbols_preserved thm
R28479:28509 compcert.common.Events <> external_call_symbols_preserved thm
R28553:28569 compcert.backend.Deadcodeproof <> symbols_preserved thm
R28553:28569 compcert.backend.Deadcodeproof <> symbols_preserved thm
R28578:28594 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R28578:28594 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R28606:28622 compcert.backend.Deadcodeproof <> match_succ_states thm
R28606:28622 compcert.backend.Deadcodeproof <> match_succ_states thm
R28653:28665 compcert.backend.NeedDomain <> eagree_update thm
R28653:28665 compcert.backend.NeedDomain <> eagree_update thm
R28694:28708 compcert.backend.Deadcodeproof <> magree_monotone thm
R28694:28708 compcert.backend.Deadcodeproof <> magree_monotone thm
R28732:28744 compcert.backend.NeedDomain <> incl_nmem_add thm
R28732:28744 compcert.backend.NeedDomain <> incl_nmem_add thm
R28787:28807 compcert.backend.Deadcodeproof <> transf_volatile_store thm
R28840:28840 compcert.backend.Registers <> ::x_'#'_x not
R28885:28885 compcert.backend.Registers <> ::x_'#'_x not
R28989:29001 compcert.backend.RTL <> exec_Ibuiltin constr
R28989:29001 compcert.backend.RTL <> exec_Ibuiltin constr
R29020:29050 compcert.common.Events <> external_call_symbols_preserved thm
R29020:29050 compcert.common.Events <> external_call_symbols_preserved thm
R29076:29092 compcert.backend.Deadcodeproof <> symbols_preserved thm
R29076:29092 compcert.backend.Deadcodeproof <> symbols_preserved thm
R29101:29117 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R29101:29117 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R29129:29145 compcert.backend.Deadcodeproof <> match_succ_states thm
R29129:29145 compcert.backend.Deadcodeproof <> match_succ_states thm
R29176:29188 compcert.backend.NeedDomain <> eagree_update thm
R29176:29188 compcert.backend.NeedDomain <> eagree_update thm
R29248:29276 compcert.common.Events <> volatile_store_global_charact thm
R29248:29276 compcert.common.Events <> volatile_store_global_charact thm
R29323:29343 compcert.backend.Deadcodeproof <> transf_volatile_store thm
R29383:29383 compcert.backend.Registers <> ::x_'#'_x not
R29487:29499 compcert.backend.RTL <> exec_Ibuiltin constr
R29487:29499 compcert.backend.RTL <> exec_Ibuiltin constr
R29518:29548 compcert.common.Events <> external_call_symbols_preserved thm
R29518:29548 compcert.common.Events <> external_call_symbols_preserved thm
R29569:29597 compcert.common.Events <> volatile_store_global_charact thm
R29569:29597 compcert.common.Events <> volatile_store_global_charact thm
R29633:29649 compcert.backend.Deadcodeproof <> symbols_preserved thm
R29633:29649 compcert.backend.Deadcodeproof <> symbols_preserved thm
R29658:29674 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R29658:29674 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R29686:29702 compcert.backend.Deadcodeproof <> match_succ_states thm
R29686:29702 compcert.backend.Deadcodeproof <> match_succ_states thm
R29733:29745 compcert.backend.NeedDomain <> eagree_update thm
R29733:29745 compcert.backend.NeedDomain <> eagree_update thm
R29826:29830 compcert.backend.ValueAnalysis <> aaddr def
R29832:29832 compcert.backend.Registers <> ::x_'#'_x not
R29846:29849 compcert.backend.Registers <> ::x_'#'_x not
R29833:29840 compcert.backend.Deadcode <> vanalyze def
R29842:29843 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R29826:29830 compcert.backend.ValueAnalysis <> aaddr def
R29832:29832 compcert.backend.Registers <> ::x_'#'_x not
R29846:29849 compcert.backend.Registers <> ::x_'#'_x not
R29833:29840 compcert.backend.Deadcode <> vanalyze def
R29842:29843 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R29879:29883 compcert.backend.ValueAnalysis <> aaddr def
R29885:29885 compcert.backend.Registers <> ::x_'#'_x not
R29899:29902 compcert.backend.Registers <> ::x_'#'_x not
R29886:29893 compcert.backend.Deadcode <> vanalyze def
R29895:29896 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R29879:29883 compcert.backend.ValueAnalysis <> aaddr def
R29885:29885 compcert.backend.Registers <> ::x_'#'_x not
R29899:29902 compcert.backend.Registers <> ::x_'#'_x not
R29886:29893 compcert.backend.Deadcode <> vanalyze def
R29895:29896 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R29927:29942 compcert.backend.Deadcodeproof <> magree_loadbytes thm
R29970:29980 compcert.backend.ValueAnalysis <> aaddr_sound thm
R30055:30063 compcert.backend.NeedDomain <> nlive_add thm
R30055:30063 compcert.backend.NeedDomain <> nlive_add thm
R30117:30142 compcert.backend.Deadcodeproof <> magree_storebytes_parallel thm
R30154:30168 compcert.backend.Deadcodeproof <> magree_monotone thm
R30154:30168 compcert.backend.Deadcodeproof <> magree_monotone thm
R30204:30208 compcert.backend.NeedDomain <> nlive ind
R30218:30228 compcert.backend.NeedDomain <> nmem_remove def
R30210:30211 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R30260:30272 compcert.backend.NeedDomain <> incl_nmem_add thm
R30260:30272 compcert.backend.NeedDomain <> incl_nmem_add thm
R30311:30315 compcert.backend.NeedDomain <> nlive ind
R30317:30318 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R30340:30350 compcert.backend.ValueAnalysis <> aaddr_sound thm
R30425:30436 compcert.backend.NeedDomain <> nlive_remove thm
R30425:30436 compcert.backend.NeedDomain <> nlive_remove thm
R30457:30476 compcert.common.Memory Mem loadbytes_length thm
R30457:30476 compcert.common.Memory Mem loadbytes_length thm
R30506:30516 compcert.lib.Coqlib <> nat_of_Z_eq thm
R30506:30516 compcert.lib.Coqlib <> nat_of_Z_eq thm
R30590:30600 compcert.common.Values Val lessdef ind
R30611:30611 compcert.backend.Registers <> ::x_'#'_x not
R30604:30604 compcert.backend.Registers <> ::x_'#'_x not
R30590:30600 compcert.common.Values Val lessdef ind
R30611:30611 compcert.backend.Registers <> ::x_'#'_x not
R30604:30604 compcert.backend.Registers <> ::x_'#'_x not
R30674:30684 compcert.common.Values Val lessdef ind
R30695:30695 compcert.backend.Registers <> ::x_'#'_x not
R30688:30688 compcert.backend.Registers <> ::x_'#'_x not
R30674:30684 compcert.common.Values Val lessdef ind
R30695:30695 compcert.backend.Registers <> ::x_'#'_x not
R30688:30688 compcert.backend.Registers <> ::x_'#'_x not
R30775:30787 compcert.backend.RTL <> exec_Ibuiltin constr
R30775:30787 compcert.backend.RTL <> exec_Ibuiltin constr
R30806:30836 compcert.common.Events <> external_call_symbols_preserved thm
R30806:30836 compcert.common.Events <> external_call_symbols_preserved thm
R30897:30913 compcert.backend.Deadcodeproof <> symbols_preserved thm
R30897:30913 compcert.backend.Deadcodeproof <> symbols_preserved thm
R30922:30938 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R30922:30938 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R30950:30966 compcert.backend.Deadcodeproof <> match_succ_states thm
R30950:30966 compcert.backend.Deadcodeproof <> match_succ_states thm
R30997:31009 compcert.backend.NeedDomain <> eagree_update thm
R30997:31009 compcert.backend.NeedDomain <> eagree_update thm
R31098:31102 compcert.backend.ValueAnalysis <> aaddr def
R31104:31104 compcert.backend.Registers <> ::x_'#'_x not
R31118:31121 compcert.backend.Registers <> ::x_'#'_x not
R31105:31112 compcert.backend.Deadcode <> vanalyze def
R31114:31115 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R31098:31102 compcert.backend.ValueAnalysis <> aaddr def
R31104:31104 compcert.backend.Registers <> ::x_'#'_x not
R31118:31121 compcert.backend.Registers <> ::x_'#'_x not
R31105:31112 compcert.backend.Deadcode <> vanalyze def
R31114:31115 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R31151:31155 compcert.backend.ValueAnalysis <> aaddr def
R31157:31157 compcert.backend.Registers <> ::x_'#'_x not
R31171:31174 compcert.backend.Registers <> ::x_'#'_x not
R31158:31165 compcert.backend.Deadcode <> vanalyze def
R31167:31168 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R31151:31155 compcert.backend.ValueAnalysis <> aaddr def
R31157:31157 compcert.backend.Registers <> ::x_'#'_x not
R31171:31174 compcert.backend.Registers <> ::x_'#'_x not
R31158:31165 compcert.backend.Deadcode <> vanalyze def
R31167:31168 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R31221:31229 compcert.backend.RTL <> exec_Inop constr
R31221:31229 compcert.backend.RTL <> exec_Inop constr
R31249:31265 compcert.backend.Deadcodeproof <> match_succ_states thm
R31249:31265 compcert.backend.Deadcodeproof <> match_succ_states thm
R31296:31311 compcert.backend.Deadcodeproof <> eagree_set_undef thm
R31296:31311 compcert.backend.Deadcodeproof <> eagree_set_undef thm
R31329:31350 compcert.backend.Deadcodeproof <> magree_storebytes_left thm
R31329:31350 compcert.backend.Deadcodeproof <> magree_storebytes_left thm
R31370:31380 compcert.backend.ValueAnalysis <> aaddr_sound thm
R31455:31468 compcert.backend.NeedDomain <> nlive_contains thm
R31455:31468 compcert.backend.NeedDomain <> nlive_contains thm
R31489:31508 compcert.common.Memory Mem loadbytes_length thm
R31489:31508 compcert.common.Memory Mem loadbytes_length thm
R31537:31547 compcert.lib.Coqlib <> nat_of_Z_eq thm
R31537:31547 compcert.lib.Coqlib <> nat_of_Z_eq thm
R31629:31641 compcert.backend.RTL <> exec_Ibuiltin constr
R31629:31641 compcert.backend.RTL <> exec_Ibuiltin constr
R31661:31691 compcert.common.Events <> external_call_symbols_preserved thm
R31661:31691 compcert.common.Events <> external_call_symbols_preserved thm
R31724:31750 compcert.common.Events <> eventval_list_match_lessdef thm
R31724:31750 compcert.common.Events <> eventval_list_match_lessdef thm
R31778:31794 compcert.backend.Deadcodeproof <> symbols_preserved thm
R31778:31794 compcert.backend.Deadcodeproof <> symbols_preserved thm
R31803:31819 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R31803:31819 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R31831:31847 compcert.backend.Deadcodeproof <> match_succ_states thm
R31831:31847 compcert.backend.Deadcodeproof <> match_succ_states thm
R31878:31890 compcert.backend.NeedDomain <> eagree_update thm
R31878:31890 compcert.backend.NeedDomain <> eagree_update thm
R32015:32027 compcert.backend.RTL <> exec_Ibuiltin constr
R32015:32027 compcert.backend.RTL <> exec_Ibuiltin constr
R32047:32077 compcert.common.Events <> external_call_symbols_preserved thm
R32047:32077 compcert.common.Events <> external_call_symbols_preserved thm
R32110:32131 compcert.common.Events <> eventval_match_lessdef thm
R32110:32131 compcert.common.Events <> eventval_match_lessdef thm
R32159:32175 compcert.backend.Deadcodeproof <> symbols_preserved thm
R32159:32175 compcert.backend.Deadcodeproof <> symbols_preserved thm
R32184:32200 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R32184:32200 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R32212:32228 compcert.backend.Deadcodeproof <> match_succ_states thm
R32212:32228 compcert.backend.Deadcodeproof <> match_succ_states thm
R32259:32271 compcert.backend.NeedDomain <> eagree_update thm
R32259:32271 compcert.backend.NeedDomain <> eagree_update thm
R32343:32345 Coq.Init.Logic <> :type_scope:x_'='_x not
R32328:32328 compcert.lib.Maps <> ::x_'!'_x not
R32339:32340 compcert.lib.Maps <> ::x_'!'_x not
R32329:32335 compcert.backend.RTL <> fn_code proj
R32346:32349 Coq.Init.Datatypes <> Some constr
R32351:32358 compcert.backend.RTL <> Ibuiltin constr
R32343:32345 Coq.Init.Logic <> :type_scope:x_'='_x not
R32328:32328 compcert.lib.Maps <> ::x_'!'_x not
R32339:32340 compcert.lib.Maps <> ::x_'!'_x not
R32329:32335 compcert.backend.RTL <> fn_code proj
R32346:32349 Coq.Init.Datatypes <> Some constr
R32351:32358 compcert.backend.RTL <> Ibuiltin constr
R32510:32534 compcert.common.Events <> external_call_mem_extends def
R32564:32577 compcert.backend.Deadcodeproof <> magree_extends thm
R32564:32577 compcert.backend.Deadcodeproof <> magree_extends thm
R32601:32609 compcert.backend.NeedDomain <> nlive_all thm
R32601:32609 compcert.backend.NeedDomain <> nlive_all thm
R32687:32699 compcert.backend.RTL <> exec_Ibuiltin constr
R32687:32699 compcert.backend.RTL <> exec_Ibuiltin constr
R32719:32749 compcert.common.Events <> external_call_symbols_preserved thm
R32719:32749 compcert.common.Events <> external_call_symbols_preserved thm
R32767:32783 compcert.backend.Deadcodeproof <> symbols_preserved thm
R32767:32783 compcert.backend.Deadcodeproof <> symbols_preserved thm
R32792:32808 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R32792:32808 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R32820:32836 compcert.backend.Deadcodeproof <> match_succ_states thm
R32820:32836 compcert.backend.Deadcodeproof <> match_succ_states thm
R32867:32879 compcert.backend.NeedDomain <> eagree_update thm
R32867:32879 compcert.backend.NeedDomain <> eagree_update thm
R32908:32921 compcert.backend.Deadcodeproof <> mextends_agree thm
R32908:32921 compcert.backend.Deadcodeproof <> mextends_agree thm
R33013:33022 compcert.backend.RTL <> exec_Icond constr
R33013:33022 compcert.backend.RTL <> exec_Icond constr
R33042:33065 compcert.ia32.NeedOp <> needs_of_condition_sound thm
R33042:33065 compcert.ia32.NeedOp <> needs_of_condition_sound thm
R33075:33081 compcert.backend.Deadcodeproof <> ma_perm proj
R33075:33081 compcert.backend.Deadcodeproof <> ma_perm proj
R33123:33139 compcert.backend.Deadcodeproof <> match_succ_states thm
R33123:33139 compcert.backend.Deadcodeproof <> match_succ_states thm
R33249:33259 compcert.common.Values Val lessdef ind
R33270:33270 compcert.backend.Registers <> ::x_'#'_x not
R33263:33263 compcert.backend.Registers <> ::x_'#'_x not
R33249:33259 compcert.common.Values Val lessdef ind
R33270:33270 compcert.backend.Registers <> ::x_'#'_x not
R33263:33263 compcert.backend.Registers <> ::x_'#'_x not
R33358:33372 compcert.backend.RTL <> exec_Ijumptable constr
R33358:33372 compcert.backend.RTL <> exec_Ijumptable constr
R33392:33408 compcert.backend.Deadcodeproof <> match_succ_states thm
R33392:33408 compcert.backend.Deadcodeproof <> match_succ_states thm
R33445:33457 compcert.lib.Coqlib <> list_nth_z_in thm
R33445:33457 compcert.lib.Coqlib <> list_nth_z_in thm
R33522:33532 compcert.backend.Deadcodeproof <> magree_free thm
R33567:33571 compcert.backend.NeedDomain <> nlive ind
R33580:33587 compcert.backend.NeedDomain <> nmem_all def
R33573:33574 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R33609:33624 compcert.backend.NeedDomain <> nlive_dead_stack thm
R33609:33624 compcert.backend.NeedDomain <> nlive_dead_stack thm
R33692:33703 compcert.backend.RTL <> exec_Ireturn constr
R33692:33703 compcert.backend.RTL <> exec_Ireturn constr
R33725:33744 compcert.backend.Deadcodeproof <> stacksize_translated thm
R33725:33744 compcert.backend.Deadcodeproof <> stacksize_translated thm
R33836:33849 compcert.backend.Deadcodeproof <> magree_extends thm
R33836:33849 compcert.backend.Deadcodeproof <> magree_extends thm
R33865:33873 compcert.backend.NeedDomain <> nlive_all thm
R33865:33873 compcert.backend.NeedDomain <> nlive_all thm
R33941:33955 compcert.backend.Deadcode <> transf_function def
R33982:33988 compcert.backend.Deadcode <> analyze def
R33991:33998 compcert.backend.Deadcode <> vanalyze def
R34000:34001 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R33982:33988 compcert.backend.Deadcode <> analyze def
R33991:33998 compcert.backend.Deadcode <> vanalyze def
R34000:34001 compcert.backend.Deadcodeproof <> PRESERVATION.rm var
R34045:34061 compcert.common.Memory Mem alloc_extends thm
R34077:34084 Coq.ZArith.Zorder <> Zle_refl syndef
R34077:34084 Coq.ZArith.Zorder <> Zle_refl syndef
R34093:34100 Coq.ZArith.Zorder <> Zle_refl syndef
R34093:34100 Coq.ZArith.Zorder <> Zle_refl syndef
R34221:34236 compcert.backend.Deadcodeproof <> eagree_init_regs thm
R34221:34236 compcert.backend.Deadcodeproof <> eagree_init_regs thm
R34254:34267 compcert.backend.Deadcodeproof <> mextends_agree thm
R34254:34267 compcert.backend.Deadcodeproof <> mextends_agree thm
R34314:34338 compcert.common.Events <> external_call_mem_extends def
R34472:34502 compcert.common.Events <> external_call_symbols_preserved thm
R34472:34502 compcert.common.Events <> external_call_symbols_preserved thm
R34521:34537 compcert.backend.Deadcodeproof <> symbols_preserved thm
R34521:34537 compcert.backend.Deadcodeproof <> symbols_preserved thm
R34546:34562 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R34546:34562 compcert.backend.Deadcodeproof <> varinfo_preserved thm
R34696:34709 compcert.backend.Deadcodeproof <> mextends_agree thm
R34696:34709 compcert.backend.Deadcodeproof <> mextends_agree thm
prf 34731:34751 <> transf_initial_states
R34796:34802 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R34806:34807 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R34831:34834 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R34808:34820 compcert.backend.RTL <> initial_state ind
R34828:34830 compcert.backend.Deadcodeproof <> st2 var
R34822:34826 compcert.backend.Deadcodeproof <> PRESERVATION.tprog var
R34835:34846 compcert.backend.Deadcodeproof <> match_states ind
R34852:34854 compcert.backend.Deadcodeproof <> st2 var
R34848:34850 compcert.backend.Deadcodeproof <> st1 var
R34768:34780 compcert.backend.RTL <> initial_state ind
R34787:34789 compcert.backend.Deadcodeproof <> st1 var
R34782:34785 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R34897:34919 compcert.backend.Deadcodeproof <> function_ptr_translated thm
R34960:34968 compcert.backend.RTL <> Callstate constr
R34977:34979 Coq.Init.Datatypes <> nil constr
R34970:34972 Coq.Init.Datatypes <> nil constr
R34960:34968 compcert.backend.RTL <> Callstate constr
R34977:34979 Coq.Init.Datatypes <> nil constr
R34970:34972 Coq.Init.Datatypes <> nil constr
R35025:35052 compcert.common.Globalenvs Genv init_mem_transf_partial thm
R35025:35052 compcert.common.Globalenvs Genv init_mem_transf_partial thm
R35073:35102 compcert.common.AST <> transform_partial_program_main thm
R35108:35113 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
R35073:35102 compcert.common.AST <> transform_partial_program_main thm
R35108:35113 compcert.backend.Deadcodeproof <> PRESERVATION.TRANSF var
R35127:35143 compcert.backend.Deadcodeproof <> symbols_preserved thm
R35127:35143 compcert.backend.Deadcodeproof <> symbols_preserved thm
R35176:35198 compcert.backend.Deadcodeproof <> sig_function_translated thm
R35176:35198 compcert.backend.Deadcodeproof <> sig_function_translated thm
R35260:35275 compcert.common.Memory Mem extends_refl thm
R35260:35275 compcert.common.Memory Mem extends_refl thm
prf 35290:35308 <> transf_final_states
R35379:35389 compcert.backend.RTL <> final_state ind
R35395:35395 compcert.backend.Deadcodeproof <> r var
R35391:35393 compcert.backend.Deadcodeproof <> st2 var
R35358:35368 compcert.backend.RTL <> final_state ind
R35374:35374 compcert.backend.Deadcodeproof <> r var
R35370:35372 compcert.backend.Deadcodeproof <> st1 var
R35334:35345 compcert.backend.Deadcodeproof <> match_states ind
R35351:35353 compcert.backend.Deadcodeproof <> st2 var
R35347:35349 compcert.backend.Deadcodeproof <> st1 var
prf 35511:35532 <> transf_program_correct
R35537:35554 compcert.common.Smallstep <> forward_simulation rec
R35578:35590 compcert.backend.RTL <> semantics def
R35592:35596 compcert.backend.Deadcodeproof <> PRESERVATION.tprog var
R35557:35569 compcert.backend.RTL <> semantics def
R35571:35574 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R35708:35711 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R35689:35699 compcert.backend.ValueAnalysis <> sound_state ind
R35706:35707 compcert.backend.Deadcodeproof <> s1 var
R35701:35704 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R35712:35723 compcert.backend.Deadcodeproof <> match_states ind
R35728:35729 compcert.backend.Deadcodeproof <> s2 var
R35725:35726 compcert.backend.Deadcodeproof <> s1 var
R35625:35647 compcert.common.Smallstep <> forward_simulation_step thm
R35708:35711 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R35689:35699 compcert.backend.ValueAnalysis <> sound_state ind
R35706:35707 compcert.backend.Deadcodeproof <> s1 var
R35701:35704 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R35712:35723 compcert.backend.Deadcodeproof <> match_states ind
R35728:35729 compcert.backend.Deadcodeproof <> s2 var
R35725:35726 compcert.backend.Deadcodeproof <> s1 var
R35625:35647 compcert.common.Smallstep <> forward_simulation_step thm
R35741:35757 compcert.backend.Deadcodeproof <> symbols_preserved thm
R35741:35757 compcert.backend.Deadcodeproof <> symbols_preserved thm
R35785:35805 compcert.backend.Deadcodeproof <> transf_initial_states thm
R0:-1 compcert.backend.Deadcodeproof <> y var
R35867:35879 compcert.backend.ValueAnalysis <> sound_initial thm
R35867:35879 compcert.backend.ValueAnalysis <> sound_initial thm
R35926:35944 compcert.backend.Deadcodeproof <> transf_final_states thm
R35926:35944 compcert.backend.Deadcodeproof <> transf_final_states thm
R35995:36005 compcert.backend.ValueAnalysis <> sound_state ind
R36007:36010 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R36028:36037 compcert.backend.ValueAnalysis <> sound_step thm
R35995:36005 compcert.backend.ValueAnalysis <> sound_state ind
R36007:36010 compcert.backend.Deadcodeproof <> PRESERVATION.prog var
R36028:36037 compcert.backend.ValueAnalysis <> sound_step thm
R36055:36056 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R36064:36066 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R36055:36056 compcert.backend.Deadcodeproof <> PRESERVATION.ge var
R36064:36066 compcert.backend.Deadcodeproof <> PRESERVATION.tge var
R36077:36091 compcert.backend.Deadcodeproof <> step_simulation thm
R36154:36165 compcert.backend.Deadcodeproof PRESERVATION <> sec
