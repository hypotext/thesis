DIGEST NO
Fcompcert.cparser.validator.Interpreter_correct
R1052:1058 Coq.Lists.Streams <> <> lib
R1076:1079 Coq.Lists.List <> <> lib
R1097:1102 Coq.Program.Syntax <> <> lib
R1120:1127 Coq.Program.Equality <> <> lib
R1145:1152 compcert.cparser.validator.Alphabet <> <> lib
R1163:1169 compcert.cparser.validator.Grammar <> <> lib
R1180:1188 compcert.cparser.validator.Automaton <> <> lib
R1199:1209 compcert.cparser.validator.Interpreter <> <> lib
R1234:1244 compcert.cparser.validator.Automaton T <> mod
R1261:1273 compcert.cparser.validator.Interpreter T <> mod
R1275:1275 compcert.cparser.validator.Interpreter_correct A <> modtype
mod 1220:1223 <> Make
sec 1469:1472 Make Init
var 1485:1488 Make.Init init
R1490:1498 compcert.cparser.validator.Interpreter_correct A initstate defax
ind 1685:1708 Make word_has_stack_semantics
constr 1765:1778 Make Nil_stack_whss
constr 1816:1830 Make Cons_stack_whss
R1726:1729 Coq.Init.Datatypes <> list ind
R1731:1735 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R1745:1749 compcert.cparser.validator.Interpreter_correct Inter stack def
R1781:1804 compcert.cparser.validator.Interpreter_correct <> word_has_stack_semantics ind
R1809:1810 Coq.Lists.List ListNotations :list_scope:'['_']' not
R1806:1807 Coq.Lists.List ListNotations :list_scope:'['_']' not
R1851:1854 Coq.Init.Datatypes <> list ind
R1856:1860 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R1871:1875 compcert.cparser.validator.Interpreter_correct Inter stack def
R1945:1948 Coq.Init.Datatypes <> list ind
R1950:1954 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R1960:1971 compcert.cparser.validator.Interpreter_correct A noninitstate defax
R2097:2120 compcert.cparser.validator.Interpreter_correct <> word_has_stack_semantics ind
R2187:2188 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2145:2150 Coq.Init.Specif <> existT constr
R2172:2186 compcert.cparser.validator.Interpreter_correct <> semantic_valuet var
R2170:2170 compcert.cparser.validator.Interpreter_correct <> s var
R2152:2168 compcert.cparser.validator.Interpreter_correct Inter noninitstate_type def
R2189:2194 compcert.cparser.validator.Interpreter_correct <> stackq var
R2135:2136 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R2130:2134 compcert.cparser.validator.Interpreter_correct <> wordq var
R2137:2141 compcert.cparser.validator.Interpreter_correct <> wordt var
R2012:2020 Coq.Init.Logic <> inhabited ind
R2023:2032 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree ind
R2072:2086 compcert.cparser.validator.Interpreter_correct <> semantic_valuet var
R2066:2070 compcert.cparser.validator.Interpreter_correct <> wordt var
R2035:2061 compcert.cparser.validator.Interpreter_correct A last_symb_of_non_init_state defax
R2063:2063 compcert.cparser.validator.Interpreter_correct <> s var
R1885:1908 compcert.cparser.validator.Interpreter_correct <> word_has_stack_semantics ind
R1916:1921 compcert.cparser.validator.Interpreter_correct <> stackq var
R1910:1914 compcert.cparser.validator.Interpreter_correct <> wordq var
prf 2205:2227 Make pop_invariant_converter
R2357:2361 Coq.Init.Logic <> :type_scope:x_'='_x not
R2274:2284 compcert.cparser.validator.Tuples <> arrows_left def
R2356:2356 compcert.cparser.validator.Interpreter_correct <> A var
R2287:2289 Coq.Lists.List <> map def
R2313:2322 Coq.Lists.List <> rev_append def
R2339:2352 compcert.cparser.validator.Interpreter_correct <> symbols_popped var
R2324:2337 compcert.cparser.validator.Interpreter_correct <> symbols_to_pop var
R2291:2310 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R2362:2372 compcert.cparser.validator.Tuples <> arrows_left def
R2421:2432 compcert.cparser.validator.Tuples <> arrows_right def
R2437:2439 Coq.Lists.List <> map def
R2462:2475 compcert.cparser.validator.Interpreter_correct <> symbols_to_pop var
R2441:2460 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R2434:2434 compcert.cparser.validator.Interpreter_correct <> A var
R2375:2377 Coq.Lists.List <> map def
R2400:2413 compcert.cparser.validator.Interpreter_correct <> symbols_popped var
R2379:2398 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R2502:2513 compcert.cparser.validator.Tuples <> arrows_right def
R2516:2526 compcert.cparser.validator.Tuples <> arrows_left def
R2537:2550 Coq.Lists.List <> rev_append_rev thm
R2553:2559 Coq.Lists.List <> map_app thm
R2562:2568 Coq.Lists.List <> map_rev thm
R2571:2583 Coq.Lists.List <> fold_left_app thm
R2537:2550 Coq.Lists.List <> rev_append_rev thm
R2553:2559 Coq.Lists.List <> map_app thm
R2562:2568 Coq.Lists.List <> map_rev thm
R2571:2583 Coq.Lists.List <> fold_left_app thm
R2606:2624 Coq.Lists.List <> fold_left_rev_right thm
R2627:2640 Coq.Lists.List <> rev_involutive thm
R2606:2624 Coq.Lists.List <> fold_left_rev_right thm
R2627:2640 Coq.Lists.List <> rev_involutive thm
prf 2706:2718 Make pop_invariant
R2761:2764 Coq.Init.Datatypes <> list ind
R2766:2771 compcert.cparser.validator.Interpreter_correct A.Gram symbol ind
R2794:2798 compcert.cparser.validator.Interpreter_correct Inter stack def
R2837:2847 compcert.cparser.validator.Tuples <> arrows_left def
R2919:2919 compcert.cparser.validator.Interpreter_correct <> A var
R2850:2852 Coq.Lists.List <> map def
R2876:2885 Coq.Lists.List <> rev_append def
R2902:2915 compcert.cparser.validator.Interpreter_correct <> symbols_popped var
R2887:2900 compcert.cparser.validator.Interpreter_correct <> symbols_to_pop var
R2854:2873 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R3122:3128 Coq.Init.Logic <> eq_rect scheme
R3153:3175 compcert.cparser.validator.Interpreter_correct Make pop_invariant_converter thm
R3143:3148 compcert.cparser.validator.Interpreter_correct <> action var
R3140:3140 compcert.cparser.validator.Interpreter_correct <> x var
R3197:3199 compcert.cparser.validator.Interpreter_correct Inter pop def
R3227:3233 compcert.cparser.validator.Tuples <> uncurry def
R3243:3252 compcert.cparser.validator.Interpreter_correct <> sem_popped var
R3235:3241 compcert.cparser.validator.Interpreter_correct <> action' var
R3216:3224 compcert.cparser.validator.Interpreter_correct <> stack_cur var
R3201:3214 compcert.cparser.validator.Interpreter_correct <> symbols_to_pop var
R3268:3269 compcert.cparser.validator.Interpreter_correct Inter OK constr
R3271:3271 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3281:3282 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3286:3286 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3301:3307 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3334:3347 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R3388:3403 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R3359:3361 Coq.Init.Logic <> :type_scope:x_'='_x not
R3349:3358 compcert.cparser.validator.Interpreter_correct <> word_stack var
R3370:3373 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R3362:3369 compcert.cparser.validator.Interpreter_correct <> word1res var
R3374:3381 compcert.cparser.validator.Interpreter_correct <> word2res var
R3447:3462 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R3404:3427 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R3429:3436 compcert.cparser.validator.Interpreter_correct <> word1res var
R3492:3507 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R3466:3468 Coq.Init.Logic <> :type_scope:x_'='_x not
R3469:3475 compcert.cparser.validator.Tuples <> uncurry def
R3484:3491 compcert.cparser.validator.Interpreter_correct <> sem_full var
R3477:3482 compcert.cparser.validator.Interpreter_correct <> action var
R3508:3516 Coq.Init.Logic <> inhabited ind
R3534:3548 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree_list ind
R3617:3624 compcert.cparser.validator.Interpreter_correct <> sem_full var
R3602:3603 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R3594:3601 compcert.cparser.validator.Interpreter_correct <> word2res var
R3604:3614 compcert.cparser.validator.Interpreter_correct <> word_popped var
R3551:3560 Coq.Lists.List <> rev_append def
R3577:3590 compcert.cparser.validator.Interpreter_correct <> symbols_popped var
R3562:3575 compcert.cparser.validator.Interpreter_correct <> symbols_to_pop var
R3635:3637 compcert.cparser.validator.Interpreter_correct Inter Err constr
R3642:3645 Coq.Init.Logic <> True ind
R3034:3042 Coq.Init.Logic <> inhabited ind
R3045:3059 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree_list ind
R3088:3097 compcert.cparser.validator.Interpreter_correct <> sem_popped var
R3076:3086 compcert.cparser.validator.Interpreter_correct <> word_popped var
R3061:3074 compcert.cparser.validator.Interpreter_correct <> symbols_popped var
R2981:3004 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R3017:3025 compcert.cparser.validator.Interpreter_correct <> stack_cur var
R3006:3015 compcert.cparser.validator.Interpreter_correct <> word_stack var
R3704:3706 compcert.cparser.validator.Interpreter_correct Inter pop def
R3714:3716 compcert.cparser.validator.Interpreter_correct Inter pop def
R3714:3716 compcert.cparser.validator.Interpreter_correct Inter pop def
R3714:3716 compcert.cparser.validator.Interpreter_correct Inter pop def
R3741:3744 Coq.Init.Datatypes <> list ind
R3746:3750 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R3738:3739 Coq.Lists.List ListNotations :list_scope:'['_']' not
R3741:3744 Coq.Init.Datatypes <> list ind
R3746:3750 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R3738:3739 Coq.Lists.List ListNotations :list_scope:'['_']' not
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R3791:3797 Coq.Logic.JMeq <> JMeq_eq prfax
R3831:3831 compcert.cparser.validator.Interpreter_correct <> x var
R3800:3810 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R3791:3797 Coq.Logic.JMeq <> JMeq_eq prfax
R3831:3831 compcert.cparser.validator.Interpreter_correct <> x var
R3800:3810 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R3882:3894 compcert.cparser.validator.Alphabet <> compare_eqdec def
R3897:3923 compcert.cparser.validator.Interpreter_correct A last_symb_of_non_init_state defax
R3882:3894 compcert.cparser.validator.Alphabet <> compare_eqdec def
R3897:3923 compcert.cparser.validator.Interpreter_correct A last_symb_of_non_init_state defax
R4007:4014 compcert.cparser.validator.Interpreter_correct A.GramDefs Cons_ptl constr
R4020:4027 Coq.Init.Logic <> inhabits constr
R4007:4014 compcert.cparser.validator.Interpreter_correct A.GramDefs Cons_ptl constr
R4020:4027 Coq.Init.Logic <> inhabits constr
R4143:4145 compcert.cparser.validator.Interpreter_correct Inter Err constr
R4154:4155 compcert.cparser.validator.Interpreter_correct Inter OK constr
R4143:4145 compcert.cparser.validator.Interpreter_correct Inter Err constr
R4154:4155 compcert.cparser.validator.Interpreter_correct Inter OK constr
R4186:4188 compcert.cparser.validator.Interpreter_correct Inter Err constr
R4197:4198 compcert.cparser.validator.Interpreter_correct Inter OK constr
R4186:4188 compcert.cparser.validator.Interpreter_correct Inter Err constr
R4197:4198 compcert.cparser.validator.Interpreter_correct Inter OK constr
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R4428:4436 Coq.Lists.List <> app_assoc thm
R4428:4436 Coq.Lists.List <> app_assoc thm
R4482:4488 Coq.Logic.JMeq <> JMeq_eq prfax
R4482:4488 Coq.Logic.JMeq <> JMeq_eq prfax
R4543:4543 compcert.cparser.validator.Interpreter_correct <> x var
R4512:4522 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R4543:4543 compcert.cparser.validator.Interpreter_correct <> x var
R4512:4522 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R4595:4595 compcert.cparser.validator.Interpreter_correct <> x var
R4564:4574 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R4595:4595 compcert.cparser.validator.Interpreter_correct <> x var
R4564:4574 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
prf 4658:4678 Make reduce_step_invariant
R4687:4691 compcert.cparser.validator.Interpreter_correct Inter stack def
R4700:4709 compcert.cparser.validator.Interpreter_correct A.Gram production defax
R4782:4792 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R4810:4815 compcert.cparser.validator.Interpreter_correct <> buffer var
R4805:4808 compcert.cparser.validator.Interpreter_correct <> prod var
R4799:4803 compcert.cparser.validator.Interpreter_correct <> stack var
R4794:4797 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R4828:4829 compcert.cparser.validator.Interpreter_correct Inter OK constr
R4832:4840 compcert.cparser.validator.Interpreter_correct Inter Accept_sr constr
R4886:4895 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4873:4875 Coq.Init.Logic <> :type_scope:x_'='_x not
R4867:4872 compcert.cparser.validator.Interpreter_correct <> buffer var
R4896:4904 Coq.Init.Logic <> inhabited ind
R4907:4916 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree ind
R4939:4942 compcert.cparser.validator.Interpreter_correct <> word var
R4919:4920 compcert.cparser.validator.Interpreter_correct A.Gram NT constr
R4923:4930 compcert.cparser.validator.Interpreter_correct A start_nt defax
R4932:4935 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R4955:4956 compcert.cparser.validator.Interpreter_correct Inter OK constr
R4959:4969 compcert.cparser.validator.Interpreter_correct Inter Progress_sr constr
R5021:5030 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R5008:5010 Coq.Init.Logic <> :type_scope:x_'='_x not
R5002:5007 compcert.cparser.validator.Interpreter_correct <> buffer var
R5031:5054 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R5056:5059 compcert.cparser.validator.Interpreter_correct <> word var
R5077:5079 compcert.cparser.validator.Interpreter_correct Inter Err constr
R5083:5084 compcert.cparser.validator.Interpreter_correct Inter OK constr
R5086:5092 compcert.cparser.validator.Interpreter_correct Inter Fail_sr constr
R5097:5100 Coq.Init.Logic <> True ind
R5097:5100 Coq.Init.Logic <> True ind
R4735:4758 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R4765:4769 compcert.cparser.validator.Interpreter_correct <> stack var
R4760:4763 compcert.cparser.validator.Interpreter_correct <> word var
R5142:5152 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R5167:5179 compcert.cparser.validator.Interpreter_correct Make pop_invariant thm
R5211:5230 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R5233:5234 compcert.cparser.validator.Interpreter_correct A.Gram NT constr
R5237:5244 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R5201:5202 Coq.Lists.List ListNotations :list_scope:'['_']' not
R5182:5193 compcert.cparser.validator.Interpreter_correct A.Gram prod_rhs_rev defax
R5167:5179 compcert.cparser.validator.Interpreter_correct Make pop_invariant thm
R5211:5230 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R5233:5234 compcert.cparser.validator.Interpreter_correct A.Gram NT constr
R5237:5244 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R5201:5202 Coq.Lists.List ListNotations :list_scope:'['_']' not
R5182:5193 compcert.cparser.validator.Interpreter_correct A.Gram prod_rhs_rev defax
R5279:5301 compcert.cparser.validator.Interpreter_correct Make pop_invariant_converter thm
R5367:5368 Coq.Lists.List ListNotations :list_scope:'['_']' not
R5348:5359 compcert.cparser.validator.Interpreter_correct A.Gram prod_rhs_rev defax
R5304:5323 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R5326:5327 compcert.cparser.validator.Interpreter_correct A.Gram NT constr
R5330:5337 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R5279:5301 compcert.cparser.validator.Interpreter_correct Make pop_invariant_converter thm
R5367:5368 Coq.Lists.List ListNotations :list_scope:'['_']' not
R5348:5359 compcert.cparser.validator.Interpreter_correct A.Gram prod_rhs_rev defax
R5304:5323 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R5326:5327 compcert.cparser.validator.Interpreter_correct A.Gram NT constr
R5330:5337 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R5383:5389 Coq.Lists.List <> rev_alt thm
R5383:5389 Coq.Lists.List <> rev_alt thm
R5445:5452 Coq.Init.Logic <> inhabits constr
R5454:5460 compcert.cparser.validator.Interpreter_correct A.GramDefs Nil_ptl constr
R5439:5440 Coq.Program.Syntax <> ::'()' not
R5436:5437 Coq.Lists.List ListNotations :list_scope:'['_']' not
R5416:5426 compcert.cparser.validator.Interpreter_correct A.Gram prod_action defax
R5445:5452 Coq.Init.Logic <> inhabits constr
R5454:5460 compcert.cparser.validator.Interpreter_correct A.GramDefs Nil_ptl constr
R5439:5440 Coq.Program.Syntax <> ::'()' not
R5436:5437 Coq.Lists.List ListNotations :list_scope:'['_']' not
R5416:5426 compcert.cparser.validator.Interpreter_correct A.Gram prod_action defax
R5531:5542 compcert.cparser.validator.Interpreter_correct Inter prod_action' def
R5531:5542 compcert.cparser.validator.Interpreter_correct Inter prod_action' def
R5584:5586 compcert.cparser.validator.Interpreter_correct Inter pop def
R5615:5626 compcert.cparser.validator.Interpreter_correct Inter prod_action' def
R5589:5600 compcert.cparser.validator.Interpreter_correct A.Gram prod_rhs_rev defax
R5584:5586 compcert.cparser.validator.Interpreter_correct Inter pop def
R5615:5626 compcert.cparser.validator.Interpreter_correct Inter prod_action' def
R5589:5600 compcert.cparser.validator.Interpreter_correct A.Gram prod_rhs_rev defax
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R5735:5749 compcert.cparser.validator.Interpreter_correct A.GramDefs Non_terminal_pt constr
R5752:5759 Coq.Init.Logic <> inhabits constr
R5735:5749 compcert.cparser.validator.Interpreter_correct A.GramDefs Non_terminal_pt constr
R5752:5759 Coq.Init.Logic <> inhabits constr
R5785:5793 Coq.Init.Logic <> inhabited ind
R5796:5805 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree ind
R5785:5793 Coq.Init.Logic <> inhabited ind
R5796:5805 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree ind
R5887:5896 compcert.cparser.validator.Interpreter_correct A goto_table defax
R5923:5930 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R5899:5912 compcert.cparser.validator.Interpreter_correct Inter state_of_stack def
R5914:5917 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R5887:5896 compcert.cparser.validator.Interpreter_correct A goto_table defax
R5923:5930 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R5899:5912 compcert.cparser.validator.Interpreter_correct Inter state_of_stack def
R5914:5917 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R5975:5983 Coq.Lists.List <> app_nil_r thm
R5975:5983 Coq.Lists.List <> app_nil_r thm
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R6078:6090 compcert.cparser.validator.Alphabet <> compare_eqdec def
R6109:6116 compcert.cparser.validator.Interpreter_correct A start_nt defax
R6118:6121 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R6093:6100 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R6078:6090 compcert.cparser.validator.Alphabet <> compare_eqdec def
R6109:6116 compcert.cparser.validator.Interpreter_correct A start_nt defax
R6118:6121 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R6093:6100 compcert.cparser.validator.Interpreter_correct A.Gram prod_lhs defax
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R6145:6153 Coq.Lists.List <> app_nil_r thm
R6145:6153 Coq.Lists.List <> app_nil_r thm
R6223:6229 Coq.Logic.JMeq <> JMeq_eq prfax
R6223:6229 Coq.Logic.JMeq <> JMeq_eq prfax
R6284:6284 compcert.cparser.validator.Interpreter_correct <> x var
R6253:6263 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R6284:6284 compcert.cparser.validator.Interpreter_correct <> x var
R6253:6263 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R6336:6336 compcert.cparser.validator.Interpreter_correct <> x var
R6305:6315 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
R6336:6336 compcert.cparser.validator.Interpreter_correct <> x var
R6305:6315 compcert.cparser.validator.Tuples <> JMeq_eqrect thm
prf 6392:6405 Make step_invariant
R6414:6418 compcert.cparser.validator.Interpreter_correct Inter stack def
R6429:6434 Coq.Lists.Streams <> Stream coind
R6436:6440 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R6580:6583 compcert.cparser.validator.Interpreter_correct Inter step def
R6596:6605 compcert.cparser.validator.Interpreter_correct <> buffer_tmp var
R6590:6594 compcert.cparser.validator.Interpreter_correct <> stack var
R6585:6588 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R6618:6619 compcert.cparser.validator.Interpreter_correct Inter OK constr
R6622:6630 compcert.cparser.validator.Interpreter_correct Inter Accept_sr constr
R6657:6663 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6672:6681 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6713:6724 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6688:6690 Coq.Init.Logic <> :type_scope:x_'='_x not
R6682:6687 compcert.cparser.validator.Interpreter_correct <> buffer var
R6699:6702 compcert.cparser.validator.Interpreter Make ::x_'++'_x not
R6691:6698 compcert.cparser.validator.Interpreter_correct <> word_new var
R6725:6733 Coq.Init.Logic <> inhabited ind
R6736:6745 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree ind
R6768:6775 compcert.cparser.validator.Interpreter_correct <> word_new var
R6748:6749 compcert.cparser.validator.Interpreter_correct A.Gram NT constr
R6752:6759 compcert.cparser.validator.Interpreter_correct A start_nt defax
R6761:6764 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R6788:6789 compcert.cparser.validator.Interpreter_correct Inter OK constr
R6792:6802 compcert.cparser.validator.Interpreter_correct Inter Progress_sr constr
R6835:6841 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6850:6859 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6891:6902 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6866:6868 Coq.Init.Logic <> :type_scope:x_'='_x not
R6860:6865 compcert.cparser.validator.Interpreter_correct <> buffer var
R6877:6880 compcert.cparser.validator.Interpreter Make ::x_'++'_x not
R6869:6876 compcert.cparser.validator.Interpreter_correct <> word_new var
R6903:6926 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R6928:6935 compcert.cparser.validator.Interpreter_correct <> word_new var
R6953:6955 compcert.cparser.validator.Interpreter_correct Inter Err constr
R6959:6960 compcert.cparser.validator.Interpreter_correct Inter OK constr
R6962:6968 compcert.cparser.validator.Interpreter_correct Inter Fail_sr constr
R6973:6976 Coq.Init.Logic <> True ind
R6973:6976 Coq.Init.Logic <> True ind
R6468:6474 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6483:6488 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R6520:6527 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6495:6497 Coq.Init.Logic <> :type_scope:x_'='_x not
R6489:6494 compcert.cparser.validator.Interpreter_correct <> buffer var
R6506:6509 compcert.cparser.validator.Interpreter Make ::x_'++'_x not
R6498:6505 compcert.cparser.validator.Interpreter_correct <> word_old var
R6510:6519 compcert.cparser.validator.Interpreter_correct <> buffer_tmp var
R6528:6551 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R6562:6566 compcert.cparser.validator.Interpreter_correct <> stack var
R6553:6560 compcert.cparser.validator.Interpreter_correct <> word_old var
R7033:7036 compcert.cparser.validator.Interpreter_correct Inter step def
R7049:7060 compcert.cparser.validator.Interpreter_correct A action_table defax
R7063:7076 compcert.cparser.validator.Interpreter_correct Inter state_of_stack def
R7078:7081 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R7049:7060 compcert.cparser.validator.Interpreter_correct A action_table defax
R7063:7076 compcert.cparser.validator.Interpreter_correct Inter state_of_stack def
R7078:7081 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R7104:7124 compcert.cparser.validator.Interpreter_correct Make reduce_step_invariant thm
R7104:7124 compcert.cparser.validator.Interpreter_correct Make reduce_step_invariant thm
R7159:7169 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R7171:7174 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R7159:7169 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R7171:7174 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R7254:7263 Coq.Lists.Streams <> hd def
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R7315:7318 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R7319:7319 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R7369:7369 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R7320:7325 Coq.Init.Specif <> existT constr
R7337:7356 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R7359:7359 compcert.cparser.validator.Interpreter_correct A.Gram T constr
R7361:7361 compcert.cparser.validator.Interpreter_correct <> t var
R7315:7318 Coq.Init.Datatypes <> :list_scope:x_'++'_x not
R7319:7319 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R7369:7369 Coq.Lists.List ListNotations :list_scope:'['_x_';'_'..'_';'_x_']' not
R7320:7325 Coq.Init.Specif <> existT constr
R7337:7356 compcert.cparser.validator.Interpreter_correct A.Gram symbol_semantic_type defax
R7359:7359 compcert.cparser.validator.Interpreter_correct A.Gram T constr
R7361:7361 compcert.cparser.validator.Interpreter_correct <> t var
R7400:7416 compcert.cparser.validator.Interpreter_correct Inter app_str_app_assoc thm
R7400:7416 compcert.cparser.validator.Interpreter_correct Inter app_str_app_assoc thm
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R7436:7450 compcert.cparser.validator.Interpreter_correct Make Cons_stack_whss constr
R7436:7450 compcert.cparser.validator.Interpreter_correct Make Cons_stack_whss constr
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R7494:7501 Coq.Init.Logic <> inhabits constr
R7504:7514 compcert.cparser.validator.Interpreter_correct A.GramDefs Terminal_pt constr
R7494:7501 Coq.Init.Logic <> inhabits constr
R7504:7514 compcert.cparser.validator.Interpreter_correct A.GramDefs Terminal_pt constr
R7549:7559 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R7561:7564 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R7585:7587 compcert.cparser.validator.Interpreter_correct Inter Err constr
R7596:7597 compcert.cparser.validator.Interpreter_correct Inter OK constr
R7549:7559 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R7561:7564 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R7585:7587 compcert.cparser.validator.Interpreter_correct Inter Err constr
R7596:7597 compcert.cparser.validator.Interpreter_correct Inter OK constr
R7628:7648 compcert.cparser.validator.Interpreter_correct Make reduce_step_invariant thm
R7679:7689 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R7691:7694 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R7628:7648 compcert.cparser.validator.Interpreter_correct Make reduce_step_invariant thm
R7679:7689 compcert.cparser.validator.Interpreter_correct Inter reduce_step def
R7691:7694 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
prf 7876:7888 Make parse_correct
R7914:7918 compcert.cparser.validator.Interpreter_correct Inter parse def
R7932:7938 compcert.cparser.validator.Interpreter_correct <> n_steps var
R7925:7930 compcert.cparser.validator.Interpreter_correct <> buffer var
R7920:7923 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R7951:7952 compcert.cparser.validator.Interpreter_correct Inter OK constr
R7955:7963 compcert.cparser.validator.Interpreter_correct Inter Parsed_pr constr
R7990:7996 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8005:8014 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8046:8057 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R8021:8023 Coq.Init.Logic <> :type_scope:x_'='_x not
R8015:8020 compcert.cparser.validator.Interpreter_correct <> buffer var
R8032:8035 compcert.cparser.validator.Interpreter Make ::x_'++'_x not
R8024:8031 compcert.cparser.validator.Interpreter_correct <> word_new var
R8058:8066 Coq.Init.Logic <> inhabited ind
R8069:8078 compcert.cparser.validator.Interpreter_correct A.GramDefs parse_tree ind
R8101:8108 compcert.cparser.validator.Interpreter_correct <> word_new var
R8081:8082 compcert.cparser.validator.Interpreter_correct A.Gram NT constr
R8085:8092 compcert.cparser.validator.Interpreter_correct A start_nt defax
R8094:8097 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R8126:8129 Coq.Init.Logic <> True ind
R8152:8156 compcert.cparser.validator.Interpreter_correct Inter parse def
R8167:8173 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8175:8176 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8197:8200 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R8183:8185 Coq.Init.Logic <> :type_scope:x_'='_x not
R8187:8190 compcert.cparser.validator.Interpreter Make ::x_'++'_x not
R8186:8186 compcert.cparser.validator.Interpreter_correct <> w var
R8201:8224 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R8228:8229 Coq.Lists.List ListNotations :list_scope:'['_']' not
R8226:8226 compcert.cparser.validator.Interpreter_correct <> w var
R8167:8173 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8175:8176 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R8197:8200 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R8183:8185 Coq.Init.Logic <> :type_scope:x_'='_x not
R8187:8190 compcert.cparser.validator.Interpreter Make ::x_'++'_x not
R8186:8186 compcert.cparser.validator.Interpreter_correct <> w var
R8201:8224 compcert.cparser.validator.Interpreter_correct Make word_has_stack_semantics ind
R8228:8229 Coq.Lists.List ListNotations :list_scope:'['_']' not
R8226:8226 compcert.cparser.validator.Interpreter_correct <> w var
R8244:8247 Coq.Init.Datatypes <> list ind
R8249:8253 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R8241:8242 Coq.Lists.List ListNotations :list_scope:'['_']' not
R8244:8247 Coq.Init.Datatypes <> list ind
R8249:8253 compcert.cparser.validator.Interpreter_correct A.GramDefs token def
R8241:8242 Coq.Lists.List ListNotations :list_scope:'['_']' not
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R8278:8291 compcert.cparser.validator.Interpreter_correct Make Nil_stack_whss constr
R8278:8291 compcert.cparser.validator.Interpreter_correct Make Nil_stack_whss constr
R8319:8323 compcert.cparser.validator.Interpreter_correct Inter stack def
R8316:8317 Coq.Lists.List ListNotations :list_scope:'['_']' not
R8319:8323 compcert.cparser.validator.Interpreter_correct Inter stack def
R8316:8317 Coq.Lists.List ListNotations :list_scope:'['_']' not
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R8391:8404 compcert.cparser.validator.Interpreter_correct Make step_invariant thm
R8391:8404 compcert.cparser.validator.Interpreter_correct Make step_invariant thm
R8426:8429 compcert.cparser.validator.Interpreter_correct Inter step def
R8431:8434 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R8426:8429 compcert.cparser.validator.Interpreter_correct Inter step def
R8431:8434 compcert.cparser.validator.Interpreter_correct <> Make.Init.init var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R0:-1 compcert.cparser.validator.Interpreter_correct <> y var
R8528:8531 compcert.cparser.validator.Interpreter_correct Make.Init <> sec
R8539:8542 compcert.cparser.validator.Interpreter_correct Make <> mod
