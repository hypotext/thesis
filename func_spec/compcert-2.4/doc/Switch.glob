DIGEST NO
Fcompcert.common.Switch
R1150:1154 Coq.Arith.EqNat <> <> lib
R1172:1177 compcert.lib.Coqlib <> <> lib
R1195:1198 compcert.lib.Maps <> <> lib
R1216:1223 compcert.lib.Integers <> <> lib
R1241:1246 compcert.common.Values <> <> lib
def 1360:1364 <> table
R1376:1379 Coq.Init.Datatypes <> list ind
R1383:1385 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R1382:1382 Coq.Numbers.BinNums <> Z ind
R1386:1388 Coq.Init.Datatypes <> nat ind
def 1402:1414 <> switch_target
R1420:1420 Coq.Numbers.BinNums <> Z ind
R1429:1431 Coq.Init.Datatypes <> nat ind
R1442:1446 compcert.common.Switch <> table def
R1489:1491 Coq.Init.Datatypes <> nat ind
R1504:1508 compcert.common.Switch <> cases var
R1519:1521 Coq.Init.Datatypes <> nil constr
R1526:1528 compcert.common.Switch <> dfl var
R1547:1550 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1534:1534 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1538:1539 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1546:1546 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1567:1569 compcert.lib.Coqlib <> zeq def
R1571:1571 compcert.common.Switch <> n var
R1594:1606 compcert.common.Switch <> switch_target def
R1610:1612 compcert.common.Switch <> dfl var
R1608:1608 compcert.common.Switch <> n var
ind 1636:1650 <> switch_argument
constr 1685:1702 <> switch_argument_32
constr 1773:1790 <> switch_argument_64
R1668:1668 Coq.Numbers.BinNums <> Z ind
R1661:1663 compcert.common.Values <> val ind
R1653:1656 Coq.Init.Datatypes <> bool ind
R1721:1735 compcert.common.Switch <> switch_argument ind
R1753:1764 compcert.lib.Integers Int unsigned def
R1766:1766 compcert.common.Switch <> i var
R1744:1747 compcert.common.Values <> Vint constr
R1749:1749 compcert.common.Switch <> i var
R1737:1741 Coq.Init.Datatypes <> false constr
R1809:1823 compcert.common.Switch <> switch_argument ind
R1841:1854 compcert.lib.Integers Int64 unsigned def
R1856:1856 compcert.common.Switch <> i var
R1831:1835 compcert.common.Values <> Vlong constr
R1837:1837 compcert.common.Switch <> i var
R1825:1828 Coq.Init.Datatypes <> true constr
ind 2131:2138 <> comptree
constr 2154:2161 <> CTaction
constr 2178:2183 <> CTifeq
constr 2225:2230 <> CTiflt
constr 2277:2287 <> CTjumptable
R2169:2171 Coq.Init.Datatypes <> nat ind
R2173:2173 compcert.common.Switch <> comptree ind
R2191:2191 Coq.Numbers.BinNums <> Z ind
R2200:2202 Coq.Init.Datatypes <> nat ind
R2211:2218 compcert.common.Switch <> comptree ind
R2220:2220 compcert.common.Switch <> comptree ind
R2238:2238 Coq.Numbers.BinNums <> Z ind
R2247:2254 compcert.common.Switch <> comptree ind
R2263:2270 compcert.common.Switch <> comptree ind
R2272:2272 compcert.common.Switch <> comptree ind
R2295:2295 Coq.Numbers.BinNums <> Z ind
R2303:2303 Coq.Numbers.BinNums <> Z ind
R2313:2316 Coq.Init.Datatypes <> list ind
R2318:2320 Coq.Init.Datatypes <> nat ind
R2332:2339 compcert.common.Switch <> comptree ind
R2341:2341 compcert.common.Switch <> comptree ind
sec 2352:2359 <> COMPTREE
var 2372:2378 COMPTREE modulus
R2381:2381 Coq.Numbers.BinNums <> Z ind
var 2395:2405 COMPTREE modulus_pos
R2415:2417 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R2408:2414 compcert.common.Switch <> COMPTREE.modulus var
def 2431:2444 <> comptree_match
R2450:2450 Coq.Numbers.BinNums <> Z ind
R2457:2464 compcert.common.Switch <> comptree ind
R2479:2484 Coq.Init.Datatypes <> option ind
R2486:2488 Coq.Init.Datatypes <> nat ind
R2501:2501 compcert.common.Switch <> t var
R2512:2519 compcert.common.Switch <> CTaction constr
R2528:2531 Coq.Init.Datatypes <> Some constr
R2541:2546 compcert.common.Switch <> CTifeq constr
R2571:2573 compcert.lib.Coqlib <> zeq def
R2575:2575 compcert.common.Switch <> n var
R2600:2613 compcert.common.Switch <> comptree_match def
R2615:2615 compcert.common.Switch <> n var
R2586:2589 Coq.Init.Datatypes <> Some constr
R2624:2629 compcert.common.Switch <> CTiflt constr
R2653:2655 compcert.lib.Coqlib <> zlt def
R2657:2657 compcert.common.Switch <> n var
R2693:2706 compcert.common.Switch <> comptree_match def
R2708:2708 compcert.common.Switch <> n var
R2668:2681 compcert.common.Switch <> comptree_match def
R2683:2683 compcert.common.Switch <> n var
R2717:2727 compcert.common.Switch <> CTjumptable constr
R2765:2765 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R2773:2778 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R2767:2769 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2766:2766 compcert.common.Switch <> n var
R2779:2785 compcert.common.Switch <> COMPTREE.modulus var
R2799:2801 compcert.lib.Coqlib <> zlt def
R2803:2807 compcert.common.Switch <> delta var
R2873:2886 compcert.common.Switch <> comptree_match def
R2888:2888 compcert.common.Switch <> n var
R2823:2832 compcert.lib.Coqlib <> list_nth_z def
R2844:2848 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R2839:2843 compcert.common.Switch <> delta var
R2849:2859 compcert.lib.Integers Int modulus def
def 3281:3288 <> split_lt
R3298:3298 Coq.Numbers.BinNums <> Z ind
R3309:3313 compcert.common.Switch <> table def
R3356:3358 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R3351:3355 compcert.common.Switch <> table def
R3359:3363 compcert.common.Switch <> table def
R3376:3380 compcert.common.Switch <> cases var
R3391:3393 Coq.Init.Datatypes <> nil constr
R3398:3398 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3402:3403 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3407:3407 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3399:3401 Coq.Init.Datatypes <> nil constr
R3404:3406 Coq.Init.Datatypes <> nil constr
R3423:3426 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3413:3413 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3417:3418 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3422:3422 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3454:3461 compcert.common.Switch <> split_lt def
R3463:3467 compcert.common.Switch <> pivot var
R3485:3487 compcert.lib.Coqlib <> zlt def
R3493:3497 compcert.common.Switch <> pivot var
R3542:3542 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3544:3545 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3561:3561 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3543:3543 compcert.common.Switch <> l var
R3556:3559 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3546:3546 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3550:3551 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3555:3555 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3560:3560 compcert.common.Switch <> r var
R3510:3510 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3526:3527 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3529:3529 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3521:3524 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3511:3511 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3515:3516 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3520:3520 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3525:3525 compcert.common.Switch <> l var
R3528:3528 compcert.common.Switch <> r var
def 3580:3587 <> split_eq
R3597:3597 Coq.Numbers.BinNums <> Z ind
R3608:3612 compcert.common.Switch <> table def
R3660:3662 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R3650:3655 Coq.Init.Datatypes <> option ind
R3657:3659 Coq.Init.Datatypes <> nat ind
R3663:3667 compcert.common.Switch <> table def
R3680:3684 compcert.common.Switch <> cases var
R3695:3697 Coq.Init.Datatypes <> nil constr
R3702:3702 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3707:3708 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3712:3712 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3703:3706 Coq.Init.Datatypes <> None constr
R3709:3711 Coq.Init.Datatypes <> nil constr
R3728:3731 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3718:3718 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3722:3723 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3727:3727 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3767:3774 compcert.common.Switch <> split_eq def
R3776:3780 compcert.common.Switch <> pivot var
R3798:3800 compcert.lib.Coqlib <> zeq def
R3806:3810 compcert.common.Switch <> pivot var
R3853:3853 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3858:3859 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3880:3880 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3854:3857 compcert.common.Switch <> same var
R3870:3873 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R3860:3860 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3864:3865 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3869:3869 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3874:3879 compcert.common.Switch <> others var
R3823:3823 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3832:3833 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3840:3840 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R3824:3827 Coq.Init.Datatypes <> Some constr
R3834:3839 compcert.common.Switch <> others var
def 3899:3911 <> split_between
R3919:3921 Coq.Init.Datatypes <> nat ind
R3933:3933 Coq.Numbers.BinNums <> Z ind
R3944:3948 compcert.common.Switch <> table def
R4001:4003 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R3991:3996 compcert.lib.Maps ZMap t def
R3998:4000 Coq.Init.Datatypes <> nat ind
R4004:4008 compcert.common.Switch <> table def
R4021:4025 compcert.common.Switch <> cases var
R4036:4038 Coq.Init.Datatypes <> nil constr
R4043:4043 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4057:4058 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4062:4062 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4044:4052 compcert.lib.Maps ZMap init def
R4054:4056 compcert.common.Switch <> dfl var
R4059:4061 Coq.Init.Datatypes <> nil constr
R4078:4081 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4068:4068 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4072:4073 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4077:4077 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4120:4132 compcert.common.Switch <> split_between def
R4142:4143 compcert.common.Switch <> sz var
R4138:4140 compcert.common.Switch <> ofs var
R4134:4136 compcert.common.Switch <> dfl var
R4161:4163 compcert.lib.Coqlib <> zlt def
R4191:4192 compcert.common.Switch <> sz var
R4166:4166 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R4176:4181 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R4170:4172 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4173:4175 compcert.common.Switch <> ofs var
R4182:4188 compcert.common.Switch <> COMPTREE.modulus var
R4251:4251 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4258:4259 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4281:4281 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4252:4257 compcert.common.Switch <> inside var
R4270:4273 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4260:4260 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4264:4265 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4269:4269 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4274:4280 compcert.common.Switch <> outside var
R4205:4205 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4229:4230 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4238:4238 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4206:4213 compcert.lib.Maps ZMap set def
R4223:4228 compcert.common.Switch <> inside var
R4231:4237 compcert.common.Switch <> outside var
def 4302:4317 <> refine_low_bound
R4326:4326 Coq.Numbers.BinNums <> Z ind
R4337:4339 compcert.lib.Coqlib <> zeq def
R4343:4344 compcert.common.Switch <> lo var
R4341:4341 compcert.common.Switch <> v var
R4363:4364 compcert.common.Switch <> lo var
R4353:4355 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4351:4352 compcert.common.Switch <> lo var
def 4379:4395 <> refine_high_bound
R4404:4404 Coq.Numbers.BinNums <> Z ind
R4415:4417 compcert.lib.Coqlib <> zeq def
R4421:4422 compcert.common.Switch <> hi var
R4419:4419 compcert.common.Switch <> v var
R4441:4442 compcert.common.Switch <> hi var
R4431:4433 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4429:4430 compcert.common.Switch <> hi var
def 4455:4472 <> validate_jumptable
R4482:4487 compcert.lib.Maps ZMap t def
R4489:4491 Coq.Init.Datatypes <> nat ind
R4529:4532 Coq.Init.Datatypes <> list ind
R4534:4536 Coq.Init.Datatypes <> nat ind
R4543:4543 Coq.Numbers.BinNums <> Z ind
R4561:4564 Coq.Init.Datatypes <> bool ind
R4577:4579 compcert.common.Switch <> tbl var
R4590:4592 Coq.Init.Datatypes <> nil constr
R4597:4600 Coq.Init.Datatypes <> true constr
R4609:4612 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4656:4665 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R4626:4632 Coq.Arith.EqNat <> beq_nat def
R4639:4646 compcert.lib.Maps ZMap get def
R4650:4654 compcert.common.Switch <> cases var
R4648:4648 compcert.common.Switch <> n var
R4666:4683 compcert.common.Switch <> validate_jumptable def
R4696:4700 Coq.ZArith.BinInt <> Zsucc syndef
R4702:4702 compcert.common.Switch <> n var
R4685:4689 compcert.common.Switch <> cases var
def 4722:4729 <> validate
R4741:4743 Coq.Init.Datatypes <> nat ind
R4754:4758 compcert.common.Switch <> table def
R4765:4772 compcert.common.Switch <> comptree ind
R4801:4801 Coq.Numbers.BinNums <> Z ind
R4817:4820 Coq.Init.Datatypes <> bool ind
R4833:4833 compcert.common.Switch <> t var
R4844:4851 compcert.common.Switch <> CTaction constr
R4872:4876 compcert.common.Switch <> cases var
R4891:4893 Coq.Init.Datatypes <> nil constr
R4908:4914 Coq.Arith.EqNat <> beq_nat def
R4920:4926 compcert.common.Switch <> default var
R4948:4951 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4936:4936 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4941:4942 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4947:4947 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4991:4994 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R4978:4981 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R4967:4969 compcert.lib.Coqlib <> zeq def
R4976:4977 compcert.common.Switch <> lo var
R4982:4984 compcert.lib.Coqlib <> zeq def
R4989:4990 compcert.common.Switch <> hi var
R4986:4987 compcert.common.Switch <> lo var
R4995:5001 Coq.Arith.EqNat <> beq_nat def
R5026:5031 compcert.common.Switch <> CTifeq constr
R5087:5096 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5066:5069 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5055:5057 compcert.lib.Coqlib <> zle def
R5070:5072 compcert.lib.Coqlib <> zlt def
R5080:5086 compcert.common.Switch <> COMPTREE.modulus var
R5103:5110 compcert.common.Switch <> split_eq def
R5118:5122 compcert.common.Switch <> cases var
R5137:5137 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5142:5143 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5145:5145 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5138:5141 Coq.Init.Datatypes <> None constr
R5160:5164 Coq.Init.Datatypes <> false constr
R5174:5174 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5184:5185 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5192:5192 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5175:5178 Coq.Init.Datatypes <> Some constr
R5223:5237 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5207:5213 Coq.Arith.EqNat <> beq_nat def
R5238:5245 compcert.common.Switch <> validate def
R5338:5354 compcert.common.Switch <> refine_high_bound def
R5362:5363 compcert.common.Switch <> hi var
R5288:5303 compcert.common.Switch <> refine_low_bound def
R5311:5312 compcert.common.Switch <> lo var
R5247:5253 compcert.common.Switch <> default var
R5380:5385 compcert.common.Switch <> CTiflt constr
R5440:5449 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5419:5422 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5408:5410 compcert.lib.Coqlib <> zle def
R5423:5425 compcert.lib.Coqlib <> zlt def
R5433:5439 compcert.common.Switch <> COMPTREE.modulus var
R5456:5463 compcert.common.Switch <> split_lt def
R5471:5475 compcert.common.Switch <> cases var
R5490:5490 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5497:5498 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5505:5505 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5561:5574 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5520:5527 compcert.common.Switch <> validate def
R5556:5558 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R5547:5548 compcert.common.Switch <> lo var
R5529:5535 compcert.common.Switch <> default var
R5575:5582 compcert.common.Switch <> validate def
R5608:5609 compcert.common.Switch <> hi var
R5584:5590 compcert.common.Switch <> default var
R5625:5635 compcert.common.Switch <> CTjumptable constr
R5675:5687 compcert.lib.Coqlib <> list_length_z def
R5838:5847 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5816:5819 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5798:5801 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5766:5775 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5748:5751 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5730:5739 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5711:5714 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5702:5704 compcert.lib.Coqlib <> zle def
R5715:5717 compcert.lib.Coqlib <> zlt def
R5723:5729 compcert.common.Switch <> COMPTREE.modulus var
R5740:5742 compcert.lib.Coqlib <> zle def
R5752:5754 compcert.lib.Coqlib <> zlt def
R5759:5765 compcert.common.Switch <> COMPTREE.modulus var
R5776:5778 compcert.lib.Coqlib <> zle def
R5791:5797 compcert.common.Switch <> COMPTREE.modulus var
R5784:5786 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5802:5804 compcert.lib.Coqlib <> zle def
R5809:5815 compcert.common.Switch <> tbl_len var
R5820:5822 compcert.lib.Coqlib <> zlt def
R5827:5837 compcert.lib.Integers Int modulus def
R5854:5866 compcert.common.Switch <> split_between def
R5883:5887 compcert.common.Switch <> cases var
R5868:5874 compcert.common.Switch <> default var
R5902:5902 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5909:5910 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5918:5918 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R5966:5979 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R5933:5950 compcert.common.Switch <> validate_jumptable def
R5980:5987 compcert.common.Switch <> validate def
R6011:6012 compcert.common.Switch <> hi var
R6008:6009 compcert.common.Switch <> lo var
R5989:5995 compcert.common.Switch <> default var
def 6042:6056 <> validate_switch
R6068:6070 Coq.Init.Datatypes <> nat ind
R6081:6085 compcert.common.Switch <> table def
R6092:6099 compcert.common.Switch <> comptree ind
R6107:6114 compcert.common.Switch <> validate def
R6142:6144 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6135:6141 compcert.common.Switch <> COMPTREE.modulus var
R6130:6130 compcert.common.Switch <> t var
R6124:6128 compcert.common.Switch <> cases var
R6116:6122 compcert.common.Switch <> default var
ind 6212:6222 <> wf_comptree
constr 6249:6257 <> wf_action
constr 6309:6315 <> wf_ifeq
constr 6422:6428 <> wf_iflt
constr 6554:6565 <> wf_jumptable
R6225:6232 compcert.common.Switch <> comptree ind
R6278:6288 compcert.common.Switch <> wf_comptree ind
R6291:6298 compcert.common.Switch <> CTaction constr
R6300:6302 compcert.common.Switch <> act var
R6385:6395 compcert.common.Switch <> wf_comptree ind
R6398:6403 compcert.common.Switch <> CTifeq constr
R6413:6415 compcert.common.Switch <> cne var
R6409:6411 compcert.common.Switch <> act var
R6405:6407 compcert.common.Switch <> key var
R6366:6376 compcert.common.Switch <> wf_comptree ind
R6378:6380 compcert.common.Switch <> cne var
R6345:6348 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6352:6354 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6349:6351 compcert.common.Switch <> key var
R6349:6351 compcert.common.Switch <> key var
R6355:6361 compcert.common.Switch <> COMPTREE.modulus var
R6517:6527 compcert.common.Switch <> wf_comptree ind
R6530:6535 compcert.common.Switch <> CTiflt constr
R6545:6547 compcert.common.Switch <> cge var
R6541:6543 compcert.common.Switch <> clt var
R6537:6539 compcert.common.Switch <> key var
R6498:6508 compcert.common.Switch <> wf_comptree ind
R6510:6512 compcert.common.Switch <> cge var
R6479:6489 compcert.common.Switch <> wf_comptree ind
R6491:6493 compcert.common.Switch <> clt var
R6458:6461 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6465:6467 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6462:6464 compcert.common.Switch <> key var
R6462:6464 compcert.common.Switch <> key var
R6468:6474 compcert.common.Switch <> COMPTREE.modulus var
R6678:6688 compcert.common.Switch <> wf_comptree ind
R6691:6701 compcert.common.Switch <> CTjumptable constr
R6715:6720 compcert.common.Switch <> cother var
R6710:6713 compcert.common.Switch <> acts var
R6707:6708 compcert.common.Switch <> sz var
R6703:6705 compcert.common.Switch <> ofs var
R6650:6660 compcert.common.Switch <> wf_comptree ind
R6662:6667 compcert.common.Switch <> cother var
R6624:6627 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6630:6632 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6628:6629 compcert.common.Switch <> sz var
R6628:6629 compcert.common.Switch <> sz var
R6633:6639 compcert.common.Switch <> COMPTREE.modulus var
R6602:6605 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6609:6611 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6606:6608 compcert.common.Switch <> ofs var
R6606:6608 compcert.common.Switch <> ofs var
R6612:6618 compcert.common.Switch <> COMPTREE.modulus var
prf 6731:6741 <> validate_wf
R6821:6831 compcert.common.Switch <> wf_comptree ind
R6833:6833 compcert.common.Switch <> t var
R6808:6810 Coq.Init.Logic <> :type_scope:x_'='_x not
R6778:6785 compcert.common.Switch <> validate def
R6806:6807 compcert.common.Switch <> hi var
R6803:6804 compcert.common.Switch <> lo var
R6801:6801 compcert.common.Switch <> t var
R6795:6799 compcert.common.Switch <> cases var
R6787:6793 compcert.common.Switch <> default var
R6811:6814 Coq.Init.Datatypes <> true constr
R6913:6920 compcert.common.Switch <> split_eq def
R6913:6920 compcert.common.Switch <> split_eq def
R7021:7028 compcert.common.Switch <> split_lt def
R7021:7028 compcert.common.Switch <> split_lt def
R7100:7112 compcert.common.Switch <> split_between def
R7100:7112 compcert.common.Switch <> split_between def
prf 7249:7261 <> split_eq_prop
R7378:7384 Coq.Init.Logic <> :type_scope:x_'='_x not
R7500:7500 Coq.Init.Logic <> :type_scope:x_'='_x not
R7349:7361 compcert.common.Switch <> switch_target def
R7373:7377 compcert.common.Switch <> cases var
R7365:7371 compcert.common.Switch <> default var
R7363:7363 compcert.common.Switch <> v var
R7388:7390 compcert.lib.Coqlib <> zeq def
R7394:7394 compcert.common.Switch <> n var
R7392:7392 compcert.common.Switch <> v var
R7470:7482 compcert.common.Switch <> switch_target def
R7494:7499 compcert.common.Switch <> cases' var
R7486:7492 compcert.common.Switch <> default var
R7484:7484 compcert.common.Switch <> v var
R7411:7416 compcert.common.Switch <> optact var
R7423:7426 Coq.Init.Datatypes <> Some constr
R7441:7444 Coq.Init.Datatypes <> None constr
R7449:7455 compcert.common.Switch <> default var
R7324:7326 Coq.Init.Logic <> :type_scope:x_'='_x not
R7308:7315 compcert.common.Switch <> split_eq def
R7319:7323 compcert.common.Switch <> cases var
R7317:7317 compcert.common.Switch <> n var
R7327:7327 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7334:7335 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7342:7342 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7328:7333 compcert.common.Switch <> optact var
R7336:7341 compcert.common.Switch <> cases' var
R7591:7593 compcert.lib.Coqlib <> zeq def
R7591:7593 compcert.lib.Coqlib <> zeq def
R7646:7653 compcert.common.Switch <> split_eq def
R7646:7653 compcert.common.Switch <> split_eq def
R7742:7744 compcert.lib.Coqlib <> zeq def
R7742:7744 compcert.lib.Coqlib <> zeq def
R7785:7787 compcert.lib.Coqlib <> zeq def
R7785:7787 compcert.lib.Coqlib <> zeq def
R7821:7823 compcert.lib.Coqlib <> zeq def
R7821:7823 compcert.lib.Coqlib <> zeq def
R7855:7863 compcert.lib.Coqlib <> zeq_false thm
R7855:7863 compcert.lib.Coqlib <> zeq_false thm
prf 7902:7914 <> split_lt_prop
R8031:8038 Coq.Init.Logic <> :type_scope:x_'='_x not
R8131:8131 Coq.Init.Logic <> :type_scope:x_'='_x not
R8002:8014 compcert.common.Switch <> switch_target def
R8026:8030 compcert.common.Switch <> cases var
R8018:8024 compcert.common.Switch <> default var
R8016:8016 compcert.common.Switch <> v var
R8042:8044 compcert.lib.Coqlib <> zlt def
R8048:8048 compcert.common.Switch <> n var
R8046:8046 compcert.common.Switch <> v var
R8101:8113 compcert.common.Switch <> switch_target def
R8125:8130 compcert.common.Switch <> rcases var
R8117:8123 compcert.common.Switch <> default var
R8115:8115 compcert.common.Switch <> v var
R8060:8072 compcert.common.Switch <> switch_target def
R8084:8089 compcert.common.Switch <> lcases var
R8076:8082 compcert.common.Switch <> default var
R8074:8074 compcert.common.Switch <> v var
R7977:7979 Coq.Init.Logic <> :type_scope:x_'='_x not
R7961:7968 compcert.common.Switch <> split_lt def
R7972:7976 compcert.common.Switch <> cases var
R7970:7970 compcert.common.Switch <> n var
R7980:7980 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7987:7988 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7995:7995 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7981:7986 compcert.common.Switch <> lcases var
R7989:7994 compcert.common.Switch <> rcases var
R8222:8224 compcert.lib.Coqlib <> zlt def
R8222:8224 compcert.lib.Coqlib <> zlt def
R8278:8285 compcert.common.Switch <> split_lt def
R8278:8285 compcert.common.Switch <> split_lt def
R8363:8365 compcert.lib.Coqlib <> zlt def
R8363:8365 compcert.lib.Coqlib <> zlt def
R8413:8415 compcert.lib.Coqlib <> zeq def
R8413:8415 compcert.lib.Coqlib <> zeq def
R8433:8440 compcert.lib.Coqlib <> zlt_true thm
R8433:8440 compcert.lib.Coqlib <> zlt_true thm
R8476:8478 compcert.lib.Coqlib <> zeq def
R8476:8478 compcert.lib.Coqlib <> zeq def
R8496:8504 compcert.lib.Coqlib <> zlt_false thm
R8496:8504 compcert.lib.Coqlib <> zlt_false thm
prf 8540:8557 <> split_between_prop
R8699:8706 Coq.Init.Logic <> :type_scope:x_'='_x not
R8810:8810 Coq.Init.Logic <> :type_scope:x_'='_x not
R8670:8682 compcert.common.Switch <> switch_target def
R8694:8698 compcert.common.Switch <> cases var
R8686:8692 compcert.common.Switch <> default var
R8684:8684 compcert.common.Switch <> v var
R8710:8712 compcert.lib.Coqlib <> zlt def
R8738:8739 compcert.common.Switch <> sz var
R8715:8715 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8723:8728 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8717:8719 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R8716:8716 compcert.common.Switch <> v var
R8720:8722 compcert.common.Switch <> ofs var
R8729:8735 compcert.common.Switch <> COMPTREE.modulus var
R8779:8791 compcert.common.Switch <> switch_target def
R8803:8809 compcert.common.Switch <> outside var
R8795:8801 compcert.common.Switch <> default var
R8793:8793 compcert.common.Switch <> v var
R8751:8758 compcert.lib.Maps ZMap get def
R8762:8767 compcert.common.Switch <> inside var
R8760:8760 compcert.common.Switch <> v var
R8644:8646 Coq.Init.Logic <> :type_scope:x_'='_x not
R8610:8622 compcert.common.Switch <> split_between def
R8639:8643 compcert.common.Switch <> cases var
R8636:8637 compcert.common.Switch <> sz var
R8632:8634 compcert.common.Switch <> ofs var
R8624:8630 compcert.common.Switch <> default var
R8647:8647 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8654:8655 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8663:8663 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8648:8653 compcert.common.Switch <> inside var
R8656:8662 compcert.common.Switch <> outside var
R8899:8905 compcert.lib.Maps ZMap gi thm
R8899:8905 compcert.lib.Maps ZMap gi thm
R8925:8927 compcert.lib.Coqlib <> zlt def
R8930:8930 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8938:8943 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8932:8934 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R8944:8950 compcert.common.Switch <> COMPTREE.modulus var
R8925:8927 compcert.lib.Coqlib <> zlt def
R8930:8930 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8938:8943 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R8932:8934 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R8944:8950 compcert.common.Switch <> COMPTREE.modulus var
R9004:9016 compcert.common.Switch <> split_between def
R9004:9016 compcert.common.Switch <> split_between def
R9094:9096 compcert.lib.Coqlib <> zlt def
R9099:9099 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R9109:9114 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R9103:9105 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R9115:9121 compcert.common.Switch <> COMPTREE.modulus var
R9094:9096 compcert.lib.Coqlib <> zlt def
R9099:9099 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R9109:9114 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R9103:9105 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R9115:9121 compcert.common.Switch <> COMPTREE.modulus var
R9148:9158 compcert.lib.Maps ZMap gsspec thm
R9148:9158 compcert.lib.Maps ZMap gsspec thm
R9168:9178 compcert.lib.Maps ZIndexed eq def
R9193:9195 compcert.lib.Coqlib <> zeq def
R9193:9195 compcert.lib.Coqlib <> zeq def
R9224:9231 compcert.lib.Coqlib <> zlt_true thm
R9224:9231 compcert.lib.Coqlib <> zlt_true thm
R9275:9277 compcert.lib.Coqlib <> zeq def
R9275:9277 compcert.lib.Coqlib <> zeq def
R9307:9315 compcert.lib.Coqlib <> zlt_false thm
R9307:9315 compcert.lib.Coqlib <> zlt_false thm
prf 9352:9381 <> validate_jumptable_correct_rec
R9507:9509 Coq.Init.Logic <> :type_scope:x_'='_x not
R9491:9500 compcert.lib.Coqlib <> list_nth_z def
R9506:9506 compcert.common.Switch <> v var
R9502:9504 compcert.common.Switch <> tbl var
R9510:9513 Coq.Init.Datatypes <> Some constr
R9515:9522 compcert.lib.Maps ZMap get def
R9535:9539 compcert.common.Switch <> cases var
R9529:9531 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9525:9528 compcert.common.Switch <> base var
R9532:9532 compcert.common.Switch <> v var
R9460:9463 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R9465:9467 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R9464:9464 compcert.common.Switch <> v var
R9464:9464 compcert.common.Switch <> v var
R9468:9480 compcert.lib.Coqlib <> list_length_z def
R9482:9484 compcert.common.Switch <> tbl var
R9446:9448 Coq.Init.Logic <> :type_scope:x_'='_x not
R9413:9430 compcert.common.Switch <> validate_jumptable def
R9442:9445 compcert.common.Switch <> base var
R9438:9440 compcert.common.Switch <> tbl var
R9432:9436 compcert.common.Switch <> cases var
R9449:9452 Coq.Init.Datatypes <> true constr
R9591:9603 compcert.lib.Coqlib <> list_length_z def
R9668:9685 compcert.lib.Coqlib <> list_length_z_cons thm
R9668:9685 compcert.lib.Coqlib <> list_length_z_cons thm
R9700:9711 Coq.Arith.EqNat <> beq_nat_true thm
R9700:9711 Coq.Arith.EqNat <> beq_nat_true thm
R9733:9735 compcert.lib.Coqlib <> zeq def
R9733:9735 compcert.lib.Coqlib <> zeq def
R9760:9762 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9760:9762 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9815:9817 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9838:9840 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9827:9832 Coq.ZArith.BinInt Z succ def
R9841:9846 Coq.ZArith.BinInt Z pred def
R9838:9840 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R9827:9832 Coq.ZArith.BinInt Z succ def
R9841:9846 Coq.ZArith.BinInt Z pred def
R9815:9817 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
prf 9905:9930 <> validate_jumptable_correct
R10178:10180 Coq.Init.Logic <> :type_scope:x_'='_x not
R10140:10149 compcert.lib.Coqlib <> list_nth_z def
R10156:10156 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10164:10169 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10158:10160 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10157:10157 compcert.common.Switch <> v var
R10161:10163 compcert.common.Switch <> ofs var
R10170:10176 compcert.common.Switch <> COMPTREE.modulus var
R10151:10153 compcert.common.Switch <> tbl var
R10181:10184 Coq.Init.Datatypes <> Some constr
R10186:10193 compcert.lib.Maps ZMap get def
R10197:10201 compcert.common.Switch <> cases var
R10195:10195 compcert.common.Switch <> v var
R10113:10116 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R10111:10112 compcert.common.Switch <> sz var
R10117:10129 compcert.lib.Coqlib <> list_length_z def
R10131:10133 compcert.common.Switch <> tbl var
R10090:10093 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10095:10097 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10094:10094 compcert.common.Switch <> v var
R10094:10094 compcert.common.Switch <> v var
R10098:10104 compcert.common.Switch <> COMPTREE.modulus var
R10072:10075 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R10067:10069 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10064:10066 compcert.common.Switch <> ofs var
R10070:10071 compcert.common.Switch <> sz var
R10076:10082 compcert.common.Switch <> COMPTREE.modulus var
R10053:10056 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R10057:10059 compcert.common.Switch <> ofs var
R10042:10045 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R10046:10047 compcert.common.Switch <> sz var
R10030:10032 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R10009:10009 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10017:10022 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10011:10013 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10010:10010 compcert.common.Switch <> v var
R10014:10016 compcert.common.Switch <> ofs var
R10023:10029 compcert.common.Switch <> COMPTREE.modulus var
R10033:10034 compcert.common.Switch <> sz var
R9996:9998 Coq.Init.Logic <> :type_scope:x_'='_x not
R9964:9981 compcert.common.Switch <> validate_jumptable def
R9993:9995 compcert.common.Switch <> ofs var
R9989:9991 compcert.common.Switch <> tbl var
R9983:9987 compcert.common.Switch <> cases var
R9999:10002 Coq.Init.Datatypes <> true constr
R10233:10262 compcert.common.Switch <> validate_jumptable_correct_rec thm
R10233:10262 compcert.common.Switch <> validate_jumptable_correct_rec thm
R10314:10323 compcert.lib.Coqlib <> Zmod_small thm
R10314:10323 compcert.lib.Coqlib <> Zmod_small thm
R10346:10348 compcert.lib.Coqlib <> zle def
R10346:10348 compcert.lib.Coqlib <> zle def
R10416:10418 Coq.Init.Logic <> :type_scope:x_'='_x not
R10379:10379 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10403:10408 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10380:10380 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10388:10391 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10382:10384 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10393:10395 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10396:10402 compcert.common.Switch <> COMPTREE.modulus var
R10409:10415 compcert.common.Switch <> COMPTREE.modulus var
R10419:10419 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10427:10430 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10421:10423 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10431:10437 compcert.common.Switch <> COMPTREE.modulus var
R10416:10418 Coq.Init.Logic <> :type_scope:x_'='_x not
R10379:10379 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10403:10408 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R10380:10380 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10388:10391 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10382:10384 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10393:10395 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10396:10402 compcert.common.Switch <> COMPTREE.modulus var
R10409:10415 compcert.common.Switch <> COMPTREE.modulus var
R10419:10419 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10427:10430 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10421:10423 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10431:10437 compcert.common.Switch <> COMPTREE.modulus var
R10453:10462 compcert.lib.Coqlib <> Zmod_small thm
R10453:10462 compcert.lib.Coqlib <> Zmod_small thm
R10491:10500 Coq.ZArith.Zdiv <> Z_mod_plus thm
R10491:10500 Coq.ZArith.Zdiv <> Z_mod_plus thm
R10554:10561 Coq.ZArith.Zdiv <> Z_mod_lt thm
R10581:10591 compcert.common.Switch <> COMPTREE.modulus_pos var
R10573:10579 compcert.common.Switch <> COMPTREE.modulus var
R10565:10567 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10554:10561 Coq.ZArith.Zdiv <> Z_mod_lt thm
R10581:10591 compcert.common.Switch <> COMPTREE.modulus_pos var
R10573:10579 compcert.common.Switch <> COMPTREE.modulus var
R10565:10567 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
prf 10615:10634 <> validate_correct_rec
R10785:10787 Coq.Init.Logic <> :type_scope:x_'='_x not
R10767:10780 compcert.common.Switch <> comptree_match def
R10784:10784 compcert.common.Switch <> t var
R10782:10782 compcert.common.Switch <> v var
R10788:10791 Coq.Init.Datatypes <> Some constr
R10794:10806 compcert.common.Switch <> switch_target def
R10818:10822 compcert.common.Switch <> cases var
R10810:10816 compcert.common.Switch <> default var
R10808:10808 compcert.common.Switch <> v var
R10750:10753 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R10755:10758 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R10748:10749 compcert.common.Switch <> lo var
R10754:10754 compcert.common.Switch <> v var
R10754:10754 compcert.common.Switch <> v var
R10759:10760 compcert.common.Switch <> hi var
R10735:10737 Coq.Init.Logic <> :type_scope:x_'='_x not
R10705:10712 compcert.common.Switch <> validate def
R10733:10734 compcert.common.Switch <> hi var
R10730:10731 compcert.common.Switch <> lo var
R10728:10728 compcert.common.Switch <> t var
R10722:10726 compcert.common.Switch <> cases var
R10714:10720 compcert.common.Switch <> default var
R10738:10741 Coq.Init.Datatypes <> true constr
R10660:10663 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10665:10667 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10664:10664 compcert.common.Switch <> v var
R10664:10664 compcert.common.Switch <> v var
R10668:10674 compcert.common.Switch <> COMPTREE.modulus var
R10976:10987 Coq.Arith.EqNat <> beq_nat_true thm
R10976:10987 Coq.Arith.EqNat <> beq_nat_true thm
R11041:11052 Coq.Arith.EqNat <> beq_nat_true thm
R11041:11052 Coq.Arith.EqNat <> beq_nat_true thm
R11088:11090 compcert.lib.Coqlib <> zeq def
R11088:11090 compcert.lib.Coqlib <> zeq def
R11153:11160 compcert.common.Switch <> split_eq def
R11153:11160 compcert.common.Switch <> split_eq def
R11277:11288 Coq.Arith.EqNat <> beq_nat_true thm
R11277:11288 Coq.Arith.EqNat <> beq_nat_true thm
R11307:11319 compcert.common.Switch <> split_eq_prop thm
R11307:11319 compcert.common.Switch <> split_eq_prop thm
R11356:11358 compcert.lib.Coqlib <> zeq def
R11356:11358 compcert.lib.Coqlib <> zeq def
R11420:11435 compcert.common.Switch <> refine_low_bound def
R11438:11454 compcert.common.Switch <> refine_high_bound def
R11478:11480 compcert.lib.Coqlib <> zeq def
R11478:11480 compcert.lib.Coqlib <> zeq def
R11513:11515 compcert.lib.Coqlib <> zeq def
R11513:11515 compcert.lib.Coqlib <> zeq def
R11561:11568 compcert.common.Switch <> split_lt def
R11561:11568 compcert.common.Switch <> split_lt def
R11640:11652 compcert.common.Switch <> split_lt_prop thm
R11640:11652 compcert.common.Switch <> split_lt_prop thm
R11687:11689 compcert.lib.Coqlib <> zlt def
R11687:11689 compcert.lib.Coqlib <> zlt def
R11793:11805 compcert.common.Switch <> split_between def
R11793:11805 compcert.common.Switch <> split_between def
R11883:11900 compcert.common.Switch <> split_between_prop thm
R11883:11900 compcert.common.Switch <> split_between_prop thm
R11932:11935 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11957:11959 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11936:11936 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11944:11949 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11938:11940 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R11950:11956 compcert.common.Switch <> COMPTREE.modulus var
R11936:11936 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11944:11949 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11938:11940 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R11950:11956 compcert.common.Switch <> COMPTREE.modulus var
R11960:11966 compcert.common.Switch <> COMPTREE.modulus var
R11979:11986 Coq.ZArith.Zdiv <> Z_mod_lt thm
R11932:11935 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11957:11959 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11936:11936 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11944:11949 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11938:11940 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R11950:11956 compcert.common.Switch <> COMPTREE.modulus var
R11936:11936 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11944:11949 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R11938:11940 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R11950:11956 compcert.common.Switch <> COMPTREE.modulus var
R11960:11966 compcert.common.Switch <> COMPTREE.modulus var
R11979:11986 Coq.ZArith.Zdiv <> Z_mod_lt thm
R12009:12011 compcert.lib.Coqlib <> zlt def
R12014:12014 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R12022:12027 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R12016:12018 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R12028:12034 compcert.common.Switch <> COMPTREE.modulus var
R12009:12011 compcert.lib.Coqlib <> zlt def
R12014:12014 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R12022:12027 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R12016:12018 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R12028:12034 compcert.common.Switch <> COMPTREE.modulus var
R12052:12061 compcert.lib.Coqlib <> Zmod_small thm
R12052:12061 compcert.lib.Coqlib <> Zmod_small thm
R12080:12105 compcert.common.Switch <> validate_jumptable_correct thm
R12080:12105 compcert.common.Switch <> validate_jumptable_correct thm
def 12156:12171 <> table_tree_agree
R12187:12189 Coq.Init.Datatypes <> nat ind
R12200:12204 compcert.common.Switch <> table def
R12211:12218 compcert.common.Switch <> comptree ind
R12281:12283 Coq.Init.Logic <> :type_scope:x_'='_x not
R12263:12276 compcert.common.Switch <> comptree_match def
R12280:12280 compcert.common.Switch <> t var
R12278:12278 compcert.common.Switch <> v var
R12284:12287 Coq.Init.Datatypes <> Some constr
R12289:12301 compcert.common.Switch <> switch_target def
R12313:12317 compcert.common.Switch <> cases var
R12305:12311 compcert.common.Switch <> default var
R12303:12303 compcert.common.Switch <> v var
R12244:12247 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R12249:12251 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R12248:12248 compcert.common.Switch <> v var
R12248:12248 compcert.common.Switch <> v var
R12252:12258 compcert.common.Switch <> COMPTREE.modulus var
prf 12330:12352 <> validate_switch_correct
R12440:12443 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R12427:12437 compcert.common.Switch <> wf_comptree ind
R12439:12439 compcert.common.Switch <> t var
R12444:12459 compcert.common.Switch <> table_tree_agree def
R12475:12475 compcert.common.Switch <> t var
R12469:12473 compcert.common.Switch <> cases var
R12461:12467 compcert.common.Switch <> default var
R12414:12416 Coq.Init.Logic <> :type_scope:x_'='_x not
R12383:12397 compcert.common.Switch <> validate_switch def
R12413:12413 compcert.common.Switch <> t var
R12407:12411 compcert.common.Switch <> cases var
R12399:12405 compcert.common.Switch <> default var
R12417:12420 Coq.Init.Datatypes <> true constr
R12494:12508 compcert.common.Switch <> validate_switch def
R12511:12526 compcert.common.Switch <> table_tree_agree def
R12545:12555 compcert.common.Switch <> validate_wf thm
R12545:12555 compcert.common.Switch <> validate_wf thm
R12583:12602 compcert.common.Switch <> validate_correct_rec thm
R12583:12602 compcert.common.Switch <> validate_correct_rec thm
R12630:12637 compcert.common.Switch COMPTREE <> sec
