DIGEST NO
Fcompcert.backend.SelectDivproof
R896:901 compcert.lib.Coqlib <> <> lib
R919:923 Coq.ZArith.Zquot <> <> lib
R941:943 compcert.common.AST <> <> lib
R961:968 compcert.lib.Integers <> <> lib
R986:991 compcert.lib.Floats <> <> lib
R1009:1014 compcert.common.Values <> <> lib
R1032:1037 compcert.common.Memory <> <> lib
R1055:1064 compcert.common.Globalenvs <> <> lib
R1082:1087 compcert.common.Events <> <> lib
R1105:1110 compcert.backend.Cminor <> <> lib
R1128:1129 compcert.ia32.Op <> <> lib
R1147:1155 compcert.backend.CminorSel <> <> lib
R1173:1180 compcert.ia32.SelectOp <> <> lib
R1198:1210 compcert.ia32.SelectOpproof <> <> lib
R1228:1236 compcert.backend.SelectDiv <> <> lib
sec 1321:1329 <> Z_DIV_MUL
var 1342:1342 Z_DIV_MUL N
R1345:1345 Coq.Numbers.BinNums <> Z ind
var 1396:1400 Z_DIV_MUL N_pos
R1404:1407 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R1403:1403 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
var 1420:1420 Z_DIV_MUL d
R1423:1423 Coq.Numbers.BinNums <> Z ind
var 1458:1462 Z_DIV_MUL d_pos
R1466:1468 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R1465:1465 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
prf 1548:1559 <> Zdiv_mul_pos
R1683:1685 Coq.Init.Logic <> :type_scope:x_'='_x not
R1675:1678 Coq.ZArith.Zdiv <> Zdiv syndef
R1682:1682 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1680:1680 compcert.backend.SelectDivproof <> n var
R1686:1689 Coq.ZArith.Zdiv <> Zdiv syndef
R1700:1704 Coq.ZArith.Zpower <> two_p def
R1708:1710 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R1707:1707 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R1711:1711 compcert.backend.SelectDivproof <> l var
R1693:1695 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1692:1692 compcert.backend.SelectDivproof <> m var
R1696:1696 compcert.backend.SelectDivproof <> n var
R1654:1657 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R1659:1661 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R1658:1658 compcert.backend.SelectDivproof <> n var
R1658:1658 compcert.backend.SelectDivproof <> n var
R1662:1666 Coq.ZArith.Zpower <> two_p def
R1668:1668 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R1601:1604 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R1610:1613 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R1590:1594 Coq.ZArith.Zpower <> two_p def
R1598:1598 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R1597:1597 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R1599:1599 compcert.backend.SelectDivproof <> l var
R1606:1608 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1605:1605 compcert.backend.SelectDivproof <> m var
R1609:1609 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1606:1608 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R1605:1605 compcert.backend.SelectDivproof <> m var
R1609:1609 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1625:1627 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R1614:1618 Coq.ZArith.Zpower <> two_p def
R1622:1622 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R1621:1621 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R1623:1623 compcert.backend.SelectDivproof <> l var
R1628:1632 Coq.ZArith.Zpower <> two_p def
R1634:1634 compcert.backend.SelectDivproof <> l var
R1579:1582 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R1578:1578 compcert.backend.SelectDivproof <> l var
R1770:1781 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R1785:1785 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1770:1781 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R1785:1785 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1809:1811 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R1812:1812 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1809:1811 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R1812:1812 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1829:1833 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R1834:1834 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1829:1833 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R1834:1834 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1863:1866 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R1868:1871 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R1873:1875 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R1872:1872 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1863:1866 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R1868:1871 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R1873:1875 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R1872:1872 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1906:1913 Coq.ZArith.Zdiv <> Z_mod_lt thm
R1919:1923 compcert.backend.SelectDivproof <> Z_DIV_MUL.d_pos var
R1917:1917 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1906:1913 Coq.ZArith.Zdiv <> Z_mod_lt thm
R1919:1923 compcert.backend.SelectDivproof <> Z_DIV_MUL.d_pos var
R1917:1917 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1945:1948 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R1945:1948 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R1986:1986 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1964:1979 Coq.ZArith.Zorder <> Zmult_le_0_reg_r thm
R1986:1986 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R1964:1979 Coq.ZArith.Zorder <> Zmult_le_0_reg_r thm
R2008:2020 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2024:2026 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2023:2023 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2008:2020 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2024:2026 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2023:2023 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2064:2066 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2060:2062 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2063:2063 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2067:2071 Coq.ZArith.Zpower <> two_p def
R2075:2077 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2074:2074 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2064:2066 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2060:2062 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2063:2063 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2067:2071 Coq.ZArith.Zpower <> two_p def
R2075:2077 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2074:2074 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2094:2097 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R2099:2102 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R2103:2107 Coq.ZArith.Zpower <> two_p def
R2094:2097 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R2099:2102 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R2103:2107 Coq.ZArith.Zpower <> two_p def
R2176:2178 Coq.Init.Logic <> :type_scope:x_'='_x not
R2145:2145 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2171:2174 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2151:2153 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2147:2149 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2167:2169 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2154:2158 Coq.ZArith.Zpower <> two_p def
R2162:2164 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2161:2161 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2175:2175 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2184:2186 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2180:2182 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2200:2202 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2187:2191 Coq.ZArith.Zpower <> two_p def
R2195:2197 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2194:2194 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2176:2178 Coq.Init.Logic <> :type_scope:x_'='_x not
R2145:2145 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2171:2174 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2151:2153 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2147:2149 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2167:2169 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2154:2158 Coq.ZArith.Zpower <> two_p def
R2162:2164 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2161:2161 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2175:2175 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2184:2186 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2180:2182 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2200:2202 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2187:2191 Coq.ZArith.Zpower <> two_p def
R2195:2197 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2194:2194 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2252:2255 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2257:2259 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2252:2255 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2257:2259 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2274:2290 Coq.ZArith.Zorder <> Zmult_le_0_compat syndef
R2274:2290 Coq.ZArith.Zorder <> Zmult_le_0_compat syndef
R2315:2318 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2311:2313 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2332:2334 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2319:2323 Coq.ZArith.Zpower <> two_p def
R2327:2329 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2326:2326 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2335:2339 Coq.ZArith.Zpower <> two_p def
R2315:2318 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2311:2313 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2332:2334 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2319:2323 Coq.ZArith.Zpower <> two_p def
R2327:2329 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2326:2326 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2335:2339 Coq.ZArith.Zpower <> two_p def
R2378:2380 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2371:2375 Coq.ZArith.Zpower <> two_p def
R2355:2363 Coq.ZArith.Zorder <> Zle_trans syndef
R2378:2380 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2371:2375 Coq.ZArith.Zpower <> two_p def
R2355:2363 Coq.ZArith.Zorder <> Zle_trans syndef
R2395:2411 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R2395:2411 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R2442:2444 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2441:2441 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2455:2457 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2458:2458 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2455:2457 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2458:2458 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2442:2444 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2441:2441 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2483:2494 Coq.ZArith.Zpower <> two_p_is_exp thm
R2483:2494 Coq.ZArith.Zpower <> two_p_is_exp thm
R2528:2530 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2518:2520 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2511:2515 Coq.ZArith.Zpower <> two_p def
R2521:2525 Coq.ZArith.Zpower <> two_p def
R2527:2527 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2531:2535 Coq.ZArith.Zpower <> two_p def
R2560:2563 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2575:2575 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2553:2557 Coq.ZArith.Zpower <> two_p def
R2571:2573 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2564:2568 Coq.ZArith.Zpower <> two_p def
R2570:2570 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2560:2563 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2575:2575 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2553:2557 Coq.ZArith.Zpower <> two_p def
R2571:2573 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2564:2568 Coq.ZArith.Zpower <> two_p def
R2570:2570 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2528:2530 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2518:2520 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2511:2515 Coq.ZArith.Zpower <> two_p def
R2521:2525 Coq.ZArith.Zpower <> two_p def
R2527:2527 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2531:2535 Coq.ZArith.Zpower <> two_p def
R2606:2622 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R2606:2622 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R2641:2653 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2641:2653 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2702:2705 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2719:2721 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2706:2710 Coq.ZArith.Zpower <> two_p def
R2714:2716 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2713:2713 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2702:2705 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2719:2721 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2706:2710 Coq.ZArith.Zpower <> two_p def
R2714:2716 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2713:2713 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2736:2752 Coq.ZArith.Zorder <> Zmult_le_0_compat syndef
R2736:2752 Coq.ZArith.Zorder <> Zmult_le_0_compat syndef
R2769:2781 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2785:2787 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2784:2784 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2769:2781 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R2785:2787 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2784:2784 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2845:2848 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2841:2843 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2828:2832 Coq.ZArith.Zpower <> two_p def
R2836:2838 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2835:2835 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2866:2868 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2862:2864 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2849:2853 Coq.ZArith.Zpower <> two_p def
R2857:2859 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2856:2856 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2865:2865 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2869:2873 Coq.ZArith.Zpower <> two_p def
R2877:2879 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2876:2876 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2845:2848 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R2841:2843 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2828:2832 Coq.ZArith.Zpower <> two_p def
R2836:2838 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2835:2835 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2866:2868 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2862:2864 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2849:2853 Coq.ZArith.Zpower <> two_p def
R2857:2859 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2856:2856 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2865:2865 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2869:2873 Coq.ZArith.Zpower <> two_p def
R2877:2879 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2876:2876 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2915:2917 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2911:2913 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2898:2902 Coq.ZArith.Zpower <> two_p def
R2906:2908 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2905:2905 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2914:2914 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2918:2922 Coq.ZArith.Zpower <> two_p def
R2926:2928 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2925:2925 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2959:2962 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2968:2968 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2946:2950 Coq.ZArith.Zpower <> two_p def
R2954:2956 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2953:2953 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2964:2966 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2963:2963 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2959:2962 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2968:2968 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2946:2950 Coq.ZArith.Zpower <> two_p def
R2954:2956 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2953:2953 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2964:2966 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2963:2963 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2915:2917 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R2911:2913 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R2898:2902 Coq.ZArith.Zpower <> two_p def
R2906:2908 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2905:2905 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2914:2914 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R2918:2922 Coq.ZArith.Zpower <> two_p def
R2926:2928 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R2925:2925 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R2990:3006 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R2990:3006 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R3033:3045 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R3049:3051 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3048:3048 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3033:3045 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R3049:3051 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3048:3048 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3082:3085 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R3091:3093 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3087:3089 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3107:3109 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3094:3098 Coq.ZArith.Zpower <> two_p def
R3102:3104 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3101:3101 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3082:3085 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R3091:3093 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3087:3089 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3107:3109 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3094:3098 Coq.ZArith.Zpower <> two_p def
R3102:3104 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3101:3101 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3144:3144 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3124:3137 Coq.ZArith.Zorder <> Zmult_le_reg_r thm
R3144:3144 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3124:3137 Coq.ZArith.Zorder <> Zmult_le_reg_r thm
R3168:3170 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3171:3171 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3168:3170 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3171:3171 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3246:3248 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R3226:3228 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3222:3224 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3242:3244 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3229:3233 Coq.ZArith.Zpower <> two_p def
R3237:3239 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3236:3236 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3249:3253 Coq.ZArith.Zpower <> two_p def
R3257:3259 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3256:3256 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3246:3248 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R3226:3228 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3222:3224 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3242:3244 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3229:3233 Coq.ZArith.Zpower <> two_p def
R3237:3239 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3236:3236 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3249:3253 Coq.ZArith.Zpower <> two_p def
R3257:3259 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3256:3256 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3295:3295 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3275:3288 Coq.ZArith.Zorder <> Zmult_lt_reg_r thm
R3295:3295 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3275:3288 Coq.ZArith.Zorder <> Zmult_lt_reg_r thm
R3368:3370 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3364:3366 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3351:3355 Coq.ZArith.Zpower <> two_p def
R3359:3361 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3358:3358 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3367:3367 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3371:3375 Coq.ZArith.Zpower <> two_p def
R3332:3343 Coq.ZArith.Zorder <> Zle_lt_trans syndef
R3368:3370 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3364:3366 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3351:3355 Coq.ZArith.Zpower <> two_p def
R3359:3361 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3358:3358 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3367:3367 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3371:3375 Coq.ZArith.Zpower <> two_p def
R3332:3343 Coq.ZArith.Zorder <> Zle_lt_trans syndef
R3406:3418 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R3406:3418 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R3479:3481 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3475:3477 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3495:3497 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3482:3486 Coq.ZArith.Zpower <> two_p def
R3490:3492 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3489:3489 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3456:3466 compcert.lib.Coqlib <> Zdiv_unique thm
R3479:3481 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3475:3477 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3495:3497 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3482:3486 Coq.ZArith.Zpower <> two_p def
R3490:3492 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3489:3489 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3456:3466 compcert.lib.Coqlib <> Zdiv_unique thm
prf 3530:3542 <> Zdiv_unique_2
R3600:3602 Coq.Init.Logic <> :type_scope:x_'='_x not
R3592:3595 Coq.ZArith.Zdiv <> Zdiv syndef
R3599:3599 compcert.backend.SelectDivproof <> y var
R3597:3597 compcert.backend.SelectDivproof <> x var
R3604:3606 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3603:3603 compcert.backend.SelectDivproof <> q var
R3571:3573 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R3583:3586 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R3579:3581 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3575:3577 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3574:3574 compcert.backend.SelectDivproof <> y var
R3578:3578 compcert.backend.SelectDivproof <> q var
R3582:3582 compcert.backend.SelectDivproof <> x var
R3579:3581 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3575:3577 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3574:3574 compcert.backend.SelectDivproof <> y var
R3578:3578 compcert.backend.SelectDivproof <> q var
R3582:3582 compcert.backend.SelectDivproof <> x var
R3587:3587 compcert.backend.SelectDivproof <> y var
R3562:3564 Coq.ZArith.BinInt <> :Z_scope:x_'>'_x not
R3561:3561 compcert.backend.SelectDivproof <> y var
R3652:3654 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3655:3655 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3661:3664 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3657:3659 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3633:3643 compcert.lib.Coqlib <> Zdiv_unique thm
R3652:3654 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3655:3655 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3661:3664 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3657:3659 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3633:3643 compcert.lib.Coqlib <> Zdiv_unique thm
R3687:3687 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3693:3696 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3689:3691 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3711:3713 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3707:3709 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3711:3713 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3707:3709 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3687:3687 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3693:3696 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3689:3691 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
prf 3746:3757 <> Zdiv_mul_opp
R3880:3882 Coq.Init.Logic <> :type_scope:x_'='_x not
R3872:3875 Coq.ZArith.Zdiv <> Zdiv syndef
R3879:3879 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3877:3877 compcert.backend.SelectDivproof <> n var
R3916:3918 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R3883:3884 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R3885:3888 Coq.ZArith.Zdiv <> Zdiv syndef
R3902:3906 Coq.ZArith.Zpower <> two_p def
R3910:3912 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3909:3909 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3913:3913 compcert.backend.SelectDivproof <> l var
R3892:3895 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3898:3898 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3891:3891 compcert.backend.SelectDivproof <> m var
R3896:3896 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R3897:3897 compcert.backend.SelectDivproof <> n var
R3851:3853 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R3855:3858 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R3854:3854 compcert.backend.SelectDivproof <> n var
R3854:3854 compcert.backend.SelectDivproof <> n var
R3859:3863 Coq.ZArith.Zpower <> two_p def
R3865:3865 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3799:3801 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R3807:3810 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R3788:3792 Coq.ZArith.Zpower <> two_p def
R3796:3796 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3795:3795 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3797:3797 compcert.backend.SelectDivproof <> l var
R3803:3805 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3802:3802 compcert.backend.SelectDivproof <> m var
R3806:3806 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3803:3805 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3802:3802 compcert.backend.SelectDivproof <> m var
R3806:3806 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R3822:3824 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3811:3815 Coq.ZArith.Zpower <> two_p def
R3819:3819 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R3818:3818 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R3820:3820 compcert.backend.SelectDivproof <> l var
R3825:3829 Coq.ZArith.Zpower <> two_p def
R3831:3831 compcert.backend.SelectDivproof <> l var
R3777:3780 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R3776:3776 compcert.backend.SelectDivproof <> l var
R3977:3980 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3983:3983 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3981:3981 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R3992:3994 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4000:4000 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R3996:3998 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3992:3994 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4000:4000 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R3996:3998 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3977:3980 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3983:3983 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R3981:3981 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4023:4034 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R4038:4038 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4023:4034 Coq.ZArith.Zdiv <> Z_div_mod_eq thm
R4038:4038 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4062:4064 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R4065:4065 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4062:4064 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R4065:4065 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4082:4086 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R4087:4087 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4082:4086 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R4087:4087 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4116:4119 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R4121:4124 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R4126:4128 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4125:4125 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4116:4119 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R4121:4124 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R4126:4128 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4125:4125 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4159:4166 Coq.ZArith.Zdiv <> Z_mod_lt thm
R4172:4176 compcert.backend.SelectDivproof <> Z_DIV_MUL.d_pos var
R4170:4170 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4159:4166 Coq.ZArith.Zdiv <> Z_mod_lt thm
R4172:4176 compcert.backend.SelectDivproof <> Z_DIV_MUL.d_pos var
R4170:4170 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4198:4201 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R4198:4201 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R4239:4239 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4217:4232 Coq.ZArith.Zorder <> Zmult_le_0_reg_r thm
R4239:4239 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4217:4232 Coq.ZArith.Zorder <> Zmult_le_0_reg_r thm
R4261:4273 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R4277:4279 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4276:4276 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4261:4273 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R4277:4279 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4276:4276 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4338:4340 Coq.Init.Logic <> :type_scope:x_'='_x not
R4306:4309 Coq.ZArith.Zdiv <> Zdiv syndef
R4324:4328 Coq.ZArith.Zpower <> two_p def
R4332:4334 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4331:4331 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4312:4314 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4320:4320 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4316:4318 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4343:4345 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4341:4341 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4338:4340 Coq.Init.Logic <> :type_scope:x_'='_x not
R4306:4309 Coq.ZArith.Zdiv <> Zdiv syndef
R4324:4328 Coq.ZArith.Zpower <> two_p def
R4332:4334 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4331:4331 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4312:4314 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4320:4320 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4316:4318 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4343:4345 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4341:4341 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4369:4381 compcert.backend.SelectDivproof <> Zdiv_unique_2 thm
R4369:4381 compcert.backend.SelectDivproof <> Zdiv_unique_2 thm
R4393:4405 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R4393:4405 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R4445:4447 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4439:4441 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4426:4430 Coq.ZArith.Zpower <> two_p def
R4434:4436 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4433:4433 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4442:4443 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4448:4450 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4456:4456 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4452:4454 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4475:4477 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4471:4473 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4491:4493 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4478:4482 Coq.ZArith.Zpower <> two_p def
R4486:4488 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4485:4485 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4475:4477 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4471:4473 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4491:4493 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4478:4482 Coq.ZArith.Zpower <> two_p def
R4486:4488 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4485:4485 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4445:4447 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4439:4441 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4426:4430 Coq.ZArith.Zpower <> two_p def
R4434:4436 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4433:4433 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4442:4443 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4448:4450 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4456:4456 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R4452:4454 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4530:4532 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4526:4528 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4529:4529 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4533:4537 Coq.ZArith.Zpower <> two_p def
R4541:4543 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4540:4540 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4530:4532 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4526:4528 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4529:4529 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4533:4537 Coq.ZArith.Zpower <> two_p def
R4541:4543 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4540:4540 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4560:4562 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R4564:4567 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R4568:4572 Coq.ZArith.Zpower <> two_p def
R4560:4562 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R4564:4567 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R4568:4572 Coq.ZArith.Zpower <> two_p def
R4641:4643 Coq.Init.Logic <> :type_scope:x_'='_x not
R4610:4610 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4636:4639 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4616:4618 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4612:4614 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4632:4634 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4619:4623 Coq.ZArith.Zpower <> two_p def
R4627:4629 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4626:4626 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4640:4640 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4649:4651 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4645:4647 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4665:4667 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4652:4656 Coq.ZArith.Zpower <> two_p def
R4660:4662 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4659:4659 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4641:4643 Coq.Init.Logic <> :type_scope:x_'='_x not
R4610:4610 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4636:4639 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4616:4618 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R4612:4614 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4632:4634 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4619:4623 Coq.ZArith.Zpower <> two_p def
R4627:4629 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4626:4626 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4640:4640 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4649:4651 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4645:4647 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4665:4667 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4652:4656 Coq.ZArith.Zpower <> two_p def
R4660:4662 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4659:4659 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4743:4743 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4723:4736 Coq.ZArith.Zorder <> Zmult_lt_reg_r thm
R4743:4743 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4723:4736 Coq.ZArith.Zorder <> Zmult_lt_reg_r thm
R4766:4768 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4769:4769 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4766:4768 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4769:4769 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4814:4816 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R4818:4820 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4814:4816 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R4818:4820 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4831:4847 Coq.ZArith.Zorder <> Zmult_lt_0_compat syndef
R4831:4847 Coq.ZArith.Zorder <> Zmult_lt_0_compat syndef
R4868:4871 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R4885:4887 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4872:4876 Coq.ZArith.Zpower <> two_p def
R4880:4882 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4879:4879 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4868:4871 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R4885:4887 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R4872:4876 Coq.ZArith.Zpower <> two_p def
R4880:4882 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4879:4879 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4902:4918 Coq.ZArith.Zorder <> Zmult_le_0_compat syndef
R4902:4918 Coq.ZArith.Zorder <> Zmult_le_0_compat syndef
R4930:4942 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R4946:4948 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4945:4945 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R4930:4942 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R4946:4948 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R4945:4945 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5005:5005 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4985:4998 Coq.ZArith.Zorder <> Zmult_le_reg_r thm
R5005:5005 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R4985:4998 Coq.ZArith.Zorder <> Zmult_le_reg_r thm
R5045:5048 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R5041:5043 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5049:5053 Coq.ZArith.Zpower <> two_p def
R5057:5059 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5056:5056 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5045:5048 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R5041:5043 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5049:5053 Coq.ZArith.Zpower <> two_p def
R5057:5059 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5056:5056 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5077:5086 Coq.ZArith.BinInt <> Zplus_comm syndef
R5077:5086 Coq.ZArith.BinInt <> Zplus_comm syndef
R5097:5108 Coq.ZArith.Zpower <> two_p_is_exp thm
R5097:5108 Coq.ZArith.Zpower <> two_p_is_exp thm
R5156:5158 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5149:5153 Coq.ZArith.Zpower <> two_p def
R5133:5141 Coq.ZArith.Zorder <> Zle_trans syndef
R5156:5158 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5149:5153 Coq.ZArith.Zpower <> two_p def
R5133:5141 Coq.ZArith.Zorder <> Zle_trans syndef
R5169:5185 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R5169:5185 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R5213:5229 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R5213:5229 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R5248:5260 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R5248:5260 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R5307:5310 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R5303:5305 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5290:5294 Coq.ZArith.Zpower <> two_p def
R5298:5300 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5297:5297 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5328:5330 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R5324:5326 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5311:5315 Coq.ZArith.Zpower <> two_p def
R5319:5321 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5318:5318 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5327:5327 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5331:5335 Coq.ZArith.Zpower <> two_p def
R5339:5341 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5338:5338 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5307:5310 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x not
R5303:5305 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5290:5294 Coq.ZArith.Zpower <> two_p def
R5298:5300 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5297:5297 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5328:5330 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R5324:5326 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5311:5315 Coq.ZArith.Zpower <> two_p def
R5319:5321 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5318:5318 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5327:5327 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5331:5335 Coq.ZArith.Zpower <> two_p def
R5339:5341 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5338:5338 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5377:5379 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R5373:5375 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5360:5364 Coq.ZArith.Zpower <> two_p def
R5368:5370 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5367:5367 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5376:5376 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5380:5384 Coq.ZArith.Zpower <> two_p def
R5388:5390 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5387:5387 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5421:5424 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5430:5430 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5408:5412 Coq.ZArith.Zpower <> two_p def
R5416:5418 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5415:5415 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5426:5428 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R5425:5425 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5421:5424 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5430:5430 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5408:5412 Coq.ZArith.Zpower <> two_p def
R5416:5418 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5415:5415 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5426:5428 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R5425:5425 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5377:5379 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R5373:5375 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5360:5364 Coq.ZArith.Zpower <> two_p def
R5368:5370 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5367:5367 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5376:5376 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5380:5384 Coq.ZArith.Zpower <> two_p def
R5388:5390 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5387:5387 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5461:5477 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R5461:5477 Coq.ZArith.Zorder <> Zmult_le_compat_l thm
R5496:5508 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R5512:5514 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5511:5511 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5496:5508 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R5512:5514 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5511:5511 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
prf 5624:5632 <> Zquot_mul
R5765:5767 Coq.Init.Logic <> :type_scope:x_'='_x not
R5755:5760 Coq.ZArith.BinInt Z quot def
R5764:5764 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5762:5762 compcert.backend.SelectDivproof <> n var
R5796:5799 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5824:5824 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5768:5771 Coq.ZArith.Zdiv <> Zdiv syndef
R5782:5786 Coq.ZArith.Zpower <> two_p def
R5790:5792 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5789:5789 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5793:5793 compcert.backend.SelectDivproof <> l var
R5775:5777 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5774:5774 compcert.backend.SelectDivproof <> m var
R5778:5778 compcert.backend.SelectDivproof <> n var
R5803:5805 compcert.lib.Coqlib <> zlt def
R5807:5807 compcert.backend.SelectDivproof <> n var
R5734:5737 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5739:5741 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R5725:5726 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5727:5731 Coq.ZArith.Zpower <> two_p def
R5733:5733 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5738:5738 compcert.backend.SelectDivproof <> n var
R5738:5738 compcert.backend.SelectDivproof <> n var
R5742:5746 Coq.ZArith.Zpower <> two_p def
R5748:5748 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5674:5676 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R5682:5685 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x_'<='_x not
R5663:5667 Coq.ZArith.Zpower <> two_p def
R5671:5671 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5670:5670 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5672:5672 compcert.backend.SelectDivproof <> l var
R5678:5680 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5677:5677 compcert.backend.SelectDivproof <> m var
R5681:5681 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5678:5680 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R5677:5677 compcert.backend.SelectDivproof <> m var
R5681:5681 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5697:5699 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5686:5690 Coq.ZArith.Zpower <> two_p def
R5694:5694 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R5693:5693 compcert.backend.SelectDivproof <> Z_DIV_MUL.N var
R5695:5695 compcert.backend.SelectDivproof <> l var
R5700:5704 Coq.ZArith.Zpower <> two_p def
R5706:5706 compcert.backend.SelectDivproof <> l var
R5652:5655 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R5651:5651 compcert.backend.SelectDivproof <> l var
R5854:5856 compcert.lib.Coqlib <> zlt def
R5854:5856 compcert.lib.Coqlib <> zlt def
R5875:5886 compcert.backend.SelectDivproof <> Zdiv_mul_opp thm
R5898:5898 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5875:5886 compcert.backend.SelectDivproof <> Zdiv_mul_opp thm
R5898:5898 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5923:5924 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5925:5926 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5923:5924 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5925:5926 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5957:5962 Coq.ZArith.BinInt Z quot def
R5966:5966 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5975:5976 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5977:5982 Coq.ZArith.BinInt Z quot def
R5989:5989 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5985:5985 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5975:5976 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5977:5982 Coq.ZArith.BinInt Z quot def
R5989:5989 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R5985:5985 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R5957:5962 Coq.ZArith.BinInt Z quot def
R5966:5966 compcert.backend.SelectDivproof <> Z_DIV_MUL.d var
R6003:6016 Coq.ZArith.Zquot <> Zquot_Zdiv_pos thm
R6003:6016 Coq.ZArith.Zquot <> Zquot_Zdiv_pos thm
R6045:6056 Coq.ZArith.BinInt Z quot_opp_l thm
R6045:6056 Coq.ZArith.BinInt Z quot_opp_l thm
R6084:6092 Coq.ZArith.BinInt <> Zplus_0_r syndef
R6084:6092 Coq.ZArith.BinInt <> Zplus_0_r syndef
R6103:6116 Coq.ZArith.Zquot <> Zquot_Zdiv_pos thm
R6103:6116 Coq.ZArith.Zquot <> Zquot_Zdiv_pos thm
R6137:6148 compcert.backend.SelectDivproof <> Zdiv_mul_pos thm
R6137:6148 compcert.backend.SelectDivproof <> Zdiv_mul_pos thm
R6168:6176 compcert.backend.SelectDivproof Z_DIV_MUL <> sec
prf 6235:6255 <> divs_mul_params_sound
R6332:6335 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6313:6316 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6318:6320 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6317:6317 compcert.backend.SelectDivproof <> m var
R6317:6317 compcert.backend.SelectDivproof <> m var
R6321:6331 compcert.lib.Integers Int modulus def
R6347:6352 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R6337:6340 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6342:6344 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R6341:6341 compcert.backend.SelectDivproof <> p var
R6341:6341 compcert.backend.SelectDivproof <> p var
R6418:6420 Coq.Init.Logic <> :type_scope:x_'='_x not
R6408:6413 Coq.ZArith.BinInt Z quot def
R6417:6417 compcert.backend.SelectDivproof <> d var
R6415:6415 compcert.backend.SelectDivproof <> n var
R6450:6453 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6478:6478 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6421:6424 Coq.ZArith.Zdiv <> Zdiv syndef
R6435:6439 Coq.ZArith.Zpower <> two_p def
R6444:6446 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6447:6447 compcert.backend.SelectDivproof <> p var
R6428:6430 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6427:6427 compcert.backend.SelectDivproof <> m var
R6431:6431 compcert.backend.SelectDivproof <> n var
R6457:6459 compcert.lib.Coqlib <> zlt def
R6461:6461 compcert.backend.SelectDivproof <> n var
R6379:6382 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R6384:6387 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<='_x not
R6365:6378 compcert.lib.Integers Int min_signed def
R6383:6383 compcert.backend.SelectDivproof <> n var
R6383:6383 compcert.backend.SelectDivproof <> n var
R6388:6401 compcert.lib.Integers Int max_signed def
R6293:6295 Coq.Init.Logic <> :type_scope:x_'='_x not
R6276:6290 compcert.backend.SelectDiv <> divs_mul_params def
R6292:6292 compcert.backend.SelectDivproof <> d var
R6296:6299 Coq.Init.Datatypes <> Some constr
R6300:6300 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6302:6303 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6305:6305 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R6301:6301 compcert.backend.SelectDivproof <> p var
R6304:6304 compcert.backend.SelectDivproof <> m var
R6521:6535 compcert.backend.SelectDiv <> divs_mul_params def
R6569:6587 compcert.backend.SelectDiv <> find_div_mul_params def
R6659:6661 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6634:6636 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6618:6633 compcert.lib.Integers Int half_modulus def
R6653:6657 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R6637:6652 compcert.lib.Integers Int half_modulus def
R6589:6600 compcert.lib.Integers Int wordsize def
R6569:6587 compcert.backend.SelectDiv <> find_div_mul_params def
R6659:6661 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6634:6636 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R6618:6633 compcert.lib.Integers Int half_modulus def
R6653:6657 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R6637:6652 compcert.lib.Integers Int half_modulus def
R6589:6600 compcert.lib.Integers Int wordsize def
R6702:6704 compcert.lib.Coqlib <> zlt def
R6702:6704 compcert.lib.Coqlib <> zlt def
R6726:6728 compcert.lib.Coqlib <> zlt def
R6749:6751 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6731:6735 Coq.ZArith.Zpower <> two_p def
R6740:6742 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6726:6728 compcert.lib.Coqlib <> zlt def
R6749:6751 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6731:6735 Coq.ZArith.Zpower <> two_p def
R6740:6742 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6771:6773 compcert.lib.Coqlib <> zle def
R6798:6800 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6784:6788 Coq.ZArith.Zpower <> two_p def
R6793:6795 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6801:6805 Coq.ZArith.Zpower <> two_p def
R6809:6811 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6777:6779 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6771:6773 compcert.lib.Coqlib <> zle def
R6798:6800 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6784:6788 Coq.ZArith.Zpower <> two_p def
R6793:6795 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6801:6805 Coq.ZArith.Zpower <> two_p def
R6809:6811 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R6777:6779 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R6832:6834 compcert.lib.Coqlib <> zle def
R6832:6834 compcert.lib.Coqlib <> zle def
R6856:6858 compcert.lib.Coqlib <> zlt def
R6862:6872 compcert.lib.Integers Int modulus def
R6856:6858 compcert.lib.Coqlib <> zlt def
R6862:6872 compcert.lib.Integers Int modulus def
R6890:6892 compcert.lib.Coqlib <> zle def
R6890:6892 compcert.lib.Coqlib <> zle def
R6914:6916 compcert.lib.Coqlib <> zlt def
R6914:6916 compcert.lib.Coqlib <> zlt def
R7001:7003 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7016:7019 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7026:7026 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7022:7024 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7016:7019 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7026:7026 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7022:7024 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7001:7003 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7048:7056 compcert.backend.SelectDivproof <> Zquot_mul thm
R7048:7056 compcert.backend.SelectDivproof <> Zquot_mul thm
R7083:7086 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7093:7093 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7089:7091 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7104:7106 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7104:7106 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7083:7086 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7093:7093 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7089:7091 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7152:7155 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7157:7159 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7138:7151 compcert.lib.Integers Int min_signed def
R7160:7175 compcert.lib.Integers Int half_modulus def
R7152:7155 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7157:7159 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7138:7151 compcert.lib.Integers Int min_signed def
R7160:7175 compcert.lib.Integers Int half_modulus def
R7189:7202 compcert.lib.Integers Int max_signed def
prf 7230:7250 <> divu_mul_params_sound
R7327:7330 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R7308:7311 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7313:7315 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7312:7312 compcert.backend.SelectDivproof <> m var
R7312:7312 compcert.backend.SelectDivproof <> m var
R7316:7326 compcert.lib.Integers Int modulus def
R7342:7347 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R7332:7335 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7337:7339 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7336:7336 compcert.backend.SelectDivproof <> p var
R7336:7336 compcert.backend.SelectDivproof <> p var
R7394:7396 Coq.Init.Logic <> :type_scope:x_'='_x not
R7386:7389 Coq.ZArith.Zdiv <> Zdiv syndef
R7393:7393 compcert.backend.SelectDivproof <> d var
R7391:7391 compcert.backend.SelectDivproof <> n var
R7397:7400 Coq.ZArith.Zdiv <> Zdiv syndef
R7411:7415 Coq.ZArith.Zpower <> two_p def
R7420:7422 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7423:7423 compcert.backend.SelectDivproof <> p var
R7404:7406 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7403:7403 compcert.backend.SelectDivproof <> m var
R7407:7407 compcert.backend.SelectDivproof <> n var
R7361:7364 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7366:7368 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R7365:7365 compcert.backend.SelectDivproof <> n var
R7365:7365 compcert.backend.SelectDivproof <> n var
R7369:7379 compcert.lib.Integers Int modulus def
R7288:7290 Coq.Init.Logic <> :type_scope:x_'='_x not
R7271:7285 compcert.backend.SelectDiv <> divu_mul_params def
R7287:7287 compcert.backend.SelectDivproof <> d var
R7291:7294 Coq.Init.Datatypes <> Some constr
R7295:7295 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7297:7298 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7300:7300 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R7296:7296 compcert.backend.SelectDivproof <> p var
R7299:7299 compcert.backend.SelectDivproof <> m var
R7468:7482 compcert.backend.SelectDiv <> divu_mul_params def
R7516:7534 compcert.backend.SelectDiv <> find_div_mul_params def
R7596:7598 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R7576:7578 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R7565:7575 compcert.lib.Integers Int modulus def
R7590:7594 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R7579:7589 compcert.lib.Integers Int modulus def
R7536:7547 compcert.lib.Integers Int wordsize def
R7516:7534 compcert.backend.SelectDiv <> find_div_mul_params def
R7596:7598 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R7576:7578 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R7565:7575 compcert.lib.Integers Int modulus def
R7590:7594 Coq.ZArith.BinInt <> :Z_scope:x_'mod'_x not
R7579:7589 compcert.lib.Integers Int modulus def
R7536:7547 compcert.lib.Integers Int wordsize def
R7639:7641 compcert.lib.Coqlib <> zlt def
R7639:7641 compcert.lib.Coqlib <> zlt def
R7663:7665 compcert.lib.Coqlib <> zle def
R7686:7688 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7668:7672 Coq.ZArith.Zpower <> two_p def
R7677:7679 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7663:7665 compcert.lib.Coqlib <> zle def
R7686:7688 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7668:7672 Coq.ZArith.Zpower <> two_p def
R7677:7679 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7708:7710 compcert.lib.Coqlib <> zle def
R7735:7737 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7721:7725 Coq.ZArith.Zpower <> two_p def
R7730:7732 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7738:7742 Coq.ZArith.Zpower <> two_p def
R7714:7716 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7708:7710 compcert.lib.Coqlib <> zle def
R7735:7737 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7721:7725 Coq.ZArith.Zpower <> two_p def
R7730:7732 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R7738:7742 Coq.ZArith.Zpower <> two_p def
R7714:7716 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R7763:7765 compcert.lib.Coqlib <> zle def
R7763:7765 compcert.lib.Coqlib <> zle def
R7787:7789 compcert.lib.Coqlib <> zlt def
R7793:7803 compcert.lib.Integers Int modulus def
R7787:7789 compcert.lib.Coqlib <> zlt def
R7793:7803 compcert.lib.Integers Int modulus def
R7821:7823 compcert.lib.Coqlib <> zle def
R7821:7823 compcert.lib.Coqlib <> zle def
R7845:7847 compcert.lib.Coqlib <> zlt def
R7845:7847 compcert.lib.Coqlib <> zlt def
R7926:7937 compcert.backend.SelectDivproof <> Zdiv_mul_pos thm
R7926:7937 compcert.backend.SelectDivproof <> Zdiv_mul_pos thm
prf 7975:7992 <> divs_mul_shift_gen
R8084:8087 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R8065:8068 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8070:8072 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8069:8069 compcert.backend.SelectDivproof <> m var
R8069:8069 compcert.backend.SelectDivproof <> m var
R8073:8083 compcert.lib.Integers Int modulus def
R8099:8104 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R8089:8092 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8094:8096 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8093:8093 compcert.backend.SelectDivproof <> p var
R8093:8093 compcert.backend.SelectDivproof <> p var
R8117:8119 Coq.Init.Logic <> :type_scope:x_'='_x not
R8105:8112 compcert.lib.Integers Int divs def
R8116:8116 compcert.backend.SelectDivproof <> y var
R8114:8114 compcert.backend.SelectDivproof <> x var
R8120:8126 compcert.lib.Integers Int add def
R8223:8230 compcert.lib.Integers Int shru def
R8235:8242 compcert.lib.Integers Int repr def
R8232:8232 compcert.backend.SelectDivproof <> x var
R8129:8135 compcert.lib.Integers Int shr def
R8184:8191 compcert.lib.Integers Int repr def
R8193:8193 compcert.backend.SelectDivproof <> p var
R8138:8145 compcert.lib.Integers Int repr def
R8148:8148 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R8165:8168 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R8161:8163 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R8149:8158 compcert.lib.Integers Int signed def
R8160:8160 compcert.backend.SelectDivproof <> x var
R8164:8164 compcert.backend.SelectDivproof <> m var
R8169:8179 compcert.lib.Integers Int modulus def
R8045:8047 Coq.Init.Logic <> :type_scope:x_'='_x not
R8015:8029 compcert.backend.SelectDiv <> divs_mul_params def
R8032:8041 compcert.lib.Integers Int signed def
R8043:8043 compcert.backend.SelectDivproof <> y var
R8048:8051 Coq.Init.Datatypes <> Some constr
R8052:8052 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8054:8055 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8057:8057 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R8053:8053 compcert.backend.SelectDivproof <> p var
R8056:8056 compcert.backend.SelectDivproof <> m var
R8277:8286 compcert.lib.Integers Int signed def
R8277:8286 compcert.lib.Integers Int signed def
R8302:8311 compcert.lib.Integers Int signed def
R8302:8311 compcert.lib.Integers Int signed def
R8332:8352 compcert.backend.SelectDivproof <> divs_mul_params_sound thm
R8419:8426 compcert.lib.Integers Int divs def
R8465:8480 compcert.lib.Integers Int signed_range thm
R8465:8480 compcert.lib.Integers Int signed_range thm
R8495:8506 Coq.ZArith.Zpower <> two_p_is_exp thm
R8495:8506 Coq.ZArith.Zpower <> two_p_is_exp thm
R8529:8537 compcert.lib.Coqlib <> Zdiv_Zdiv thm
R8529:8537 compcert.lib.Coqlib <> Zdiv_Zdiv thm
R8551:8566 compcert.lib.Integers Int shru_lt_zero thm
R8551:8566 compcert.lib.Integers Int shru_lt_zero thm
R8576:8582 compcert.lib.Integers Int add def
R8591:8606 compcert.lib.Integers Int eqm_samerepr thm
R8591:8606 compcert.lib.Integers Int eqm_samerepr thm
R8615:8625 compcert.lib.Integers Int eqm_add thm
R8615:8625 compcert.lib.Integers Int eqm_add thm
R8638:8654 compcert.lib.Integers Int shr_div_two_p thm
R8638:8654 compcert.lib.Integers Int shr_div_two_p thm
R8663:8685 compcert.lib.Integers Int eqm_unsigned_repr_r thm
R8663:8685 compcert.lib.Integers Int eqm_unsigned_repr_r thm
R8694:8706 compcert.lib.Integers Int eqm_refl2 thm
R8694:8706 compcert.lib.Integers Int eqm_refl2 thm
R8720:8736 compcert.lib.Integers Int unsigned_repr thm
R8720:8736 compcert.lib.Integers Int unsigned_repr thm
R8758:8772 compcert.lib.Integers Int signed_repr thm
R8758:8772 compcert.lib.Integers Int signed_repr thm
R8783:8799 compcert.lib.Integers Int modulus_power thm
R8783:8799 compcert.lib.Integers Int modulus_power thm
R8838:8841 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8861:8863 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8824:8837 compcert.lib.Integers Int min_signed def
R8847:8849 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R8843:8845 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R8850:8860 compcert.lib.Integers Int modulus def
R8847:8849 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R8843:8845 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R8850:8860 compcert.lib.Integers Int modulus def
R8864:8879 compcert.lib.Integers Int half_modulus def
R8838:8841 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8861:8863 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R8824:8837 compcert.lib.Integers Int min_signed def
R8847:8849 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R8843:8845 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R8850:8860 compcert.lib.Integers Int modulus def
R8847:8849 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R8843:8845 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R8850:8860 compcert.lib.Integers Int modulus def
R8864:8879 compcert.lib.Integers Int half_modulus def
R8893:8906 compcert.lib.Integers Int max_signed def
R8925:8939 compcert.lib.Coqlib <> Zdiv_interval_1 thm
R8925:8939 compcert.lib.Coqlib <> Zdiv_interval_1 thm
R8953:8970 compcert.lib.Integers Int min_signed_neg thm
R8953:8970 compcert.lib.Integers Int min_signed_neg thm
R8986:9005 compcert.lib.Integers Int half_modulus_pos thm
R8986:9005 compcert.lib.Integers Int half_modulus_pos thm
R9017:9031 compcert.lib.Integers Int modulus_pos thm
R9017:9031 compcert.lib.Integers Int modulus_pos thm
R9079:9081 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9065:9078 compcert.lib.Integers Int min_signed def
R9049:9057 Coq.ZArith.Zorder <> Zle_trans syndef
R9079:9081 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9065:9078 compcert.lib.Integers Int min_signed def
R9049:9057 Coq.ZArith.Zorder <> Zle_trans syndef
R9092:9112 compcert.lib.Coqlib <> Zmult_le_compat_l_neg thm
R9092:9112 compcert.lib.Coqlib <> Zmult_le_compat_l_neg thm
R9133:9150 compcert.lib.Integers Int min_signed_neg thm
R9133:9150 compcert.lib.Integers Int min_signed_neg thm
R9168:9184 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R9168:9184 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R9209:9224 compcert.lib.Integers Int signed_range thm
R9209:9224 compcert.lib.Integers Int signed_range thm
R0:-1 compcert.backend.SelectDivproof <> y var
R0:-1 compcert.backend.SelectDivproof <> y var
R9287:9289 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9271:9286 compcert.lib.Integers Int half_modulus def
R9252:9263 Coq.ZArith.Zorder <> Zle_lt_trans syndef
R9287:9289 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R9271:9286 compcert.lib.Integers Int half_modulus def
R9252:9263 Coq.ZArith.Zorder <> Zle_lt_trans syndef
R9303:9319 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R9303:9319 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R9334:9349 compcert.lib.Integers Int signed_range thm
R9365:9378 compcert.lib.Integers Int max_signed def
R9334:9349 compcert.lib.Integers Int signed_range thm
R0:-1 compcert.backend.SelectDivproof <> y var
R9403:9419 Coq.ZArith.Zorder <> Zmult_lt_compat_l thm
R9403:9419 Coq.ZArith.Zorder <> Zmult_lt_compat_l thm
R9433:9452 compcert.lib.Integers Int half_modulus_pos thm
R9433:9452 compcert.lib.Integers Int half_modulus_pos thm
R0:-1 compcert.backend.SelectDivproof <> y var
R9482:9484 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R9485:9500 compcert.lib.Integers Int max_unsigned def
R9482:9484 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R9485:9500 compcert.lib.Integers Int max_unsigned def
R9539:9544 compcert.lib.Integers Int lt def
R9563:9577 compcert.lib.Integers Int signed_zero thm
R9563:9577 compcert.lib.Integers Int signed_zero thm
R9590:9592 compcert.lib.Coqlib <> zlt def
R9606:9626 compcert.lib.Integers Int eqm_unsigned_repr thm
R9590:9592 compcert.lib.Coqlib <> zlt def
R9606:9626 compcert.lib.Integers Int eqm_unsigned_repr thm
R9606:9626 compcert.lib.Integers Int eqm_unsigned_repr thm
R9638:9650 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R9638:9650 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R9668:9680 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R9668:9680 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
prf 9704:9719 <> divs_mul_shift_1
R9828:9833 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R9818:9821 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R9823:9825 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R9822:9822 compcert.backend.SelectDivproof <> p var
R9822:9822 compcert.backend.SelectDivproof <> p var
R9846:9848 Coq.Init.Logic <> :type_scope:x_'='_x not
R9834:9841 compcert.lib.Integers Int divs def
R9845:9845 compcert.backend.SelectDivproof <> y var
R9843:9843 compcert.backend.SelectDivproof <> x var
R9849:9855 compcert.lib.Integers Int add def
R9933:9940 compcert.lib.Integers Int shru def
R9945:9952 compcert.lib.Integers Int repr def
R9942:9942 compcert.backend.SelectDivproof <> x var
R9858:9864 compcert.lib.Integers Int shr def
R9894:9901 compcert.lib.Integers Int repr def
R9903:9903 compcert.backend.SelectDivproof <> p var
R9867:9875 compcert.lib.Integers Int mulhs def
R9880:9887 compcert.lib.Integers Int repr def
R9889:9889 compcert.backend.SelectDivproof <> m var
R9877:9877 compcert.backend.SelectDivproof <> x var
R9792:9794 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R9791:9791 compcert.backend.SelectDivproof <> m var
R9795:9810 compcert.lib.Integers Int half_modulus def
R9772:9774 Coq.Init.Logic <> :type_scope:x_'='_x not
R9742:9756 compcert.backend.SelectDiv <> divs_mul_params def
R9759:9768 compcert.lib.Integers Int signed def
R9770:9770 compcert.backend.SelectDivproof <> y var
R9775:9778 Coq.Init.Datatypes <> Some constr
R9779:9779 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9781:9782 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9784:9784 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R9780:9780 compcert.backend.SelectDivproof <> p var
R9783:9783 compcert.backend.SelectDivproof <> m var
R9985:10002 compcert.backend.SelectDivproof <> divs_mul_shift_gen thm
R10091:10099 compcert.lib.Integers Int mulhs def
R10110:10124 compcert.lib.Integers Int signed_repr thm
R10110:10124 compcert.lib.Integers Int signed_repr thm
R10146:10163 compcert.lib.Integers Int min_signed_neg thm
R10173:10186 compcert.lib.Integers Int max_signed def
R10146:10163 compcert.lib.Integers Int min_signed_neg thm
prf 10210:10225 <> divs_mul_shift_2
R10335:10340 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R10325:10328 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10330:10332 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R10329:10329 compcert.backend.SelectDivproof <> p var
R10329:10329 compcert.backend.SelectDivproof <> p var
R10353:10355 Coq.Init.Logic <> :type_scope:x_'='_x not
R10341:10348 compcert.lib.Integers Int divs def
R10352:10352 compcert.backend.SelectDivproof <> y var
R10350:10350 compcert.backend.SelectDivproof <> x var
R10356:10362 compcert.lib.Integers Int add def
R10452:10459 compcert.lib.Integers Int shru def
R10464:10471 compcert.lib.Integers Int repr def
R10461:10461 compcert.backend.SelectDivproof <> x var
R10365:10371 compcert.lib.Integers Int shr def
R10413:10420 compcert.lib.Integers Int repr def
R10422:10422 compcert.backend.SelectDivproof <> p var
R10374:10380 compcert.lib.Integers Int add def
R10409:10409 compcert.backend.SelectDivproof <> x var
R10383:10391 compcert.lib.Integers Int mulhs def
R10396:10403 compcert.lib.Integers Int repr def
R10405:10405 compcert.backend.SelectDivproof <> m var
R10393:10393 compcert.backend.SelectDivproof <> x var
R10298:10301 Coq.ZArith.BinInt <> :Z_scope:x_'>='_x not
R10297:10297 compcert.backend.SelectDivproof <> m var
R10302:10317 compcert.lib.Integers Int half_modulus def
R10278:10280 Coq.Init.Logic <> :type_scope:x_'='_x not
R10248:10262 compcert.backend.SelectDiv <> divs_mul_params def
R10265:10274 compcert.lib.Integers Int signed def
R10276:10276 compcert.backend.SelectDivproof <> y var
R10281:10284 Coq.Init.Datatypes <> Some constr
R10285:10285 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10287:10288 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10290:10290 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10286:10286 compcert.backend.SelectDivproof <> p var
R10289:10289 compcert.backend.SelectDivproof <> m var
R10504:10521 compcert.backend.SelectDivproof <> divs_mul_shift_gen thm
R10628:10641 compcert.lib.Integers Int add_signed thm
R10628:10641 compcert.lib.Integers Int add_signed thm
R10651:10659 compcert.lib.Integers Int mulhs def
R10672:10681 compcert.lib.Integers Int signed def
R10672:10681 compcert.lib.Integers Int signed def
R10703:10710 compcert.lib.Integers Int repr def
R10748:10750 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10734:10736 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R10714:10717 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10733:10733 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10719:10721 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10722:10732 compcert.lib.Integers Int modulus def
R10737:10747 compcert.lib.Integers Int modulus def
R10703:10710 compcert.lib.Integers Int repr def
R10748:10750 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10734:10736 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R10714:10717 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10733:10733 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10719:10721 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10722:10732 compcert.lib.Integers Int modulus def
R10737:10747 compcert.lib.Integers Int modulus def
R10780:10783 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10799:10799 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10785:10787 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10788:10798 compcert.lib.Integers Int modulus def
R10813:10816 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10809:10811 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10817:10817 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10820:10823 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10818:10818 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R10824:10834 compcert.lib.Integers Int modulus def
R10813:10816 Coq.ZArith.BinInt <> :Z_scope:x_'+'_x not
R10809:10811 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10817:10817 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10820:10823 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10818:10818 Coq.ZArith.BinInt <> :Z_scope:'-'_x not
R10824:10834 compcert.lib.Integers Int modulus def
R10780:10783 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10799:10799 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R10785:10787 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R10788:10798 compcert.lib.Integers Int modulus def
R10856:10865 Coq.ZArith.Zdiv <> Z_div_plus thm
R10856:10865 Coq.ZArith.Zdiv <> Z_div_plus thm
R10880:10894 compcert.lib.Integers Int modulus_pos thm
R10880:10894 compcert.lib.Integers Int modulus_pos thm
R10906:10921 compcert.lib.Integers Int eqm_samerepr thm
R10906:10921 compcert.lib.Integers Int eqm_samerepr thm
R10930:10940 compcert.lib.Integers Int eqm_add thm
R10930:10940 compcert.lib.Integers Int eqm_add thm
R10968:10978 compcert.lib.Integers Int eqm_sym thm
R10968:10978 compcert.lib.Integers Int eqm_sym thm
R10988:11000 compcert.lib.Integers Int eqm_trans thm
R10988:11000 compcert.lib.Integers Int eqm_trans thm
R11009:11031 compcert.lib.Integers Int eqm_signed_unsigned thm
R11009:11031 compcert.lib.Integers Int eqm_signed_unsigned thm
R11043:11065 compcert.lib.Integers Int eqm_unsigned_repr_l thm
R11043:11065 compcert.lib.Integers Int eqm_unsigned_repr_l thm
R11074:11086 compcert.lib.Integers Int eqm_refl2 thm
R11074:11086 compcert.lib.Integers Int eqm_refl2 thm
R11118:11135 compcert.lib.Integers Int signed_repr_eq thm
R11118:11135 compcert.lib.Integers Int signed_repr_eq thm
R11146:11155 compcert.lib.Coqlib <> Zmod_small thm
R11146:11155 compcert.lib.Coqlib <> Zmod_small thm
R11181:11189 compcert.lib.Coqlib <> zlt_false thm
R11181:11189 compcert.lib.Coqlib <> zlt_false thm
prf 11213:11226 <> divu_mul_shift
R11311:11316 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R11301:11304 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11306:11308 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11305:11305 compcert.backend.SelectDivproof <> p var
R11305:11305 compcert.backend.SelectDivproof <> p var
R11329:11331 Coq.Init.Logic <> :type_scope:x_'='_x not
R11317:11324 compcert.lib.Integers Int divu def
R11328:11328 compcert.backend.SelectDivproof <> y var
R11326:11326 compcert.backend.SelectDivproof <> x var
R11332:11339 compcert.lib.Integers Int shru def
R11369:11376 compcert.lib.Integers Int repr def
R11378:11378 compcert.backend.SelectDivproof <> p var
R11342:11350 compcert.lib.Integers Int mulhu def
R11355:11362 compcert.lib.Integers Int repr def
R11364:11364 compcert.backend.SelectDivproof <> m var
R11352:11352 compcert.backend.SelectDivproof <> x var
R11281:11283 Coq.Init.Logic <> :type_scope:x_'='_x not
R11249:11263 compcert.backend.SelectDiv <> divu_mul_params def
R11266:11277 compcert.lib.Integers Int unsigned def
R11279:11279 compcert.backend.SelectDivproof <> y var
R11284:11287 Coq.Init.Datatypes <> Some constr
R11288:11288 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11290:11291 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11293:11293 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11289:11289 compcert.backend.SelectDivproof <> p var
R11292:11292 compcert.backend.SelectDivproof <> m var
R11407:11427 compcert.backend.SelectDivproof <> divu_mul_params_sound thm
R11483:11500 compcert.lib.Integers Int shru_div_two_p thm
R11483:11500 compcert.lib.Integers Int shru_div_two_p thm
R11511:11527 compcert.lib.Integers Int unsigned_repr thm
R11511:11527 compcert.lib.Integers Int unsigned_repr thm
R11540:11547 compcert.lib.Integers Int divu def
R11550:11558 compcert.lib.Integers Int mulhu def
R11589:11606 compcert.lib.Integers Int unsigned_range thm
R11589:11606 compcert.lib.Integers Int unsigned_range thm
R11619:11630 Coq.ZArith.Zpower <> two_p_is_exp thm
R11619:11630 Coq.ZArith.Zpower <> two_p_is_exp thm
R11673:11685 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R11653:11661 compcert.lib.Coqlib <> Zdiv_Zdiv thm
R11653:11661 compcert.lib.Coqlib <> Zdiv_Zdiv thm
R11673:11685 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R11673:11685 Coq.ZArith.Zpower <> two_p_gt_ZERO thm
R11716:11732 compcert.lib.Integers Int unsigned_repr thm
R11716:11732 compcert.lib.Integers Int unsigned_repr thm
R11749:11765 compcert.lib.Integers Int unsigned_repr thm
R11749:11765 compcert.lib.Integers Int unsigned_repr thm
R11791:11794 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11827:11829 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11813:11815 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R11809:11811 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R11795:11806 compcert.lib.Integers Int unsigned def
R11816:11826 compcert.lib.Integers Int modulus def
R11813:11815 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R11809:11811 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R11795:11806 compcert.lib.Integers Int unsigned def
R11816:11826 compcert.lib.Integers Int modulus def
R11830:11840 compcert.lib.Integers Int modulus def
R11791:11794 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11827:11829 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R11813:11815 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R11809:11811 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R11795:11806 compcert.lib.Integers Int unsigned def
R11816:11826 compcert.lib.Integers Int modulus def
R11813:11815 Coq.ZArith.BinInt <> :Z_scope:x_'/'_x not
R11809:11811 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R11795:11806 compcert.lib.Integers Int unsigned def
R11816:11826 compcert.lib.Integers Int modulus def
R11830:11840 compcert.lib.Integers Int modulus def
R11853:11868 compcert.lib.Integers Int max_unsigned def
R11886:11900 compcert.lib.Coqlib <> Zdiv_interval_1 thm
R11886:11900 compcert.lib.Coqlib <> Zdiv_interval_1 thm
R11962:11980 Coq.ZArith.BinInt Z mul_nonneg_nonneg thm
R11962:11980 Coq.ZArith.BinInt Z mul_nonneg_nonneg thm
R11995:12012 compcert.lib.Integers Int unsigned_range thm
R11995:12012 compcert.lib.Integers Int unsigned_range thm
R12071:12073 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R12060:12070 compcert.lib.Integers Int modulus def
R12041:12052 Coq.ZArith.Zorder <> Zle_lt_trans syndef
R12071:12073 Coq.ZArith.BinInt <> :Z_scope:x_'*'_x not
R12060:12070 compcert.lib.Integers Int modulus def
R12041:12052 Coq.ZArith.Zorder <> Zle_lt_trans syndef
R12086:12102 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R12086:12102 Coq.ZArith.Zorder <> Zmult_le_compat_r thm
R12117:12134 compcert.lib.Integers Int unsigned_range thm
R12117:12134 compcert.lib.Integers Int unsigned_range thm
R12163:12179 Coq.ZArith.Zorder <> Zmult_lt_compat_l thm
R12163:12179 Coq.ZArith.Zorder <> Zmult_lt_compat_l thm
R12214:12229 compcert.lib.Integers Int max_unsigned def
R12251:12253 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R12254:12269 compcert.lib.Integers Int max_unsigned def
R12251:12253 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R12254:12269 compcert.lib.Integers Int max_unsigned def
sec 12386:12394 <> CMCONSTRS
var 12407:12408 CMCONSTRS ge
R12411:12414 compcert.backend.CminorSel <> genv def
var 12426:12427 CMCONSTRS sp
R12430:12432 compcert.common.Values <> val ind
var 12444:12444 CMCONSTRS e
R12447:12449 compcert.backend.Cminor <> env def
var 12461:12461 CMCONSTRS m
R12464:12466 compcert.common.Memory <> mem syndef
prf 12476:12488 <> eval_divu_mul
R12601:12609 compcert.backend.CminorSel <> eval_expr ind
R12640:12643 compcert.common.Values <> Vint constr
R12646:12653 compcert.lib.Integers Int divu def
R12657:12657 compcert.backend.SelectDivproof <> y var
R12655:12655 compcert.backend.SelectDivproof <> x var
R12625:12632 compcert.backend.SelectDiv <> divu_mul def
R12636:12636 compcert.backend.SelectDivproof <> M var
R12634:12634 compcert.backend.SelectDivproof <> p var
R12621:12622 compcert.backend.SelectDivproof <> le var
R12619:12619 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R12617:12617 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R12614:12615 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R12611:12612 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R12579:12581 Coq.Init.Logic <> :type_scope:x_'='_x not
R12565:12573 Coq.Lists.List <> nth_error def
R12578:12578 Coq.Init.Datatypes <> O constr
R12575:12576 compcert.backend.SelectDivproof <> le var
R12582:12585 Coq.Init.Datatypes <> Some constr
R12588:12591 compcert.common.Values <> Vint constr
R12593:12593 compcert.backend.SelectDivproof <> x var
R12546:12548 Coq.Init.Logic <> :type_scope:x_'='_x not
R12514:12528 compcert.backend.SelectDiv <> divu_mul_params def
R12531:12542 compcert.lib.Integers Int unsigned def
R12544:12544 compcert.backend.SelectDivproof <> y var
R12549:12552 Coq.Init.Datatypes <> Some constr
R12553:12553 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12555:12556 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12558:12558 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12554:12554 compcert.backend.SelectDivproof <> p var
R12557:12557 compcert.backend.SelectDivproof <> M var
R12686:12693 compcert.backend.SelectDiv <> divu_mul def
R12705:12718 compcert.backend.SelectDivproof <> divu_mul_shift thm
R12705:12718 compcert.backend.SelectDivproof <> divu_mul_shift thm
R12755:12763 compcert.backend.CminorSel <> eval_expr ind
R12873:12876 compcert.common.Values <> Vint constr
R12879:12887 compcert.lib.Integers Int mulhu def
R12892:12899 compcert.lib.Integers Int repr def
R12790:12792 compcert.backend.CminorSel <> Eop constr
R12811:12815 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R12802:12808 compcert.backend.CminorSel <> Eletvar constr
R12849:12853 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R12816:12818 compcert.backend.CminorSel <> Eop constr
R12845:12848 compcert.backend.CminorSel <> Enil constr
R12821:12829 compcert.ia32.Op <> Ointconst constr
R12832:12839 compcert.lib.Integers Int repr def
R12854:12857 compcert.backend.CminorSel <> Enil constr
R12794:12799 compcert.ia32.Op <> Omulhu constr
R12773:12773 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R12771:12771 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R12768:12769 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R12765:12766 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R12755:12763 compcert.backend.CminorSel <> eval_expr ind
R12873:12876 compcert.common.Values <> Vint constr
R12879:12887 compcert.lib.Integers Int mulhu def
R12892:12899 compcert.lib.Integers Int repr def
R12790:12792 compcert.backend.CminorSel <> Eop constr
R12811:12815 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R12802:12808 compcert.backend.CminorSel <> Eletvar constr
R12849:12853 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R12816:12818 compcert.backend.CminorSel <> Eop constr
R12845:12848 compcert.backend.CminorSel <> Enil constr
R12821:12829 compcert.ia32.Op <> Ointconst constr
R12832:12839 compcert.lib.Integers Int repr def
R12854:12857 compcert.backend.CminorSel <> Enil constr
R12794:12799 compcert.ia32.Op <> Omulhu constr
R12773:12773 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R12771:12771 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R12768:12769 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R12765:12766 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R13032:13043 compcert.ia32.SelectOpproof <> eval_shruimm thm
R13075:13082 compcert.lib.Integers Int repr def
R13133:13139 compcert.lib.Integers Int ltu def
R13154:13166 compcert.lib.Integers Int iwordsize def
R13142:13149 compcert.lib.Integers Int repr def
R13174:13177 Coq.Init.Datatypes <> true constr
R13174:13177 Coq.Init.Datatypes <> true constr
R13133:13139 compcert.lib.Integers Int ltu def
R13154:13166 compcert.lib.Integers Int iwordsize def
R13142:13149 compcert.lib.Integers Int repr def
R13222:13228 compcert.lib.Integers Int ltu def
R13239:13255 compcert.lib.Integers Int unsigned_repr thm
R13239:13255 compcert.lib.Integers Int unsigned_repr thm
R13266:13273 compcert.lib.Coqlib <> zlt_true thm
R13266:13273 compcert.lib.Coqlib <> zlt_true thm
R0:-1 compcert.backend.SelectDivproof <> y var
R13301:13303 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R13304:13319 compcert.lib.Integers Int max_unsigned def
R13301:13303 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R13304:13319 compcert.lib.Integers Int max_unsigned def
prf 13363:13374 <> eval_divuimm
R13470:13476 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13478:13479 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13520:13523 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13480:13488 compcert.backend.CminorSel <> eval_expr ind
R13519:13519 compcert.backend.SelectDivproof <> v var
R13504:13510 compcert.backend.SelectDiv <> divuimm def
R13515:13516 compcert.backend.SelectDivproof <> n2 var
R13512:13513 compcert.backend.SelectDivproof <> e1 var
R13500:13501 compcert.backend.SelectDivproof <> le var
R13498:13498 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R13496:13496 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R13493:13494 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R13490:13491 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R13524:13534 compcert.common.Values Val lessdef ind
R13538:13538 compcert.backend.SelectDivproof <> v var
R13536:13536 compcert.backend.SelectDivproof <> z var
R13455:13457 Coq.Init.Logic <> :type_scope:x_'='_x not
R13435:13442 compcert.common.Values Val divu def
R13447:13450 compcert.common.Values <> Vint constr
R13452:13453 compcert.backend.SelectDivproof <> n2 var
R13444:13444 compcert.backend.SelectDivproof <> x var
R13458:13461 Coq.Init.Datatypes <> Some constr
R13463:13463 compcert.backend.SelectDivproof <> z var
R13402:13410 compcert.backend.CminorSel <> eval_expr ind
R13428:13428 compcert.backend.SelectDivproof <> x var
R13425:13426 compcert.backend.SelectDivproof <> e1 var
R13422:13423 compcert.backend.SelectDivproof <> le var
R13420:13420 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R13418:13418 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R13415:13416 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R13412:13413 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R13557:13563 compcert.backend.SelectDiv <> divuimm def
R13659:13664 compcert.lib.Integers Int eq def
R13669:13676 compcert.lib.Integers Int zero def
R13659:13664 compcert.lib.Integers Int eq def
R13669:13676 compcert.lib.Integers Int zero def
R13709:13721 compcert.lib.Integers Int is_power2 def
R13709:13721 compcert.lib.Integers Int is_power2 def
R13756:13768 compcert.lib.Integers Int divu_pow2 thm
R13756:13768 compcert.lib.Integers Int divu_pow2 thm
R13792:13795 compcert.common.Values <> Vint constr
R13798:13805 compcert.lib.Integers Int shru def
R13819:13826 compcert.common.Values Val shru def
R13838:13841 compcert.common.Values <> Vint constr
R13829:13832 compcert.common.Values <> Vint constr
R13819:13826 compcert.common.Values Val shru def
R13838:13841 compcert.common.Values <> Vint constr
R13829:13832 compcert.common.Values <> Vint constr
R13792:13795 compcert.common.Values <> Vint constr
R13798:13805 compcert.lib.Integers Int shru def
R13857:13868 compcert.ia32.SelectOpproof <> eval_shruimm thm
R13857:13868 compcert.ia32.SelectOpproof <> eval_shruimm thm
R13895:13913 compcert.lib.Integers Int is_power2_range thm
R13895:13913 compcert.lib.Integers Int is_power2_range thm
R13936:13958 compcert.driver.Compopts <> optim_for_size defax
R13960:13961 Coq.Init.Datatypes <> tt constr
R13936:13958 compcert.driver.Compopts <> optim_for_size defax
R13960:13961 Coq.Init.Datatypes <> tt constr
R13976:13989 compcert.ia32.SelectOpproof <> eval_divu_base thm
R13976:13989 compcert.ia32.SelectOpproof <> eval_divu_base thm
R14021:14035 compcert.backend.SelectDiv <> divu_mul_params def
R14038:14049 compcert.lib.Integers Int unsigned def
R14021:14035 compcert.backend.SelectDiv <> divu_mul_params def
R14038:14049 compcert.lib.Integers Int unsigned def
R14096:14099 compcert.common.Values <> Vint constr
R14102:14109 compcert.lib.Integers Int divu def
R14096:14099 compcert.common.Values <> Vint constr
R14102:14109 compcert.lib.Integers Int divu def
R14166:14178 compcert.backend.SelectDivproof <> eval_divu_mul thm
R14166:14178 compcert.backend.SelectDivproof <> eval_divu_mul thm
R14202:14215 compcert.ia32.SelectOpproof <> eval_divu_base thm
R14202:14215 compcert.ia32.SelectOpproof <> eval_divu_base thm
prf 14247:14255 <> eval_divu
R14374:14380 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R14382:14383 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R14419:14422 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R14384:14392 compcert.backend.CminorSel <> eval_expr ind
R14418:14418 compcert.backend.SelectDivproof <> v var
R14408:14411 compcert.backend.SelectDiv <> divu def
R14415:14415 compcert.backend.SelectDivproof <> b var
R14413:14413 compcert.backend.SelectDivproof <> a var
R14404:14405 compcert.backend.SelectDivproof <> le var
R14402:14402 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R14400:14400 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R14397:14398 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R14394:14395 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R14423:14433 compcert.common.Values Val lessdef ind
R14437:14437 compcert.backend.SelectDivproof <> v var
R14435:14435 compcert.backend.SelectDivproof <> z var
R14359:14361 Coq.Init.Logic <> :type_scope:x_'='_x not
R14347:14354 compcert.common.Values Val divu def
R14358:14358 compcert.backend.SelectDivproof <> y var
R14356:14356 compcert.backend.SelectDivproof <> x var
R14362:14365 Coq.Init.Datatypes <> Some constr
R14367:14367 compcert.backend.SelectDivproof <> z var
R14315:14323 compcert.backend.CminorSel <> eval_expr ind
R14340:14340 compcert.backend.SelectDivproof <> y var
R14338:14338 compcert.backend.SelectDivproof <> b var
R14335:14336 compcert.backend.SelectDivproof <> le var
R14333:14333 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R14331:14331 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R14328:14329 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R14325:14326 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R14283:14291 compcert.backend.CminorSel <> eval_expr ind
R14308:14308 compcert.backend.SelectDivproof <> x var
R14306:14306 compcert.backend.SelectDivproof <> a var
R14303:14304 compcert.backend.SelectDivproof <> le var
R14301:14301 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R14299:14299 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R14296:14297 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R14293:14294 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R14456:14459 compcert.backend.SelectDiv <> divu def
R14488:14497 compcert.backend.SelectDiv <> divu_match def
R14488:14497 compcert.backend.SelectDiv <> divu_match def
R14557:14568 compcert.backend.SelectDivproof <> eval_divuimm thm
R14557:14568 compcert.backend.SelectDivproof <> eval_divuimm thm
R14587:14600 compcert.ia32.SelectOpproof <> eval_divu_base thm
R14587:14600 compcert.ia32.SelectOpproof <> eval_divu_base thm
prf 14623:14639 <> eval_mod_from_div
R14740:14748 compcert.backend.CminorSel <> eval_expr ind
R14783:14786 compcert.common.Values <> Vint constr
R14789:14795 compcert.lib.Integers Int sub def
R14800:14806 compcert.lib.Integers Int mul def
R14810:14810 compcert.backend.SelectDivproof <> n var
R14808:14808 compcert.backend.SelectDivproof <> y var
R14797:14797 compcert.backend.SelectDivproof <> x var
R14764:14775 compcert.backend.SelectDiv <> mod_from_div def
R14779:14779 compcert.backend.SelectDivproof <> n var
R14777:14777 compcert.backend.SelectDivproof <> a var
R14760:14761 compcert.backend.SelectDivproof <> le var
R14758:14758 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R14756:14756 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R14753:14754 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R14750:14751 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R14718:14720 Coq.Init.Logic <> :type_scope:x_'='_x not
R14704:14712 Coq.Lists.List <> nth_error def
R14717:14717 Coq.Init.Datatypes <> O constr
R14714:14715 compcert.backend.SelectDivproof <> le var
R14721:14724 Coq.Init.Datatypes <> Some constr
R14727:14730 compcert.common.Values <> Vint constr
R14732:14732 compcert.backend.SelectDivproof <> x var
R14665:14673 compcert.backend.CminorSel <> eval_expr ind
R14691:14694 compcert.common.Values <> Vint constr
R14696:14696 compcert.backend.SelectDivproof <> y var
R14688:14688 compcert.backend.SelectDivproof <> a var
R14685:14686 compcert.backend.SelectDivproof <> le var
R14683:14683 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R14681:14681 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R14678:14679 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R14675:14676 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R14832:14843 compcert.backend.SelectDiv <> mod_from_div def
R14865:14875 compcert.ia32.SelectOpproof <> eval_mulimm thm
prf 14969:14980 <> eval_moduimm
R15076:15082 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15084:15085 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R15126:15129 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R15086:15094 compcert.backend.CminorSel <> eval_expr ind
R15125:15125 compcert.backend.SelectDivproof <> v var
R15110:15116 compcert.backend.SelectDiv <> moduimm def
R15121:15122 compcert.backend.SelectDivproof <> n2 var
R15118:15119 compcert.backend.SelectDivproof <> e1 var
R15106:15107 compcert.backend.SelectDivproof <> le var
R15104:15104 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R15102:15102 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R15099:15100 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R15096:15097 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R15130:15140 compcert.common.Values Val lessdef ind
R15144:15144 compcert.backend.SelectDivproof <> v var
R15142:15142 compcert.backend.SelectDivproof <> z var
R15061:15063 Coq.Init.Logic <> :type_scope:x_'='_x not
R15041:15048 compcert.common.Values Val modu def
R15053:15056 compcert.common.Values <> Vint constr
R15058:15059 compcert.backend.SelectDivproof <> n2 var
R15050:15050 compcert.backend.SelectDivproof <> x var
R15064:15067 Coq.Init.Datatypes <> Some constr
R15069:15069 compcert.backend.SelectDivproof <> z var
R15008:15016 compcert.backend.CminorSel <> eval_expr ind
R15034:15034 compcert.backend.SelectDivproof <> x var
R15031:15032 compcert.backend.SelectDivproof <> e1 var
R15028:15029 compcert.backend.SelectDivproof <> le var
R15026:15026 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R15024:15024 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R15021:15022 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R15018:15019 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R15163:15169 compcert.backend.SelectDiv <> moduimm def
R15265:15270 compcert.lib.Integers Int eq def
R15275:15282 compcert.lib.Integers Int zero def
R15265:15270 compcert.lib.Integers Int eq def
R15275:15282 compcert.lib.Integers Int zero def
R15315:15327 compcert.lib.Integers Int is_power2 def
R15315:15327 compcert.lib.Integers Int is_power2 def
R15362:15373 compcert.lib.Integers Int modu_and thm
R15362:15373 compcert.lib.Integers Int modu_and thm
R15444:15450 compcert.common.Values Val and def
R15462:15465 compcert.common.Values <> Vint constr
R15468:15474 compcert.lib.Integers Int sub def
R15479:15485 compcert.lib.Integers Int one def
R15453:15456 compcert.common.Values <> Vint constr
R15395:15398 compcert.common.Values <> Vint constr
R15401:15407 compcert.lib.Integers Int and def
R15412:15418 compcert.lib.Integers Int sub def
R15423:15429 compcert.lib.Integers Int one def
R15395:15398 compcert.common.Values <> Vint constr
R15401:15407 compcert.lib.Integers Int and def
R15412:15418 compcert.lib.Integers Int sub def
R15423:15429 compcert.lib.Integers Int one def
R15444:15450 compcert.common.Values Val and def
R15462:15465 compcert.common.Values <> Vint constr
R15468:15474 compcert.lib.Integers Int sub def
R15479:15485 compcert.lib.Integers Int one def
R15453:15456 compcert.common.Values <> Vint constr
R15499:15509 compcert.ia32.SelectOpproof <> eval_andimm thm
R15499:15509 compcert.ia32.SelectOpproof <> eval_andimm thm
R15530:15552 compcert.driver.Compopts <> optim_for_size defax
R15554:15555 Coq.Init.Datatypes <> tt constr
R15530:15552 compcert.driver.Compopts <> optim_for_size defax
R15554:15555 Coq.Init.Datatypes <> tt constr
R15570:15583 compcert.ia32.SelectOpproof <> eval_modu_base thm
R15570:15583 compcert.ia32.SelectOpproof <> eval_modu_base thm
R15615:15629 compcert.backend.SelectDiv <> divu_mul_params def
R15632:15643 compcert.lib.Integers Int unsigned def
R15615:15629 compcert.backend.SelectDiv <> divu_mul_params def
R15632:15643 compcert.lib.Integers Int unsigned def
R15738:15754 compcert.backend.SelectDivproof <> eval_mod_from_div thm
R15738:15754 compcert.backend.SelectDivproof <> eval_mod_from_div thm
R15771:15783 compcert.backend.SelectDivproof <> eval_divu_mul thm
R15771:15783 compcert.backend.SelectDivproof <> eval_divu_mul thm
R15836:15848 compcert.lib.Integers Int modu_divu thm
R15836:15848 compcert.lib.Integers Int modu_divu thm
R15914:15927 compcert.ia32.SelectOpproof <> eval_modu_base thm
R15914:15927 compcert.ia32.SelectOpproof <> eval_modu_base thm
prf 15959:15967 <> eval_modu
R16086:16092 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16094:16095 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R16131:16134 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R16096:16104 compcert.backend.CminorSel <> eval_expr ind
R16130:16130 compcert.backend.SelectDivproof <> v var
R16120:16123 compcert.backend.SelectDiv <> modu def
R16127:16127 compcert.backend.SelectDivproof <> b var
R16125:16125 compcert.backend.SelectDivproof <> a var
R16116:16117 compcert.backend.SelectDivproof <> le var
R16114:16114 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16112:16112 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16109:16110 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16106:16107 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R16135:16145 compcert.common.Values Val lessdef ind
R16149:16149 compcert.backend.SelectDivproof <> v var
R16147:16147 compcert.backend.SelectDivproof <> z var
R16071:16073 Coq.Init.Logic <> :type_scope:x_'='_x not
R16059:16066 compcert.common.Values Val modu def
R16070:16070 compcert.backend.SelectDivproof <> y var
R16068:16068 compcert.backend.SelectDivproof <> x var
R16074:16077 Coq.Init.Datatypes <> Some constr
R16079:16079 compcert.backend.SelectDivproof <> z var
R16027:16035 compcert.backend.CminorSel <> eval_expr ind
R16052:16052 compcert.backend.SelectDivproof <> y var
R16050:16050 compcert.backend.SelectDivproof <> b var
R16047:16048 compcert.backend.SelectDivproof <> le var
R16045:16045 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16043:16043 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16040:16041 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16037:16038 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R15995:16003 compcert.backend.CminorSel <> eval_expr ind
R16020:16020 compcert.backend.SelectDivproof <> x var
R16018:16018 compcert.backend.SelectDivproof <> a var
R16015:16016 compcert.backend.SelectDivproof <> le var
R16013:16013 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16011:16011 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16008:16009 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16005:16006 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R16168:16171 compcert.backend.SelectDiv <> modu def
R16200:16209 compcert.backend.SelectDiv <> modu_match def
R16200:16209 compcert.backend.SelectDiv <> modu_match def
R16269:16280 compcert.backend.SelectDivproof <> eval_moduimm thm
R16269:16280 compcert.backend.SelectDivproof <> eval_moduimm thm
R16299:16312 compcert.ia32.SelectOpproof <> eval_modu_base thm
R16299:16312 compcert.ia32.SelectOpproof <> eval_modu_base thm
prf 16335:16347 <> eval_divs_mul
R16458:16466 compcert.backend.CminorSel <> eval_expr ind
R16497:16500 compcert.common.Values <> Vint constr
R16503:16510 compcert.lib.Integers Int divs def
R16514:16514 compcert.backend.SelectDivproof <> y var
R16512:16512 compcert.backend.SelectDivproof <> x var
R16482:16489 compcert.backend.SelectDiv <> divs_mul def
R16493:16493 compcert.backend.SelectDivproof <> M var
R16491:16491 compcert.backend.SelectDivproof <> p var
R16478:16479 compcert.backend.SelectDivproof <> le var
R16476:16476 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16474:16474 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16471:16472 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16468:16469 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R16436:16438 Coq.Init.Logic <> :type_scope:x_'='_x not
R16422:16430 Coq.Lists.List <> nth_error def
R16435:16435 Coq.Init.Datatypes <> O constr
R16432:16433 compcert.backend.SelectDivproof <> le var
R16439:16442 Coq.Init.Datatypes <> Some constr
R16445:16448 compcert.common.Values <> Vint constr
R16450:16450 compcert.backend.SelectDivproof <> x var
R16403:16405 Coq.Init.Logic <> :type_scope:x_'='_x not
R16373:16387 compcert.backend.SelectDiv <> divs_mul_params def
R16390:16399 compcert.lib.Integers Int signed def
R16401:16401 compcert.backend.SelectDivproof <> y var
R16406:16409 Coq.Init.Datatypes <> Some constr
R16410:16410 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16412:16413 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16415:16415 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R16411:16411 compcert.backend.SelectDivproof <> p var
R16414:16414 compcert.backend.SelectDivproof <> M var
R16543:16550 compcert.backend.SelectDiv <> divs_mul def
R16566:16574 compcert.backend.CminorSel <> eval_expr ind
R16602:16605 compcert.common.Values <> Vint constr
R16590:16596 compcert.backend.CminorSel <> Eletvar constr
R16598:16598 Coq.Init.Datatypes <> O constr
R16584:16584 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16582:16582 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16579:16580 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16576:16577 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R16566:16574 compcert.backend.CminorSel <> eval_expr ind
R16602:16605 compcert.common.Values <> Vint constr
R16590:16596 compcert.backend.CminorSel <> Eletvar constr
R16598:16598 Coq.Init.Datatypes <> O constr
R16584:16584 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16582:16582 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16579:16580 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16576:16577 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R16650:16658 compcert.backend.CminorSel <> eval_expr ind
R16768:16771 compcert.common.Values <> Vint constr
R16774:16782 compcert.lib.Integers Int mulhs def
R16787:16794 compcert.lib.Integers Int repr def
R16685:16687 compcert.backend.CminorSel <> Eop constr
R16706:16710 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R16697:16703 compcert.backend.CminorSel <> Eletvar constr
R16744:16748 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R16711:16713 compcert.backend.CminorSel <> Eop constr
R16740:16743 compcert.backend.CminorSel <> Enil constr
R16716:16724 compcert.ia32.Op <> Ointconst constr
R16727:16734 compcert.lib.Integers Int repr def
R16749:16752 compcert.backend.CminorSel <> Enil constr
R16689:16694 compcert.ia32.Op <> Omulhs constr
R16668:16668 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16666:16666 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16663:16664 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16660:16661 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R16650:16658 compcert.backend.CminorSel <> eval_expr ind
R16768:16771 compcert.common.Values <> Vint constr
R16774:16782 compcert.lib.Integers Int mulhs def
R16787:16794 compcert.lib.Integers Int repr def
R16685:16687 compcert.backend.CminorSel <> Eop constr
R16706:16710 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R16697:16703 compcert.backend.CminorSel <> Eletvar constr
R16744:16748 compcert.backend.CminorSel <> :cminorsel_scope:x_':::'_x not
R16711:16713 compcert.backend.CminorSel <> Eop constr
R16740:16743 compcert.backend.CminorSel <> Enil constr
R16716:16724 compcert.ia32.Op <> Ointconst constr
R16727:16734 compcert.lib.Integers Int repr def
R16749:16752 compcert.backend.CminorSel <> Enil constr
R16689:16694 compcert.ia32.Op <> Omulhs constr
R16668:16668 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R16666:16666 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R16663:16664 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R16660:16661 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R16913:16924 compcert.ia32.SelectOpproof <> eval_shruimm thm
R16955:16962 compcert.lib.Integers Int repr def
R16978:16980 Coq.ZArith.BinInt <> :Z_scope:x_'-'_x not
R16965:16977 compcert.lib.Integers Int zwordsize def
R17075:17078 Coq.Init.Datatypes <> true constr
R17033:17039 compcert.lib.Integers Int ltu def
R17055:17067 compcert.lib.Integers Int iwordsize def
R17042:17049 compcert.lib.Integers Int repr def
R17033:17039 compcert.lib.Integers Int ltu def
R17055:17067 compcert.lib.Integers Int iwordsize def
R17042:17049 compcert.lib.Integers Int repr def
R17075:17078 Coq.Init.Datatypes <> true constr
R17178:17180 Coq.Init.Logic <> :type_scope:x_'='_x not
R17144:17150 compcert.lib.Integers Int ltu def
R17165:17177 compcert.lib.Integers Int iwordsize def
R17153:17160 compcert.lib.Integers Int repr def
R17181:17184 Coq.Init.Datatypes <> true constr
R17130:17133 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17135:17137 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17178:17180 Coq.Init.Logic <> :type_scope:x_'='_x not
R17144:17150 compcert.lib.Integers Int ltu def
R17165:17177 compcert.lib.Integers Int iwordsize def
R17153:17160 compcert.lib.Integers Int repr def
R17181:17184 Coq.Init.Datatypes <> true constr
R17130:17133 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17135:17137 Coq.ZArith.BinInt <> :Z_scope:x_'<='_x_'<'_x not
R17207:17213 compcert.lib.Integers Int ltu def
R17224:17240 compcert.lib.Integers Int unsigned_repr thm
R17224:17240 compcert.lib.Integers Int unsigned_repr thm
R17251:17258 compcert.lib.Coqlib <> zlt_true thm
R17251:17258 compcert.lib.Coqlib <> zlt_true thm
R0:-1 compcert.backend.SelectDivproof <> y var
R17290:17292 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R17293:17308 compcert.lib.Integers Int max_unsigned def
R17290:17292 Coq.ZArith.BinInt <> :Z_scope:x_'<'_x not
R17293:17308 compcert.lib.Integers Int max_unsigned def
R17352:17354 compcert.lib.Coqlib <> zlt def
R17358:17373 compcert.lib.Integers Int half_modulus def
R17352:17354 compcert.lib.Coqlib <> zlt def
R17358:17373 compcert.lib.Integers Int half_modulus def
R17388:17403 compcert.backend.SelectDivproof <> divs_mul_shift_1 thm
R17388:17403 compcert.backend.SelectDivproof <> divs_mul_shift_1 thm
R17440:17450 compcert.ia32.SelectOpproof <> eval_shrimm thm
R17481:17488 compcert.lib.Integers Int repr def
R17576:17583 compcert.ia32.SelectOpproof <> eval_add thm
R17683:17698 compcert.backend.SelectDivproof <> divs_mul_shift_2 thm
R17683:17698 compcert.backend.SelectDivproof <> divs_mul_shift_2 thm
R17735:17742 compcert.ia32.SelectOpproof <> eval_add thm
R17820:17830 compcert.ia32.SelectOpproof <> eval_shrimm thm
R17861:17868 compcert.lib.Integers Int repr def
R17956:17963 compcert.ia32.SelectOpproof <> eval_add thm
prf 18066:18077 <> eval_divsimm
R18173:18179 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R18181:18182 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R18223:18226 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R18183:18191 compcert.backend.CminorSel <> eval_expr ind
R18222:18222 compcert.backend.SelectDivproof <> v var
R18207:18213 compcert.backend.SelectDiv <> divsimm def
R18218:18219 compcert.backend.SelectDivproof <> n2 var
R18215:18216 compcert.backend.SelectDivproof <> e1 var
R18203:18204 compcert.backend.SelectDivproof <> le var
R18201:18201 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R18199:18199 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R18196:18197 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R18193:18194 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R18227:18237 compcert.common.Values Val lessdef ind
R18241:18241 compcert.backend.SelectDivproof <> v var
R18239:18239 compcert.backend.SelectDivproof <> z var
R18158:18160 Coq.Init.Logic <> :type_scope:x_'='_x not
R18138:18145 compcert.common.Values Val divs def
R18150:18153 compcert.common.Values <> Vint constr
R18155:18156 compcert.backend.SelectDivproof <> n2 var
R18147:18147 compcert.backend.SelectDivproof <> x var
R18161:18164 Coq.Init.Datatypes <> Some constr
R18166:18166 compcert.backend.SelectDivproof <> z var
R18105:18113 compcert.backend.CminorSel <> eval_expr ind
R18131:18131 compcert.backend.SelectDivproof <> x var
R18128:18129 compcert.backend.SelectDivproof <> e1 var
R18125:18126 compcert.backend.SelectDivproof <> le var
R18123:18123 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R18121:18121 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R18118:18119 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R18115:18116 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R18260:18266 compcert.backend.SelectDiv <> divsimm def
R18380:18395 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R18362:18367 compcert.lib.Integers Int eq def
R18372:18379 compcert.lib.Integers Int zero def
R18430:18433 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R18396:18401 compcert.lib.Integers Int eq def
R18406:18413 compcert.lib.Integers Int repr def
R18415:18428 compcert.lib.Integers Int min_signed def
R18434:18439 compcert.lib.Integers Int eq def
R18444:18451 compcert.lib.Integers Int mone def
R18380:18395 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R18362:18367 compcert.lib.Integers Int eq def
R18372:18379 compcert.lib.Integers Int zero def
R18430:18433 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R18396:18401 compcert.lib.Integers Int eq def
R18406:18413 compcert.lib.Integers Int repr def
R18415:18428 compcert.lib.Integers Int min_signed def
R18434:18439 compcert.lib.Integers Int eq def
R18444:18451 compcert.lib.Integers Int mone def
R18484:18496 compcert.lib.Integers Int is_power2 def
R18484:18496 compcert.lib.Integers Int is_power2 def
R18532:18538 compcert.lib.Integers Int ltu def
R18543:18550 compcert.lib.Integers Int repr def
R18532:18538 compcert.lib.Integers Int ltu def
R18543:18550 compcert.lib.Integers Int repr def
R18578:18589 compcert.ia32.SelectOpproof <> eval_shrximm thm
R18578:18589 compcert.ia32.SelectOpproof <> eval_shrximm thm
R18606:18618 compcert.common.Values Val divs_pow2 thm
R18606:18618 compcert.common.Values Val divs_pow2 thm
R18639:18652 compcert.ia32.SelectOpproof <> eval_divs_base thm
R18639:18652 compcert.ia32.SelectOpproof <> eval_divs_base thm
R18682:18704 compcert.driver.Compopts <> optim_for_size defax
R18706:18707 Coq.Init.Datatypes <> tt constr
R18682:18704 compcert.driver.Compopts <> optim_for_size defax
R18706:18707 Coq.Init.Datatypes <> tt constr
R18722:18735 compcert.ia32.SelectOpproof <> eval_divs_base thm
R18722:18735 compcert.ia32.SelectOpproof <> eval_divs_base thm
R18767:18781 compcert.backend.SelectDiv <> divs_mul_params def
R18784:18793 compcert.lib.Integers Int signed def
R18767:18781 compcert.backend.SelectDiv <> divs_mul_params def
R18784:18793 compcert.lib.Integers Int signed def
R18840:18843 compcert.common.Values <> Vint constr
R18846:18853 compcert.lib.Integers Int divs def
R18840:18843 compcert.common.Values <> Vint constr
R18846:18853 compcert.lib.Integers Int divs def
R18910:18922 compcert.backend.SelectDivproof <> eval_divs_mul thm
R18910:18922 compcert.backend.SelectDivproof <> eval_divs_mul thm
R18946:18959 compcert.ia32.SelectOpproof <> eval_divs_base thm
R18946:18959 compcert.ia32.SelectOpproof <> eval_divs_base thm
prf 18991:18999 <> eval_divs
R19118:19124 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R19126:19127 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R19163:19166 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19128:19136 compcert.backend.CminorSel <> eval_expr ind
R19162:19162 compcert.backend.SelectDivproof <> v var
R19152:19155 compcert.backend.SelectDiv <> divs def
R19159:19159 compcert.backend.SelectDivproof <> b var
R19157:19157 compcert.backend.SelectDivproof <> a var
R19148:19149 compcert.backend.SelectDivproof <> le var
R19146:19146 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R19144:19144 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R19141:19142 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R19138:19139 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R19167:19177 compcert.common.Values Val lessdef ind
R19181:19181 compcert.backend.SelectDivproof <> v var
R19179:19179 compcert.backend.SelectDivproof <> z var
R19103:19105 Coq.Init.Logic <> :type_scope:x_'='_x not
R19091:19098 compcert.common.Values Val divs def
R19102:19102 compcert.backend.SelectDivproof <> y var
R19100:19100 compcert.backend.SelectDivproof <> x var
R19106:19109 Coq.Init.Datatypes <> Some constr
R19111:19111 compcert.backend.SelectDivproof <> z var
R19059:19067 compcert.backend.CminorSel <> eval_expr ind
R19084:19084 compcert.backend.SelectDivproof <> y var
R19082:19082 compcert.backend.SelectDivproof <> b var
R19079:19080 compcert.backend.SelectDivproof <> le var
R19077:19077 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R19075:19075 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R19072:19073 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R19069:19070 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R19027:19035 compcert.backend.CminorSel <> eval_expr ind
R19052:19052 compcert.backend.SelectDivproof <> x var
R19050:19050 compcert.backend.SelectDivproof <> a var
R19047:19048 compcert.backend.SelectDivproof <> le var
R19045:19045 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R19043:19043 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R19040:19041 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R19037:19038 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R19200:19203 compcert.backend.SelectDiv <> divs def
R19232:19241 compcert.backend.SelectDiv <> divs_match def
R19232:19241 compcert.backend.SelectDiv <> divs_match def
R19301:19312 compcert.backend.SelectDivproof <> eval_divsimm thm
R19301:19312 compcert.backend.SelectDivproof <> eval_divsimm thm
R19331:19344 compcert.ia32.SelectOpproof <> eval_divs_base thm
R19331:19344 compcert.ia32.SelectOpproof <> eval_divs_base thm
prf 19369:19380 <> eval_modsimm
R19476:19482 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R19484:19485 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R19526:19529 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R19486:19494 compcert.backend.CminorSel <> eval_expr ind
R19525:19525 compcert.backend.SelectDivproof <> v var
R19510:19516 compcert.backend.SelectDiv <> modsimm def
R19521:19522 compcert.backend.SelectDivproof <> n2 var
R19518:19519 compcert.backend.SelectDivproof <> e1 var
R19506:19507 compcert.backend.SelectDivproof <> le var
R19504:19504 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R19502:19502 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R19499:19500 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R19496:19497 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R19530:19540 compcert.common.Values Val lessdef ind
R19544:19544 compcert.backend.SelectDivproof <> v var
R19542:19542 compcert.backend.SelectDivproof <> z var
R19461:19463 Coq.Init.Logic <> :type_scope:x_'='_x not
R19441:19448 compcert.common.Values Val mods def
R19453:19456 compcert.common.Values <> Vint constr
R19458:19459 compcert.backend.SelectDivproof <> n2 var
R19450:19450 compcert.backend.SelectDivproof <> x var
R19464:19467 Coq.Init.Datatypes <> Some constr
R19469:19469 compcert.backend.SelectDivproof <> z var
R19408:19416 compcert.backend.CminorSel <> eval_expr ind
R19434:19434 compcert.backend.SelectDivproof <> x var
R19431:19432 compcert.backend.SelectDivproof <> e1 var
R19428:19429 compcert.backend.SelectDivproof <> le var
R19426:19426 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R19424:19424 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R19421:19422 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R19418:19419 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R19563:19569 compcert.backend.SelectDiv <> modsimm def
R19591:19603 compcert.common.Values Val mods_divs thm
R19735:19750 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R19717:19722 compcert.lib.Integers Int eq def
R19727:19734 compcert.lib.Integers Int zero def
R19785:19788 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R19751:19756 compcert.lib.Integers Int eq def
R19761:19768 compcert.lib.Integers Int repr def
R19770:19783 compcert.lib.Integers Int min_signed def
R19789:19794 compcert.lib.Integers Int eq def
R19799:19806 compcert.lib.Integers Int mone def
R19735:19750 Coq.Init.Datatypes <> :bool_scope:x_'||'_x not
R19717:19722 compcert.lib.Integers Int eq def
R19727:19734 compcert.lib.Integers Int zero def
R19785:19788 Coq.Init.Datatypes <> :bool_scope:x_'&&'_x not
R19751:19756 compcert.lib.Integers Int eq def
R19761:19768 compcert.lib.Integers Int repr def
R19770:19783 compcert.lib.Integers Int min_signed def
R19789:19794 compcert.lib.Integers Int eq def
R19799:19806 compcert.lib.Integers Int mone def
R19839:19851 compcert.lib.Integers Int is_power2 def
R19839:19851 compcert.lib.Integers Int is_power2 def
R19887:19893 compcert.lib.Integers Int ltu def
R19898:19905 compcert.lib.Integers Int repr def
R19887:19893 compcert.lib.Integers Int ltu def
R19898:19905 compcert.lib.Integers Int repr def
R19935:19946 compcert.ia32.SelectOpproof <> eval_shrximm thm
R19974:19980 compcert.backend.CminorSel <> Eletvar constr
R19982:19982 Coq.Init.Datatypes <> O constr
R19965:19968 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R19959:19962 compcert.common.Values <> Vint constr
R19956:19956 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R19954:19954 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R19951:19952 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R19948:19949 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R19935:19946 compcert.ia32.SelectOpproof <> eval_shrximm thm
R19974:19980 compcert.backend.CminorSel <> Eletvar constr
R19982:19982 Coq.Init.Datatypes <> O constr
R19965:19968 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R19959:19962 compcert.common.Values <> Vint constr
R19956:19956 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R19954:19954 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R19951:19952 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R19948:19949 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R20025:20037 compcert.common.Values Val divs_pow2 thm
R20025:20037 compcert.common.Values Val divs_pow2 thm
R20138:20154 compcert.backend.SelectDivproof <> eval_mod_from_div thm
R20138:20154 compcert.backend.SelectDivproof <> eval_mod_from_div thm
R20210:20223 compcert.ia32.SelectOpproof <> eval_mods_base thm
R20210:20223 compcert.ia32.SelectOpproof <> eval_mods_base thm
R20253:20275 compcert.driver.Compopts <> optim_for_size defax
R20277:20278 Coq.Init.Datatypes <> tt constr
R20253:20275 compcert.driver.Compopts <> optim_for_size defax
R20277:20278 Coq.Init.Datatypes <> tt constr
R20293:20306 compcert.ia32.SelectOpproof <> eval_mods_base thm
R20293:20306 compcert.ia32.SelectOpproof <> eval_mods_base thm
R20338:20352 compcert.backend.SelectDiv <> divs_mul_params def
R20355:20364 compcert.lib.Integers Int signed def
R20338:20352 compcert.backend.SelectDiv <> divs_mul_params def
R20355:20364 compcert.lib.Integers Int signed def
R20458:20474 compcert.backend.SelectDivproof <> eval_mod_from_div thm
R20458:20474 compcert.backend.SelectDivproof <> eval_mod_from_div thm
R20510:20522 compcert.backend.SelectDivproof <> eval_divs_mul thm
R20510:20522 compcert.backend.SelectDivproof <> eval_divs_mul thm
R20578:20591 compcert.ia32.SelectOpproof <> eval_mods_base thm
R20578:20591 compcert.ia32.SelectOpproof <> eval_mods_base thm
prf 20623:20631 <> eval_mods
R20750:20756 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R20758:20759 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R20795:20798 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R20760:20768 compcert.backend.CminorSel <> eval_expr ind
R20794:20794 compcert.backend.SelectDivproof <> v var
R20784:20787 compcert.backend.SelectDiv <> mods def
R20791:20791 compcert.backend.SelectDivproof <> b var
R20789:20789 compcert.backend.SelectDivproof <> a var
R20780:20781 compcert.backend.SelectDivproof <> le var
R20778:20778 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R20776:20776 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R20773:20774 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R20770:20771 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R20799:20809 compcert.common.Values Val lessdef ind
R20813:20813 compcert.backend.SelectDivproof <> v var
R20811:20811 compcert.backend.SelectDivproof <> z var
R20735:20737 Coq.Init.Logic <> :type_scope:x_'='_x not
R20723:20730 compcert.common.Values Val mods def
R20734:20734 compcert.backend.SelectDivproof <> y var
R20732:20732 compcert.backend.SelectDivproof <> x var
R20738:20741 Coq.Init.Datatypes <> Some constr
R20743:20743 compcert.backend.SelectDivproof <> z var
R20691:20699 compcert.backend.CminorSel <> eval_expr ind
R20716:20716 compcert.backend.SelectDivproof <> y var
R20714:20714 compcert.backend.SelectDivproof <> b var
R20711:20712 compcert.backend.SelectDivproof <> le var
R20709:20709 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R20707:20707 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R20704:20705 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R20701:20702 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R20659:20667 compcert.backend.CminorSel <> eval_expr ind
R20684:20684 compcert.backend.SelectDivproof <> x var
R20682:20682 compcert.backend.SelectDivproof <> a var
R20679:20680 compcert.backend.SelectDivproof <> le var
R20677:20677 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R20675:20675 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R20672:20673 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R20669:20670 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R20832:20835 compcert.backend.SelectDiv <> mods def
R20864:20873 compcert.backend.SelectDiv <> mods_match def
R20864:20873 compcert.backend.SelectDiv <> mods_match def
R20933:20944 compcert.backend.SelectDivproof <> eval_modsimm thm
R20933:20944 compcert.backend.SelectDivproof <> eval_modsimm thm
R20963:20976 compcert.ia32.SelectOpproof <> eval_mods_base thm
R20963:20976 compcert.ia32.SelectOpproof <> eval_mods_base thm
prf 21035:21043 <> eval_divf
R21133:21139 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R21141:21142 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R21178:21181 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21143:21151 compcert.backend.CminorSel <> eval_expr ind
R21177:21177 compcert.backend.SelectDivproof <> v var
R21167:21170 compcert.backend.SelectDiv <> divf def
R21174:21174 compcert.backend.SelectDivproof <> b var
R21172:21172 compcert.backend.SelectDivproof <> a var
R21163:21164 compcert.backend.SelectDivproof <> le var
R21161:21161 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R21159:21159 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R21156:21157 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R21153:21154 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R21182:21192 compcert.common.Values Val lessdef ind
R21209:21209 compcert.backend.SelectDivproof <> v var
R21195:21202 compcert.common.Values Val divf def
R21206:21206 compcert.backend.SelectDivproof <> y var
R21204:21204 compcert.backend.SelectDivproof <> x var
R21101:21109 compcert.backend.CminorSel <> eval_expr ind
R21126:21126 compcert.backend.SelectDivproof <> y var
R21124:21124 compcert.backend.SelectDivproof <> b var
R21121:21122 compcert.backend.SelectDivproof <> le var
R21119:21119 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R21117:21117 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R21114:21115 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R21111:21112 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R21069:21077 compcert.backend.CminorSel <> eval_expr ind
R21094:21094 compcert.backend.SelectDivproof <> x var
R21092:21092 compcert.backend.SelectDivproof <> a var
R21089:21090 compcert.backend.SelectDivproof <> le var
R21087:21087 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R21085:21085 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R21082:21083 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R21079:21080 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R21244:21247 compcert.backend.SelectDiv <> divf def
R21260:21269 compcert.backend.SelectDiv <> divf_match def
R21260:21269 compcert.backend.SelectDiv <> divf_match def
R21292:21298 compcert.backend.SelectDiv <> divfimm def
R21311:21329 compcert.lib.Floats Float exact_inverse def
R21311:21329 compcert.lib.Floats Float exact_inverse def
R21557:21577 compcert.lib.Floats Float div_mul_inverse thm
R21557:21577 compcert.lib.Floats Float div_mul_inverse thm
prf 21639:21648 <> eval_divfs
R21738:21744 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R21746:21747 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R21784:21787 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R21748:21756 compcert.backend.CminorSel <> eval_expr ind
R21783:21783 compcert.backend.SelectDivproof <> v var
R21772:21776 compcert.backend.SelectDiv <> divfs def
R21780:21780 compcert.backend.SelectDivproof <> b var
R21778:21778 compcert.backend.SelectDivproof <> a var
R21768:21769 compcert.backend.SelectDivproof <> le var
R21766:21766 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R21764:21764 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R21761:21762 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R21758:21759 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R21788:21798 compcert.common.Values Val lessdef ind
R21816:21816 compcert.backend.SelectDivproof <> v var
R21801:21809 compcert.common.Values Val divfs def
R21813:21813 compcert.backend.SelectDivproof <> y var
R21811:21811 compcert.backend.SelectDivproof <> x var
R21706:21714 compcert.backend.CminorSel <> eval_expr ind
R21731:21731 compcert.backend.SelectDivproof <> y var
R21729:21729 compcert.backend.SelectDivproof <> b var
R21726:21727 compcert.backend.SelectDivproof <> le var
R21724:21724 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R21722:21722 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R21719:21720 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R21716:21717 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R21674:21682 compcert.backend.CminorSel <> eval_expr ind
R21699:21699 compcert.backend.SelectDivproof <> x var
R21697:21697 compcert.backend.SelectDivproof <> a var
R21694:21695 compcert.backend.SelectDivproof <> le var
R21692:21692 compcert.backend.SelectDivproof <> CMCONSTRS.m var
R21690:21690 compcert.backend.SelectDivproof <> CMCONSTRS.e var
R21687:21688 compcert.backend.SelectDivproof <> CMCONSTRS.sp var
R21684:21685 compcert.backend.SelectDivproof <> CMCONSTRS.ge var
R21851:21855 compcert.backend.SelectDiv <> divfs def
R21868:21878 compcert.backend.SelectDiv <> divfs_match def
R21868:21878 compcert.backend.SelectDiv <> divfs_match def
R21901:21908 compcert.backend.SelectDiv <> divfsimm def
R21921:21941 compcert.lib.Floats Float32 exact_inverse def
R21921:21941 compcert.lib.Floats Float32 exact_inverse def
R22169:22191 compcert.lib.Floats Float32 div_mul_inverse thm
R22169:22191 compcert.lib.Floats Float32 div_mul_inverse thm
R22249:22257 compcert.backend.SelectDivproof CMCONSTRS <> sec
