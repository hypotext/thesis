DIGEST NO
Fcompcert.backend.Tunnelingproof
R895:900 compcert.lib.Coqlib <> <> lib
R918:921 compcert.lib.Maps <> <> lib
R939:947 compcert.lib.UnionFind <> <> lib
R965:967 compcert.common.AST <> <> lib
R985:990 compcert.common.Values <> <> lib
R1008:1013 compcert.common.Memory <> <> lib
R1031:1036 compcert.common.Events <> <> lib
R1054:1063 compcert.common.Globalenvs <> <> lib
R1081:1089 compcert.common.Smallstep <> <> lib
R1107:1108 compcert.ia32.Op <> <> lib
R1126:1134 compcert.backend.Locations <> <> lib
R1152:1154 compcert.backend.LTL <> <> lib
R1172:1180 compcert.backend.Tunneling <> <> lib
def 1448:1459 <> measure_edge
R1465:1467 compcert.backend.Tunneling U t defax
R1477:1480 compcert.backend.LTL <> node def
R1495:1497 Coq.Init.Datatypes <> nat ind
R1487:1490 compcert.backend.LTL <> node def
R1510:1512 Coq.Init.Datatypes <> nat ind
R1502:1505 compcert.backend.LTL <> node def
R1531:1533 compcert.lib.Coqlib <> peq def
R1548:1549 compcert.backend.Tunnelingproof <> pc var
R1536:1541 compcert.backend.Tunneling U repr defax
R1545:1545 compcert.backend.Tunnelingproof <> s var
R1543:1543 compcert.backend.Tunnelingproof <> u var
R1579:1581 compcert.lib.Coqlib <> peq def
R1596:1597 compcert.backend.Tunnelingproof <> pc var
R1584:1589 compcert.backend.Tunneling U repr defax
R1593:1593 compcert.backend.Tunnelingproof <> x var
R1591:1591 compcert.backend.Tunnelingproof <> u var
R1640:1640 compcert.backend.Tunnelingproof <> f var
R1642:1642 compcert.backend.Tunnelingproof <> x var
R1614:1616 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R1608:1610 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R1605:1605 compcert.backend.Tunnelingproof <> f var
R1607:1607 compcert.backend.Tunnelingproof <> x var
R1611:1611 compcert.backend.Tunnelingproof <> f var
R1613:1613 compcert.backend.Tunnelingproof <> s var
R1556:1556 compcert.backend.Tunnelingproof <> f var
R1558:1558 compcert.backend.Tunnelingproof <> x var
def 1657:1668 <> record_goto'
R1678:1681 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R1693:1693 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R1675:1677 compcert.backend.Tunneling U t defax
R1690:1692 Coq.Init.Datatypes <> nat ind
R1682:1685 compcert.backend.LTL <> node def
R1701:1704 compcert.backend.LTL <> node def
R1711:1716 compcert.backend.LTL <> bblock def
R1724:1727 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R1739:1739 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R1721:1723 compcert.backend.Tunneling U t defax
R1736:1738 Coq.Init.Datatypes <> nat ind
R1728:1731 compcert.backend.LTL <> node def
R1752:1752 compcert.backend.Tunnelingproof <> b var
R1772:1775 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1763:1769 compcert.backend.LTL <> Lbranch constr
R1796:1797 compcert.backend.Tunnelingproof <> uf var
R1802:1802 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1817:1818 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1840:1840 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R1803:1809 compcert.backend.Tunneling U union defax
R1813:1814 compcert.backend.Tunnelingproof <> pc var
R1811:1811 compcert.backend.Tunnelingproof <> u var
R1819:1830 compcert.backend.Tunnelingproof <> measure_edge def
R1839:1839 compcert.backend.Tunnelingproof <> f var
R1834:1835 compcert.backend.Tunnelingproof <> pc var
R1832:1832 compcert.backend.Tunnelingproof <> u var
R1851:1852 compcert.backend.Tunnelingproof <> uf var
def 1873:1890 <> branch_map_correct
R1896:1899 compcert.backend.LTL <> code def
R1910:1913 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R1925:1925 Coq.Init.Datatypes <> :type_scope:x_'*'_x not
R1907:1909 compcert.backend.Tunneling U t defax
R1922:1924 Coq.Init.Datatypes <> nat ind
R1914:1917 compcert.backend.LTL <> node def
R1959:1959 compcert.lib.Maps <> ::x_'!'_x not
R1960:1961 compcert.backend.Tunnelingproof <> pc var
R1958:1958 compcert.backend.Tunnelingproof <> c var
R1972:1975 Coq.Init.Datatypes <> Some constr
R1986:1989 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R1977:1983 compcert.backend.LTL <> Lbranch constr
R2025:2028 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2020:2022 Coq.Init.Logic <> :type_scope:x_'='_x not
R2002:2007 compcert.backend.Tunneling U repr defax
R2018:2019 compcert.backend.Tunnelingproof <> pc var
R2010:2012 Coq.Init.Datatypes <> fst def
R2014:2015 compcert.backend.Tunnelingproof <> uf var
R2023:2024 compcert.backend.Tunnelingproof <> pc var
R2068:2071 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2048:2050 Coq.Init.Logic <> :type_scope:x_'='_x not
R2030:2035 compcert.backend.Tunneling U repr defax
R2046:2047 compcert.backend.Tunnelingproof <> pc var
R2038:2040 Coq.Init.Datatypes <> fst def
R2042:2043 compcert.backend.Tunnelingproof <> uf var
R2051:2056 compcert.backend.Tunneling U repr defax
R2059:2061 Coq.Init.Datatypes <> fst def
R2063:2064 compcert.backend.Tunnelingproof <> uf var
R2080:2082 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R2072:2074 Coq.Init.Datatypes <> snd def
R2076:2077 compcert.backend.Tunnelingproof <> uf var
R2083:2085 Coq.Init.Datatypes <> snd def
R2090:2091 compcert.backend.Tunnelingproof <> pc var
R2087:2088 compcert.backend.Tunnelingproof <> uf var
R2131:2133 Coq.Init.Logic <> :type_scope:x_'='_x not
R2113:2118 compcert.backend.Tunneling U repr defax
R2129:2130 compcert.backend.Tunnelingproof <> pc var
R2121:2123 Coq.Init.Datatypes <> fst def
R2125:2126 compcert.backend.Tunnelingproof <> uf var
R2134:2135 compcert.backend.Tunnelingproof <> pc var
prf 2151:2171 <> record_gotos'_correct
R2188:2205 compcert.backend.Tunnelingproof <> branch_map_correct def
R2210:2219 compcert.lib.Maps PTree fold def
R2236:2236 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2244:2245 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2264:2264 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2237:2243 compcert.backend.Tunneling U empty defax
R2254:2257 compcert.backend.LTL <> node def
R2263:2263 Coq.Init.Datatypes <> O constr
R2234:2234 compcert.backend.Tunnelingproof <> c var
R2221:2232 compcert.backend.Tunnelingproof <> record_goto' def
R2207:2207 compcert.backend.Tunnelingproof <> c var
R2342:2359 compcert.backend.Tunnelingproof <> branch_map_correct def
R2363:2364 compcert.backend.Tunnelingproof <> uf var
R2361:2361 compcert.backend.Tunnelingproof <> c var
R2293:2317 compcert.lib.Maps PTree_Properties fold_rec thm
R2342:2359 compcert.backend.Tunnelingproof <> branch_map_correct def
R2363:2364 compcert.backend.Tunnelingproof <> uf var
R2361:2361 compcert.backend.Tunnelingproof <> c var
R2293:2317 compcert.lib.Maps PTree_Properties fold_rec thm
R2484:2495 compcert.lib.Maps PTree gempty thm
R2484:2495 compcert.lib.Maps PTree gempty thm
R2504:2515 compcert.backend.Tunneling U repr_empty prfax
R2504:2515 compcert.backend.Tunneling U repr_empty prfax
R2617:2619 Coq.Init.Logic <> :type_scope:x_'='_x not
R2606:2611 compcert.backend.Tunneling U repr defax
R2617:2619 Coq.Init.Logic <> :type_scope:x_'='_x not
R2606:2611 compcert.backend.Tunneling U repr defax
R2711:2724 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2702:2704 Coq.Init.Logic <> :type_scope:x_'='_x not
R2677:2688 compcert.backend.Tunnelingproof <> record_goto' def
R2690:2690 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2692:2693 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2695:2695 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2705:2705 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2707:2708 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2710:2710 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2725:2731 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2733:2734 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2735:2741 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2745:2746 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2768:2771 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2749:2751 Coq.Init.Logic <> :type_scope:x_'='_x not
R2761:2764 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2752:2758 compcert.backend.LTL <> Lbranch constr
R2760:2760 compcert.backend.Tunnelingproof <> s var
R2765:2767 compcert.backend.Tunnelingproof <> bb' var
R2797:2799 Coq.Init.Logic <> :type_scope:x_'='_x not
R2772:2783 compcert.backend.Tunnelingproof <> record_goto' def
R2785:2785 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2787:2788 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2790:2790 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2800:2800 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2815:2816 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2838:2838 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2801:2807 compcert.backend.Tunneling U union defax
R2814:2814 compcert.backend.Tunnelingproof <> s var
R2817:2828 compcert.backend.Tunnelingproof <> measure_edge def
R2835:2835 compcert.backend.Tunnelingproof <> s var
R2711:2724 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R2702:2704 Coq.Init.Logic <> :type_scope:x_'='_x not
R2677:2688 compcert.backend.Tunnelingproof <> record_goto' def
R2690:2690 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2692:2693 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2695:2695 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2705:2705 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2707:2708 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2710:2710 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2725:2731 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2733:2734 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2735:2741 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2745:2746 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R2768:2771 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R2749:2751 Coq.Init.Logic <> :type_scope:x_'='_x not
R2761:2764 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R2752:2758 compcert.backend.LTL <> Lbranch constr
R2760:2760 compcert.backend.Tunnelingproof <> s var
R2765:2767 compcert.backend.Tunnelingproof <> bb' var
R2797:2799 Coq.Init.Logic <> :type_scope:x_'='_x not
R2772:2783 compcert.backend.Tunnelingproof <> record_goto' def
R2785:2785 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2787:2788 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2790:2790 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2800:2800 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2815:2816 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2838:2838 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R2801:2807 compcert.backend.Tunneling U union defax
R2814:2814 compcert.backend.Tunnelingproof <> s var
R2817:2828 compcert.backend.Tunnelingproof <> measure_edge def
R2835:2835 compcert.backend.Tunnelingproof <> s var
R2853:2864 compcert.backend.Tunnelingproof <> record_goto' def
R3061:3072 compcert.lib.Maps PTree gsspec thm
R3061:3072 compcert.lib.Maps PTree gsspec thm
R3085:3087 compcert.lib.Coqlib <> peq def
R3085:3087 compcert.lib.Coqlib <> peq def
R3287:3298 compcert.lib.Maps PTree gsspec thm
R3287:3298 compcert.lib.Maps PTree gsspec thm
R3311:3313 compcert.lib.Coqlib <> peq def
R3311:3313 compcert.lib.Coqlib <> peq def
R3385:3398 compcert.backend.Tunneling U repr_union_2 prfax
R3385:3398 compcert.backend.Tunneling U repr_union_2 prfax
R3423:3436 compcert.backend.Tunneling U repr_union_3 prfax
R3423:3436 compcert.backend.Tunneling U repr_union_3 prfax
R3449:3460 compcert.backend.Tunnelingproof <> measure_edge def
R3473:3475 compcert.lib.Coqlib <> peq def
R3478:3483 compcert.backend.Tunneling U repr defax
R3473:3475 compcert.lib.Coqlib <> peq def
R3478:3483 compcert.backend.Tunneling U repr defax
R3543:3550 compcert.lib.Coqlib <> peq_true thm
R3543:3550 compcert.lib.Coqlib <> peq_true thm
R3645:3647 Coq.Init.Logic <> :type_scope:x_'='_x not
R3618:3623 compcert.backend.Tunneling U repr defax
R3626:3632 compcert.backend.Tunneling U union defax
R3608:3610 Coq.Init.Logic <> :type_scope:x_'='_x not
R3596:3601 compcert.backend.Tunneling U repr defax
R3645:3647 Coq.Init.Logic <> :type_scope:x_'='_x not
R3618:3623 compcert.backend.Tunneling U repr defax
R3626:3632 compcert.backend.Tunneling U union defax
R3608:3610 Coq.Init.Logic <> :type_scope:x_'='_x not
R3596:3601 compcert.backend.Tunneling U repr defax
R3691:3704 compcert.backend.Tunneling U repr_union_1 prfax
R3691:3704 compcert.backend.Tunneling U repr_union_1 prfax
R3761:3761 compcert.lib.Maps <> ::x_'!'_x not
R3761:3761 compcert.lib.Maps <> ::x_'!'_x not
R3866:3884 compcert.backend.Tunneling U sameclass_union_2 prfax
R3866:3884 compcert.backend.Tunneling U sameclass_union_2 prfax
R3902:3913 compcert.backend.Tunnelingproof <> measure_edge def
R3926:3928 compcert.lib.Coqlib <> peq def
R3931:3936 compcert.backend.Tunneling U repr defax
R3926:3928 compcert.lib.Coqlib <> peq def
R3931:3936 compcert.backend.Tunneling U repr defax
R3977:3979 compcert.lib.Coqlib <> peq def
R3982:3987 compcert.backend.Tunneling U repr defax
R3977:3979 compcert.lib.Coqlib <> peq def
R3982:3987 compcert.backend.Tunneling U repr defax
def 4031:4043 <> record_gotos'
R4049:4056 compcert.backend.LTL <> function rec
R4064:4073 compcert.lib.Maps PTree fold def
R4100:4100 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4108:4109 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4128:4128 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R4101:4107 compcert.backend.Tunneling U empty defax
R4118:4121 compcert.backend.LTL <> node def
R4127:4127 Coq.Init.Datatypes <> O constr
R4091:4097 compcert.backend.LTL <> fn_code proj
R4088:4088 compcert.backend.Tunnelingproof <> f var
R4075:4086 compcert.backend.Tunnelingproof <> record_goto' def
prf 4138:4156 <> record_gotos_gotos'
R4192:4194 Coq.Init.Logic <> :type_scope:x_'='_x not
R4171:4173 Coq.Init.Datatypes <> fst def
R4176:4188 compcert.backend.Tunnelingproof <> record_gotos' def
R4190:4190 compcert.backend.Tunnelingproof <> f var
R4195:4206 compcert.backend.Tunneling <> record_gotos def
R4208:4208 compcert.backend.Tunnelingproof <> f var
R4235:4247 compcert.backend.Tunnelingproof <> record_gotos' def
R4250:4261 compcert.backend.Tunneling <> record_gotos def
R4282:4296 compcert.lib.Maps PTree fold_spec thm
R4282:4296 compcert.lib.Maps PTree fold_spec thm
R4282:4296 compcert.lib.Maps PTree fold_spec thm
R4282:4296 compcert.lib.Maps PTree fold_spec thm
R4313:4326 compcert.lib.Maps PTree elements def
R4329:4335 compcert.backend.LTL <> fn_code proj
R4342:4348 compcert.backend.Tunneling U empty defax
R4360:4363 compcert.backend.LTL <> node def
R4368:4368 Coq.Init.Datatypes <> O constr
R4313:4326 compcert.lib.Maps PTree elements def
R4329:4335 compcert.backend.LTL <> fn_code proj
R4342:4348 compcert.backend.Tunneling U empty defax
R4360:4363 compcert.backend.LTL <> node def
R4368:4368 Coq.Init.Datatypes <> O constr
R4419:4430 compcert.backend.Tunnelingproof <> record_goto' def
R4445:4455 compcert.backend.Tunneling <> record_goto def
R4476:4478 Coq.Init.Datatypes <> snd def
R4476:4478 Coq.Init.Datatypes <> snd def
def 4535:4547 <> branch_target
R4553:4560 compcert.backend.LTL <> function rec
R4568:4571 compcert.backend.LTL <> node def
R4576:4579 compcert.backend.LTL <> node def
R4586:4591 compcert.backend.Tunneling U repr defax
R4610:4611 compcert.backend.Tunnelingproof <> pc var
R4594:4605 compcert.backend.Tunneling <> record_gotos def
R4607:4607 compcert.backend.Tunnelingproof <> f var
def 4626:4636 <> count_gotos
R4642:4649 compcert.backend.LTL <> function rec
R4657:4660 compcert.backend.LTL <> node def
R4665:4667 Coq.Init.Datatypes <> nat ind
R4674:4676 Coq.Init.Datatypes <> snd def
R4696:4697 compcert.backend.Tunnelingproof <> pc var
R4679:4691 compcert.backend.Tunnelingproof <> record_gotos' def
R4693:4693 compcert.backend.Tunnelingproof <> f var
prf 4709:4728 <> record_gotos_correct
R4765:4765 compcert.lib.Maps <> ::x_'!'_x not
R4766:4767 compcert.backend.Tunnelingproof <> pc var
R4757:4763 compcert.backend.LTL <> fn_code proj
R4754:4754 compcert.backend.Tunnelingproof <> f var
R4778:4781 Coq.Init.Datatypes <> Some constr
R4792:4795 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R4783:4789 compcert.backend.LTL <> Lbranch constr
R4832:4842 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R4827:4829 Coq.Init.Logic <> :type_scope:x_'='_x not
R4809:4821 compcert.backend.Tunnelingproof <> branch_target def
R4825:4826 compcert.backend.Tunnelingproof <> pc var
R4823:4823 compcert.backend.Tunnelingproof <> f var
R4830:4831 compcert.backend.Tunnelingproof <> pc var
R4882:4885 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R4862:4864 Coq.Init.Logic <> :type_scope:x_'='_x not
R4844:4856 compcert.backend.Tunnelingproof <> branch_target def
R4860:4861 compcert.backend.Tunnelingproof <> pc var
R4858:4858 compcert.backend.Tunnelingproof <> f var
R4865:4877 compcert.backend.Tunnelingproof <> branch_target def
R4879:4879 compcert.backend.Tunnelingproof <> f var
R4901:4903 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R4886:4896 compcert.backend.Tunnelingproof <> count_gotos def
R4898:4898 compcert.backend.Tunnelingproof <> f var
R4904:4914 compcert.backend.Tunnelingproof <> count_gotos def
R4918:4919 compcert.backend.Tunnelingproof <> pc var
R4916:4916 compcert.backend.Tunnelingproof <> f var
R4953:4955 Coq.Init.Logic <> :type_scope:x_'='_x not
R4935:4947 compcert.backend.Tunnelingproof <> branch_target def
R4951:4952 compcert.backend.Tunnelingproof <> pc var
R4949:4949 compcert.backend.Tunnelingproof <> f var
R4956:4957 compcert.backend.Tunnelingproof <> pc var
R4998:5018 compcert.backend.Tunnelingproof <> record_gotos'_correct thm
R5023:5029 compcert.backend.LTL <> fn_code proj
R4998:5018 compcert.backend.Tunnelingproof <> record_gotos'_correct thm
R5023:5029 compcert.backend.LTL <> fn_code proj
R5052:5064 compcert.backend.Tunnelingproof <> record_gotos' def
R5052:5064 compcert.backend.Tunnelingproof <> record_gotos' def
R5077:5094 compcert.backend.Tunnelingproof <> branch_map_correct def
R5097:5109 compcert.backend.Tunnelingproof <> branch_target def
R5112:5122 compcert.backend.Tunnelingproof <> count_gotos def
R5135:5153 compcert.backend.Tunnelingproof <> record_gotos_gotos' thm
R5135:5153 compcert.backend.Tunnelingproof <> record_gotos_gotos' thm
sec 5212:5223 <> PRESERVATION
var 5236:5239 PRESERVATION prog
R5242:5248 compcert.backend.LTL <> program def
var 5255:5259 PRESERVATION tprog
R5264:5277 compcert.backend.Tunneling <> tunnel_program def
R5279:5282 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
var 5289:5290 PRESERVATION ge
R5295:5308 compcert.common.Globalenvs Genv globalenv def
R5310:5313 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
var 5320:5322 PRESERVATION tge
R5327:5340 compcert.common.Globalenvs Genv globalenv def
R5342:5346 compcert.backend.Tunnelingproof <> PRESERVATION.tprog var
prf 5356:5375 <> functions_translated
R5450:5452 Coq.Init.Logic <> :type_scope:x_'='_x not
R5429:5443 compcert.common.Globalenvs Genv find_funct def
R5449:5449 compcert.backend.Tunnelingproof <> v var
R5445:5447 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R5453:5456 Coq.Init.Datatypes <> Some constr
R5459:5471 compcert.backend.Tunneling <> tunnel_fundef def
R5473:5473 compcert.backend.Tunnelingproof <> f var
R5414:5416 Coq.Init.Logic <> :type_scope:x_'='_x not
R5394:5408 compcert.common.Globalenvs Genv find_funct def
R5413:5413 compcert.backend.Tunnelingproof <> v var
R5410:5411 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R5417:5420 Coq.Init.Datatypes <> Some constr
R5422:5422 compcert.backend.Tunnelingproof <> f var
R5485:5506 compcert.common.Globalenvs Genv find_funct_transf thm
R5528:5531 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R5514:5526 compcert.backend.Tunneling <> tunnel_fundef def
prf 5542:5564 <> function_ptr_translated
R5647:5649 Coq.Init.Logic <> :type_scope:x_'='_x not
R5622:5640 compcert.common.Globalenvs Genv find_funct_ptr def
R5646:5646 compcert.backend.Tunnelingproof <> v var
R5642:5644 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R5650:5653 Coq.Init.Datatypes <> Some constr
R5656:5668 compcert.backend.Tunneling <> tunnel_fundef def
R5670:5670 compcert.backend.Tunnelingproof <> f var
R5607:5609 Coq.Init.Logic <> :type_scope:x_'='_x not
R5583:5601 compcert.common.Globalenvs Genv find_funct_ptr def
R5606:5606 compcert.backend.Tunnelingproof <> v var
R5603:5604 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R5610:5613 Coq.Init.Datatypes <> Some constr
R5615:5615 compcert.backend.Tunnelingproof <> f var
R5682:5707 compcert.common.Globalenvs Genv find_funct_ptr_transf thm
R5729:5732 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R5715:5727 compcert.backend.Tunneling <> tunnel_fundef def
prf 5743:5759 <> symbols_preserved
R5800:5802 Coq.Init.Logic <> :type_scope:x_'='_x not
R5777:5792 compcert.common.Globalenvs Genv find_symbol def
R5798:5799 compcert.backend.Tunnelingproof <> id var
R5794:5796 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R5803:5818 compcert.common.Globalenvs Genv find_symbol def
R5823:5824 compcert.backend.Tunnelingproof <> id var
R5820:5821 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R5835:5857 compcert.common.Globalenvs Genv find_symbol_transf thm
R5879:5882 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R5865:5877 compcert.backend.Tunneling <> tunnel_fundef def
prf 5893:5909 <> varinfo_preserved
R5948:5950 Coq.Init.Logic <> :type_scope:x_'='_x not
R5924:5941 compcert.common.Globalenvs Genv find_var_info def
R5947:5947 compcert.backend.Tunnelingproof <> b var
R5943:5945 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R5951:5968 compcert.common.Globalenvs Genv find_var_info def
R5973:5973 compcert.backend.Tunnelingproof <> b var
R5970:5971 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R5984:6008 compcert.common.Globalenvs Genv find_var_info_transf thm
R6030:6033 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R6016:6028 compcert.backend.Tunneling <> tunnel_fundef def
prf 6044:6056 <> sig_preserved
R6095:6097 Coq.Init.Logic <> :type_scope:x_'='_x not
R6071:6076 compcert.backend.LTL <> funsig def
R6079:6091 compcert.backend.Tunneling <> tunnel_fundef def
R6093:6093 compcert.backend.Tunnelingproof <> f var
R6098:6103 compcert.backend.LTL <> funsig def
R6105:6105 compcert.backend.Tunnelingproof <> f var
prf 6154:6177 <> find_function_translated
R6263:6265 Coq.Init.Logic <> :type_scope:x_'='_x not
R6239:6251 compcert.backend.LTL <> find_function def
R6261:6262 compcert.backend.Tunnelingproof <> ls var
R6257:6259 compcert.backend.Tunnelingproof <> ros var
R6253:6255 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R6266:6269 Coq.Init.Datatypes <> Some constr
R6272:6284 compcert.backend.Tunneling <> tunnel_fundef def
R6286:6286 compcert.backend.Tunnelingproof <> f var
R6224:6226 Coq.Init.Logic <> :type_scope:x_'='_x not
R6201:6213 compcert.backend.LTL <> find_function def
R6222:6223 compcert.backend.Tunnelingproof <> ls var
R6218:6220 compcert.backend.Tunnelingproof <> ros var
R6215:6216 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R6227:6230 Coq.Init.Datatypes <> Some constr
R6232:6232 compcert.backend.Tunnelingproof <> f var
R6351:6370 compcert.backend.Tunnelingproof <> functions_translated thm
R6351:6370 compcert.backend.Tunnelingproof <> functions_translated thm
R6389:6405 compcert.backend.Tunnelingproof <> symbols_preserved thm
R6389:6405 compcert.backend.Tunnelingproof <> symbols_preserved thm
R6418:6433 compcert.common.Globalenvs Genv find_symbol def
R6435:6436 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R6418:6433 compcert.common.Globalenvs Genv find_symbol def
R6435:6436 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R6450:6472 compcert.backend.Tunnelingproof <> function_ptr_translated thm
R6450:6472 compcert.backend.Tunnelingproof <> function_ptr_translated thm
def 7488:7501 <> tunneled_block
R7507:7514 compcert.backend.LTL <> function rec
R7521:7526 compcert.backend.LTL <> bblock def
R7534:7545 compcert.backend.Tunneling <> tunnel_block def
R7564:7564 compcert.backend.Tunnelingproof <> b var
R7548:7559 compcert.backend.Tunneling <> record_gotos def
R7561:7561 compcert.backend.Tunnelingproof <> f var
def 7579:7591 <> tunneled_code
R7597:7604 compcert.backend.LTL <> function rec
R7612:7621 compcert.lib.Maps PTree map1 def
R7643:7649 compcert.backend.LTL <> fn_code proj
R7651:7651 compcert.backend.Tunnelingproof <> f var
R7624:7637 compcert.backend.Tunnelingproof <> tunneled_block def
R7639:7639 compcert.backend.Tunnelingproof <> f var
ind 7666:7682 <> match_stackframes
constr 7725:7747 <> match_stackframes_intro
R7699:7708 compcert.backend.LTL <> stackframe ind
R7685:7694 compcert.backend.LTL <> stackframe ind
R7782:7798 compcert.backend.Tunnelingproof <> match_stackframes ind
R7844:7853 compcert.backend.LTL <> Stackframe constr
R7883:7896 compcert.backend.Tunnelingproof <> tunneled_block def
R7900:7901 compcert.backend.Tunnelingproof <> bb var
R7898:7898 compcert.backend.Tunnelingproof <> f var
R7878:7880 compcert.backend.Tunnelingproof <> ls0 var
R7875:7876 compcert.backend.Tunnelingproof <> sp var
R7856:7870 compcert.backend.Tunneling <> tunnel_function def
R7872:7872 compcert.backend.Tunnelingproof <> f var
R7810:7819 compcert.backend.LTL <> Stackframe constr
R7830:7831 compcert.backend.Tunnelingproof <> bb var
R7826:7828 compcert.backend.Tunnelingproof <> ls0 var
R7823:7824 compcert.backend.Tunnelingproof <> sp var
R7821:7821 compcert.backend.Tunnelingproof <> f var
ind 7917:7928 <> match_states
constr 7961:7978 <> match_states_intro
constr 8183:8200 <> match_states_block
constr 8406:8424 <> match_states_interm
constr 8648:8664 <> match_states_call
constr 8839:8857 <> match_states_return
R7940:7944 compcert.backend.LTL <> state ind
R7931:7935 compcert.backend.LTL <> state ind
R8064:8075 compcert.backend.Tunnelingproof <> match_states ind
R8120:8124 compcert.backend.LTL <> State constr
R8176:8176 compcert.backend.Tunnelingproof <> m var
R8173:8174 compcert.backend.Tunnelingproof <> ls var
R8153:8165 compcert.backend.Tunnelingproof <> branch_target def
R8169:8170 compcert.backend.Tunnelingproof <> pc var
R8167:8167 compcert.backend.Tunnelingproof <> f var
R8149:8150 compcert.backend.Tunnelingproof <> sp var
R8130:8144 compcert.backend.Tunneling <> tunnel_function def
R8146:8146 compcert.backend.Tunnelingproof <> f var
R8126:8127 compcert.backend.Tunnelingproof <> ts var
R8078:8082 compcert.backend.LTL <> State constr
R8097:8097 compcert.backend.Tunnelingproof <> m var
R8094:8095 compcert.backend.Tunnelingproof <> ls var
R8091:8092 compcert.backend.Tunnelingproof <> pc var
R8088:8089 compcert.backend.Tunnelingproof <> sp var
R8086:8086 compcert.backend.Tunnelingproof <> f var
R8084:8084 compcert.backend.Tunnelingproof <> s var
R8019:8030 compcert.lib.Coqlib <> list_forall2 ind
R8052:8053 compcert.backend.Tunnelingproof <> ts var
R8050:8050 compcert.backend.Tunnelingproof <> s var
R8032:8048 compcert.backend.Tunnelingproof <> match_stackframes ind
R8286:8297 compcert.backend.Tunnelingproof <> match_states ind
R8342:8346 compcert.backend.LTL <> Block constr
R8399:8399 compcert.backend.Tunnelingproof <> m var
R8396:8397 compcert.backend.Tunnelingproof <> ls var
R8375:8388 compcert.backend.Tunnelingproof <> tunneled_block def
R8392:8393 compcert.backend.Tunnelingproof <> bb var
R8390:8390 compcert.backend.Tunnelingproof <> f var
R8371:8372 compcert.backend.Tunnelingproof <> sp var
R8352:8366 compcert.backend.Tunneling <> tunnel_function def
R8368:8368 compcert.backend.Tunnelingproof <> f var
R8348:8349 compcert.backend.Tunnelingproof <> ts var
R8300:8304 compcert.backend.LTL <> Block constr
R8319:8319 compcert.backend.Tunnelingproof <> m var
R8316:8317 compcert.backend.Tunnelingproof <> ls var
R8313:8314 compcert.backend.Tunnelingproof <> bb var
R8310:8311 compcert.backend.Tunnelingproof <> sp var
R8308:8308 compcert.backend.Tunnelingproof <> f var
R8306:8306 compcert.backend.Tunnelingproof <> s var
R8241:8252 compcert.lib.Coqlib <> list_forall2 ind
R8274:8275 compcert.backend.Tunnelingproof <> ts var
R8272:8272 compcert.backend.Tunnelingproof <> s var
R8254:8270 compcert.backend.Tunnelingproof <> match_stackframes ind
R8513:8524 compcert.backend.Tunnelingproof <> match_states ind
R8585:8589 compcert.backend.LTL <> State constr
R8641:8641 compcert.backend.Tunnelingproof <> m var
R8638:8639 compcert.backend.Tunnelingproof <> ls var
R8618:8630 compcert.backend.Tunnelingproof <> branch_target def
R8634:8635 compcert.backend.Tunnelingproof <> pc var
R8632:8632 compcert.backend.Tunnelingproof <> f var
R8614:8615 compcert.backend.Tunnelingproof <> sp var
R8595:8609 compcert.backend.Tunneling <> tunnel_function def
R8611:8611 compcert.backend.Tunnelingproof <> f var
R8591:8592 compcert.backend.Tunnelingproof <> ts var
R8527:8531 compcert.backend.LTL <> Block constr
R8562:8562 compcert.backend.Tunnelingproof <> m var
R8559:8560 compcert.backend.Tunnelingproof <> ls var
R8551:8554 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R8541:8547 compcert.backend.LTL <> Lbranch constr
R8549:8550 compcert.backend.Tunnelingproof <> pc var
R8555:8556 compcert.backend.Tunnelingproof <> bb var
R8537:8538 compcert.backend.Tunnelingproof <> sp var
R8535:8535 compcert.backend.Tunnelingproof <> f var
R8533:8533 compcert.backend.Tunnelingproof <> s var
R8468:8479 compcert.lib.Coqlib <> list_forall2 ind
R8501:8502 compcert.backend.Tunnelingproof <> ts var
R8499:8499 compcert.backend.Tunnelingproof <> s var
R8481:8497 compcert.backend.Tunnelingproof <> match_stackframes ind
R8744:8755 compcert.backend.Tunnelingproof <> match_states ind
R8798:8806 compcert.backend.LTL <> Callstate constr
R8832:8832 compcert.backend.Tunnelingproof <> m var
R8829:8830 compcert.backend.Tunnelingproof <> ls var
R8812:8824 compcert.backend.Tunneling <> tunnel_fundef def
R8826:8826 compcert.backend.Tunnelingproof <> f var
R8808:8809 compcert.backend.Tunnelingproof <> ts var
R8758:8766 compcert.backend.LTL <> Callstate constr
R8775:8775 compcert.backend.Tunnelingproof <> m var
R8772:8773 compcert.backend.Tunnelingproof <> ls var
R8770:8770 compcert.backend.Tunnelingproof <> f var
R8768:8768 compcert.backend.Tunnelingproof <> s var
R8699:8710 compcert.lib.Coqlib <> list_forall2 ind
R8732:8733 compcert.backend.Tunnelingproof <> ts var
R8730:8730 compcert.backend.Tunnelingproof <> s var
R8712:8728 compcert.backend.Tunnelingproof <> match_stackframes ind
R8935:8946 compcert.backend.Tunnelingproof <> match_states ind
R8989:8999 compcert.backend.LTL <> Returnstate constr
R9007:9007 compcert.backend.Tunnelingproof <> m var
R9004:9005 compcert.backend.Tunnelingproof <> ls var
R9001:9002 compcert.backend.Tunnelingproof <> ts var
R8949:8959 compcert.backend.LTL <> Returnstate constr
R8966:8966 compcert.backend.Tunnelingproof <> m var
R8963:8964 compcert.backend.Tunnelingproof <> ls var
R8961:8961 compcert.backend.Tunnelingproof <> s var
R8890:8901 compcert.lib.Coqlib <> list_forall2 ind
R8923:8924 compcert.backend.Tunnelingproof <> ts var
R8921:8921 compcert.backend.Tunnelingproof <> s var
R8903:8919 compcert.backend.Tunnelingproof <> match_stackframes ind
def 9279:9285 <> measure
R9292:9296 compcert.backend.LTL <> state ind
R9301:9303 Coq.Init.Datatypes <> nat ind
R9316:9317 compcert.backend.Tunnelingproof <> st var
R9328:9332 compcert.backend.LTL <> State constr
R9369:9371 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R9353:9363 compcert.backend.Tunnelingproof <> count_gotos def
R9383:9387 compcert.backend.LTL <> Block constr
R9407:9410 Coq.Init.Datatypes <> :list_scope:x_'::'_x not
R9397:9403 compcert.backend.LTL <> Lbranch constr
R9443:9445 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R9439:9441 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R9423:9433 compcert.backend.Tunnelingproof <> count_gotos def
R9457:9461 compcert.backend.LTL <> Block constr
R9491:9499 compcert.backend.LTL <> Callstate constr
R9523:9533 compcert.backend.LTL <> Returnstate constr
prf 9565:9583 <> match_parent_locset
R9660:9662 Coq.Init.Logic <> :type_scope:x_'='_x not
R9644:9656 compcert.backend.LTL <> parent_locset def
R9658:9659 compcert.backend.Tunnelingproof <> ts var
R9663:9675 compcert.backend.LTL <> parent_locset def
R9677:9677 compcert.backend.Tunnelingproof <> s var
R9603:9614 compcert.lib.Coqlib <> list_forall2 ind
R9636:9637 compcert.backend.Tunnelingproof <> ts var
R9634:9634 compcert.backend.Tunnelingproof <> s var
R9616:9632 compcert.backend.Tunnelingproof <> match_stackframes ind
prf 9740:9758 <> tunnel_step_correct
R9821:9832 compcert.backend.Tunnelingproof <> match_states ind
R9838:9841 compcert.backend.Tunnelingproof <> st1' var
R9834:9836 compcert.backend.Tunnelingproof <> st1 var
R9847:9847 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R9906:9912 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R9848:9854 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R9859:9860 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R9881:9884 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R9861:9864 compcert.backend.LTL <> step ind
R9877:9880 compcert.backend.Tunnelingproof <> st2' var
R9875:9875 compcert.backend.Tunnelingproof <> t var
R9870:9873 compcert.backend.Tunnelingproof <> st1' var
R9866:9868 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R9885:9896 compcert.backend.Tunnelingproof <> match_states ind
R9902:9905 compcert.backend.Tunnelingproof <> st2' var
R9898:9900 compcert.backend.Tunnelingproof <> st2 var
R9939:9942 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R9925:9927 Coq.Init.Peano <> :nat_scope:x_'<'_x not
R9914:9920 compcert.backend.Tunnelingproof <> measure def
R9922:9924 compcert.backend.Tunnelingproof <> st2 var
R9928:9934 compcert.backend.Tunnelingproof <> measure def
R9936:9938 compcert.backend.Tunnelingproof <> st1 var
R9949:9952 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R9944:9946 Coq.Init.Logic <> :type_scope:x_'='_x not
R9943:9943 compcert.backend.Tunnelingproof <> t var
R9947:9948 compcert.common.Events <> E0 def
R9953:9964 compcert.backend.Tunnelingproof <> match_states ind
R9970:9973 compcert.backend.Tunnelingproof <> st1' var
R9966:9968 compcert.backend.Tunnelingproof <> st2 var
R9781:9784 compcert.backend.LTL <> step ind
R9795:9797 compcert.backend.Tunnelingproof <> st2 var
R9793:9793 compcert.backend.Tunnelingproof <> t var
R9789:9791 compcert.backend.Tunnelingproof <> st1 var
R9786:9787 compcert.backend.Tunnelingproof <> PRESERVATION.ge var
R10100:10106 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10119:10125 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10114:10118 compcert.backend.LTL <> state ind
R10202:10210 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R10126:10129 compcert.backend.LTL <> step ind
R10198:10201 compcert.backend.Tunnelingproof <> st2' var
R10195:10196 compcert.common.Events <> E0 def
R10136:10140 compcert.backend.LTL <> State constr
R10169:10181 compcert.backend.Tunnelingproof <> branch_target def
R10146:10160 compcert.backend.Tunneling <> tunnel_function def
R10131:10133 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R10211:10222 compcert.backend.Tunnelingproof <> match_states ind
R10247:10250 compcert.backend.Tunnelingproof <> st2' var
R10225:10229 compcert.backend.LTL <> Block constr
R10086:10088 Coq.Init.Logic <> :type_scope:x_'='_x not
R10068:10080 compcert.backend.Tunnelingproof <> branch_target def
R10100:10106 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10119:10125 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R10114:10118 compcert.backend.LTL <> state ind
R10202:10210 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R10126:10129 compcert.backend.LTL <> step ind
R10198:10201 compcert.backend.Tunnelingproof <> st2' var
R10195:10196 compcert.common.Events <> E0 def
R10136:10140 compcert.backend.LTL <> State constr
R10169:10181 compcert.backend.Tunnelingproof <> branch_target def
R10146:10160 compcert.backend.Tunneling <> tunnel_function def
R10131:10133 compcert.backend.Tunnelingproof <> PRESERVATION.tge var
R10211:10222 compcert.backend.Tunnelingproof <> match_states ind
R10247:10250 compcert.backend.Tunnelingproof <> st2' var
R10225:10229 compcert.backend.LTL <> Block constr
R10086:10088 Coq.Init.Logic <> :type_scope:x_'='_x not
R10068:10080 compcert.backend.Tunnelingproof <> branch_target def
R10330:10340 compcert.lib.Maps PTree gmap1 thm
R10330:10340 compcert.lib.Maps PTree gmap1 thm
R10407:10426 compcert.backend.Tunnelingproof <> record_gotos_correct thm
R10407:10426 compcert.backend.Tunnelingproof <> record_gotos_correct thm
R10654:10661 compcert.backend.LTL <> exec_Lop constr
R10654:10661 compcert.backend.LTL <> exec_Lop constr
R10707:10730 compcert.ia32.Op <> eval_operation_preserved thm
R10707:10730 compcert.ia32.Op <> eval_operation_preserved thm
R10739:10755 compcert.backend.Tunnelingproof <> symbols_preserved thm
R10739:10755 compcert.backend.Tunnelingproof <> symbols_preserved thm
R10840:10849 compcert.backend.LTL <> exec_Lload constr
R10840:10849 compcert.backend.LTL <> exec_Lload constr
R10889:10913 compcert.ia32.Op <> eval_addressing_preserved thm
R10889:10913 compcert.ia32.Op <> eval_addressing_preserved thm
R10922:10938 compcert.backend.Tunnelingproof <> symbols_preserved thm
R10922:10938 compcert.backend.Tunnelingproof <> symbols_preserved thm
R11240:11250 compcert.backend.LTL <> exec_Lstore constr
R11240:11250 compcert.backend.LTL <> exec_Lstore constr
R11289:11313 compcert.ia32.Op <> eval_addressing_preserved thm
R11289:11313 compcert.ia32.Op <> eval_addressing_preserved thm
R11322:11338 compcert.backend.Tunnelingproof <> symbols_preserved thm
R11322:11338 compcert.backend.Tunnelingproof <> symbols_preserved thm
R11463:11475 compcert.backend.Tunneling <> tunnel_fundef def
R11440:11449 compcert.backend.LTL <> exec_Lcall constr
R11463:11475 compcert.backend.Tunneling <> tunnel_fundef def
R11440:11449 compcert.backend.LTL <> exec_Lcall constr
R11497:11520 compcert.backend.Tunnelingproof <> find_function_translated thm
R11497:11520 compcert.backend.Tunnelingproof <> find_function_translated thm
R11539:11551 compcert.backend.Tunnelingproof <> sig_preserved thm
R11539:11551 compcert.backend.Tunnelingproof <> sig_preserved thm
R11717:11729 compcert.backend.Tunneling <> tunnel_fundef def
R11690:11703 compcert.backend.LTL <> exec_Ltailcall constr
R11717:11729 compcert.backend.Tunneling <> tunnel_fundef def
R11690:11703 compcert.backend.LTL <> exec_Ltailcall constr
R11754:11772 compcert.backend.Tunnelingproof <> match_parent_locset thm
R11754:11772 compcert.backend.Tunnelingproof <> match_parent_locset thm
R11791:11814 compcert.backend.Tunnelingproof <> find_function_translated thm
R11791:11814 compcert.backend.Tunnelingproof <> find_function_translated thm
R11831:11843 compcert.backend.Tunnelingproof <> sig_preserved thm
R11831:11843 compcert.backend.Tunnelingproof <> sig_preserved thm
R11860:11878 compcert.backend.Tunnelingproof <> match_parent_locset thm
R11860:11878 compcert.backend.Tunnelingproof <> match_parent_locset thm
R11973:11985 compcert.backend.LTL <> exec_Lbuiltin constr
R11973:11985 compcert.backend.LTL <> exec_Lbuiltin constr
R12005:12036 compcert.common.Events <> external_call_symbols_preserved' thm
R12005:12036 compcert.common.Events <> external_call_symbols_preserved' thm
R12054:12070 compcert.backend.Tunnelingproof <> symbols_preserved thm
R12054:12070 compcert.backend.Tunnelingproof <> symbols_preserved thm
R12079:12095 compcert.backend.Tunnelingproof <> varinfo_preserved thm
R12079:12095 compcert.backend.Tunnelingproof <> varinfo_preserved thm
R12181:12191 compcert.backend.LTL <> exec_Lannot constr
R12181:12191 compcert.backend.LTL <> exec_Lannot constr
R12211:12242 compcert.common.Events <> external_call_symbols_preserved' thm
R12211:12242 compcert.common.Events <> external_call_symbols_preserved' thm
R12260:12276 compcert.backend.Tunnelingproof <> symbols_preserved thm
R12260:12276 compcert.backend.Tunnelingproof <> symbols_preserved thm
R12285:12301 compcert.backend.Tunnelingproof <> varinfo_preserved thm
R12285:12301 compcert.backend.Tunnelingproof <> varinfo_preserved thm
R12401:12412 compcert.backend.LTL <> exec_Lbranch constr
R12401:12412 compcert.backend.LTL <> exec_Lbranch constr
R12431:12443 compcert.backend.Tunnelingproof <> branch_target def
R12431:12443 compcert.backend.Tunnelingproof <> branch_target def
R12625:12634 compcert.backend.LTL <> exec_Lcond constr
R12625:12634 compcert.backend.LTL <> exec_Lcond constr
R12743:12757 compcert.backend.LTL <> exec_Ljumptable constr
R12743:12757 compcert.backend.LTL <> exec_Ljumptable constr
R12778:12791 compcert.lib.Coqlib <> list_nth_z_map thm
R12778:12791 compcert.lib.Coqlib <> list_nth_z_map thm
R12812:12815 compcert.backend.LTL <> node def
R12801:12805 compcert.backend.Tunneling U elt defax
R12801:12805 compcert.backend.Tunneling U elt defax
R12812:12815 compcert.backend.LTL <> node def
R12935:12946 compcert.backend.LTL <> exec_Lreturn constr
R12935:12946 compcert.backend.LTL <> exec_Lreturn constr
R12970:12988 compcert.backend.Tunnelingproof <> match_parent_locset thm
R12970:12988 compcert.backend.Tunnelingproof <> match_parent_locset thm
R13090:13111 compcert.backend.LTL <> exec_function_internal constr
R13090:13111 compcert.backend.LTL <> exec_function_internal constr
R13223:13244 compcert.backend.LTL <> exec_function_external constr
R13223:13244 compcert.backend.LTL <> exec_function_external constr
R13263:13294 compcert.common.Events <> external_call_symbols_preserved' thm
R13263:13294 compcert.common.Events <> external_call_symbols_preserved' thm
R13312:13328 compcert.backend.Tunnelingproof <> symbols_preserved thm
R13312:13328 compcert.backend.Tunnelingproof <> symbols_preserved thm
R13337:13353 compcert.backend.Tunnelingproof <> varinfo_preserved thm
R13337:13353 compcert.backend.Tunnelingproof <> varinfo_preserved thm
R13458:13468 compcert.backend.LTL <> exec_return constr
R13458:13468 compcert.backend.LTL <> exec_return constr
prf 13511:13531 <> transf_initial_states
R13576:13582 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13586:13587 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R13611:13614 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R13588:13600 compcert.backend.LTL <> initial_state ind
R13608:13610 compcert.backend.Tunnelingproof <> st2 var
R13602:13606 compcert.backend.Tunnelingproof <> PRESERVATION.tprog var
R13615:13626 compcert.backend.Tunnelingproof <> match_states ind
R13632:13634 compcert.backend.Tunnelingproof <> st2 var
R13628:13630 compcert.backend.Tunnelingproof <> st1 var
R13548:13560 compcert.backend.LTL <> initial_state ind
R13567:13569 compcert.backend.Tunnelingproof <> st1 var
R13562:13565 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R13678:13686 compcert.backend.LTL <> Callstate constr
R13711:13721 compcert.backend.Locations Locmap init def
R13723:13728 compcert.common.Values <> Vundef constr
R13693:13705 compcert.backend.Tunneling <> tunnel_fundef def
R13688:13690 Coq.Init.Datatypes <> nil constr
R13678:13686 compcert.backend.LTL <> Callstate constr
R13711:13721 compcert.backend.Locations Locmap init def
R13723:13728 compcert.common.Values <> Vundef constr
R13693:13705 compcert.backend.Tunneling <> tunnel_fundef def
R13688:13690 Coq.Init.Datatypes <> nil constr
R13774:13793 compcert.common.Globalenvs Genv init_mem_transf thm
R13774:13793 compcert.common.Globalenvs Genv init_mem_transf thm
R13835:13843 compcert.common.AST <> prog_main proj
R13845:13848 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R13812:13820 compcert.common.AST <> prog_main proj
R13822:13826 compcert.backend.Tunnelingproof <> PRESERVATION.tprog var
R13812:13820 compcert.common.AST <> prog_main proj
R13822:13826 compcert.backend.Tunnelingproof <> PRESERVATION.tprog var
R13835:13843 compcert.common.AST <> prog_main proj
R13845:13848 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R13862:13878 compcert.backend.Tunnelingproof <> symbols_preserved thm
R13862:13878 compcert.backend.Tunnelingproof <> symbols_preserved thm
R13896:13918 compcert.backend.Tunnelingproof <> function_ptr_translated thm
R13896:13918 compcert.backend.Tunnelingproof <> function_ptr_translated thm
R13950:13962 compcert.backend.Tunnelingproof <> sig_preserved thm
R13950:13962 compcert.backend.Tunnelingproof <> sig_preserved thm
prf 14006:14024 <> transf_final_states
R14095:14105 compcert.backend.LTL <> final_state ind
R14111:14111 compcert.backend.Tunnelingproof <> r var
R14107:14109 compcert.backend.Tunnelingproof <> st2 var
R14074:14084 compcert.backend.LTL <> final_state ind
R14090:14090 compcert.backend.Tunnelingproof <> r var
R14086:14088 compcert.backend.Tunnelingproof <> st1 var
R14050:14061 compcert.backend.Tunnelingproof <> match_states ind
R14067:14069 compcert.backend.Tunnelingproof <> st2 var
R14063:14065 compcert.backend.Tunnelingproof <> st1 var
prf 14191:14212 <> transf_program_correct
R14217:14234 compcert.common.Smallstep <> forward_simulation rec
R14258:14270 compcert.backend.LTL <> semantics def
R14272:14276 compcert.backend.Tunnelingproof <> PRESERVATION.tprog var
R14237:14249 compcert.backend.LTL <> semantics def
R14251:14254 compcert.backend.Tunnelingproof <> PRESERVATION.prog var
R14296:14317 compcert.common.Smallstep <> forward_simulation_opt thm
R14296:14317 compcert.common.Smallstep <> forward_simulation_opt thm
R14329:14345 compcert.backend.Tunnelingproof <> symbols_preserved thm
R14329:14345 compcert.backend.Tunnelingproof <> symbols_preserved thm
R14357:14377 compcert.backend.Tunnelingproof <> transf_initial_states thm
R14357:14377 compcert.backend.Tunnelingproof <> transf_initial_states thm
R14389:14407 compcert.backend.Tunnelingproof <> transf_final_states thm
R14389:14407 compcert.backend.Tunnelingproof <> transf_final_states thm
R14419:14437 compcert.backend.Tunnelingproof <> tunnel_step_correct thm
R14419:14437 compcert.backend.Tunnelingproof <> tunnel_step_correct thm
R14451:14462 compcert.backend.Tunnelingproof PRESERVATION <> sec
